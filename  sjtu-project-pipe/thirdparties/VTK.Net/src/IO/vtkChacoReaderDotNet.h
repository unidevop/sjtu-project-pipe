#pragma once

// managed includes

// native includes

using namespace System;

namespace vtk {


public ref class vtkChacoReader : public vtkUnstructuredGridAlgorithm
{

public:
// Did not wrap:  static vtkChacoReader *New ();


  // const char *GetClassName ();
  System::String^ GetClassName();


  // int IsA (const char *name);
  int IsA(System::String^ name);


  // vtkChacoReader *NewInstance ();
  vtkChacoReader^ NewInstance();


  // vtkChacoReader *SafeDownCast (vtkObject* o);
  static vtkChacoReader^ SafeDownCast(vtkObject^ o);


  void PrintSelf(System::IO::TextWriter^ writer, int indentLevel);

  virtual System::String^ ToString() override;


  // void SetBaseName (char *);
  void SetBaseName(System::String^ arg0);


  // char *GetBaseName ();
  System::String^ GetBaseName();


  // void SetGenerateGlobalElementIdArray (int );
  void SetGenerateGlobalElementIdArray(int arg0);


  // int GetGenerateGlobalElementIdArray ();
  int GetGenerateGlobalElementIdArray();


  // void GenerateGlobalElementIdArrayOn ();
  void GenerateGlobalElementIdArrayOn();


  // void GenerateGlobalElementIdArrayOff ();
  void GenerateGlobalElementIdArrayOff();


  // static const char *GetGlobalElementIdArrayName ();return 
  static System::String^ GetGlobalElementIdArrayName();


  // void SetGenerateGlobalNodeIdArray (int );
  void SetGenerateGlobalNodeIdArray(int arg0);


  // int GetGenerateGlobalNodeIdArray ();
  int GetGenerateGlobalNodeIdArray();


  // void GenerateGlobalNodeIdArrayOn ();
  void GenerateGlobalNodeIdArrayOn();


  // void GenerateGlobalNodeIdArrayOff ();
  void GenerateGlobalNodeIdArrayOff();


  // static const char *GetGlobalNodeIdArrayName ();return 
  static System::String^ GetGlobalNodeIdArrayName();


  // void SetGenerateVertexWeightArrays (int );
  void SetGenerateVertexWeightArrays(int arg0);


  // int GetGenerateVertexWeightArrays ();
  int GetGenerateVertexWeightArrays();


  // void GenerateVertexWeightArraysOn ();
  void GenerateVertexWeightArraysOn();


  // void GenerateVertexWeightArraysOff ();
  void GenerateVertexWeightArraysOff();


  // int GetNumberOfVertexWeights ();
  int GetNumberOfVertexWeights();


  // char *GetVertexWeightArrayName (int weight);
  System::String^ GetVertexWeightArrayName(int weight);


  // void SetGenerateEdgeWeightArrays (int );
  void SetGenerateEdgeWeightArrays(int arg0);


  // int GetGenerateEdgeWeightArrays ();
  int GetGenerateEdgeWeightArrays();


  // void GenerateEdgeWeightArraysOn ();
  void GenerateEdgeWeightArraysOn();


  // void GenerateEdgeWeightArraysOff ();
  void GenerateEdgeWeightArraysOff();


  // int GetNumberOfEdgeWeights ();
  int GetNumberOfEdgeWeights();


  // char *GetEdgeWeightArrayName (int weight);
  System::String^ GetEdgeWeightArrayName(int weight);


  // int GetDimensionality ();
/// <summary>
/// <para>Access to meta data generated by RequestInformation.</para>
/// </summary>
  int GetDimensionality();


  // vtkIdType GetNumberOfEdges ();
/// <summary>
/// <para>Access to meta data generated by RequestInformation.</para>
/// </summary>
  int GetNumberOfEdges();


  // vtkIdType GetNumberOfVertices ();
/// <summary>
/// <para>Access to meta data generated by RequestInformation.</para>
/// </summary>
  int GetNumberOfVertices();


  // int GetNumberOfCellWeightArrays ();
  int GetNumberOfCellWeightArrays();


  // int GetNumberOfPointWeightArrays ();
  int GetNumberOfPointWeightArrays();


// Did not wrap:  vtkChacoReader ();


// Did not wrap:  ~vtkChacoReader ();


// Did not wrap:  int BuildOutputGrid (vtkUnstructuredGrid *gr);


// Did not wrap:  void CloseCurrentFile ();


// Did not wrap:  int OpenCurrentFile ();


// Did not wrap:  int InputGeom (vtkIdType nvtxs, int igeom, double *x, double *y, double *z);


// Did not wrap:  int InputGraph1 ();


// Did not wrap:  int InputGraph2 (vtkIdType *start, vtkIdType *adjacency, double *vweights, double *eweights);


// Did not wrap:  int GetCoordsMetadata ();


// Did not wrap:  void GetGraphMetadata ();


// Did not wrap:  int ReadFile (vtkUnstructuredGrid *output);


// Did not wrap:  void AddElementIds (vtkUnstructuredGrid *output);


// Did not wrap:  void AddNodeIds (vtkUnstructuredGrid *output);


// Did not wrap:  void MakeWeightArrayNames (int nv, int ne);


// Did not wrap:  void SetCurrentBaseName (char *);


// Did not wrap:  int RequestInformation (vtkInformation *, vtkInformationVector *, vtkInformationVector *);


// Did not wrap:  int RequestData (vtkInformation *, vtkInformationVector *, vtkInformationVector *);


// Did not wrap:  vtkChacoReader (const vtkChacoReader &);


// Did not wrap:  void vtkChacoReader 


// Did not wrap:  double ReadVal (FILE *infile, int *end_flag);


// Did not wrap:  vtkIdType ReadInt (FILE *infile, int *end_flag);


// Did not wrap:  void FlushLine (FILE *infile);


// Did not wrap:  void ResetInputBuffers ();


// Did not wrap:  void ClearWeightArrayNames ();


  /// <summary>
  /// This constructor is used to convert native pointers into managed wrapper classes.
  /// </summary>
  vtkChacoReader(System::IntPtr native, bool bConst);

  /// <summary>
  /// This constructor is called only by derived classes. It asks base classes not allocate a native instance.
  /// </summary>
  vtkChacoReader(bool donothing);

  /// <summary>
  /// This constructor creates a wrapper class. It is the one to call.  /// </summary>
  vtkChacoReader();

  /// <summary>
  /// This method calls Delete() on the native instance.
  /// Use it to release resources in a timely fashion.
  /// </summary>
  /// <remarks>
  /// If this method is not called, then the finalizer will 
  /// call Delete on this instance.
  /// </remarks>
  virtual ~vtkChacoReader();


};

} // end vtkIO
