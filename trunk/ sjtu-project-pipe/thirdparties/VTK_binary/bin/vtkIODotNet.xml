<?xml version="1.0"?>
<doc>
    <assembly>
        "vtkIODotNet"
    </assembly>
    <members>
        <member name="M:vtk.vtkPostScriptWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPostScriptWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPostScriptWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPostScriptWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPostScriptWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPostScriptWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkOBJReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkOBJReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkOBJReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkOBJReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkOBJReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkOBJReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkOBJReader.GetFileName">
            <summary>
                <para>Specify file name of Wavefront .obj file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkOBJReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of Wavefront .obj file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSightReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPLYReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPLYReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPLYReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPLYReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPLYReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPLYReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPLYReader.GetFileName">
            <summary>
                <para>Specify file name of stereo lithography file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of stereo lithography file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkTIFFReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.InitializeColors">
            <summary>
                <para>Auxilary methods used by the reader internally.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.GetDescriptiveName">
            <summary>
                <para>Auxilary methods used by the reader internally.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.GetFileExtensions">
            <summary>
                <para>Return a descriptive name for the file format that might be useful in a GUI.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFReader.CanReadFile(System.String)">
            <summary>
                <para>Is the given file name a tiff file file?</para>
            </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.ReadMetaData(vtk.vtkInformation)">
            <summary>
                <para>Read the meta information from the file.  This needs to be public to it can be accessed by vtkDataSetReader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.SetOutput(vtk.vtkRectilinearGrid)">
            <summary>
                <para>Get and set the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get and set the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridReader.GetOutput">
            <summary>
                <para>Get and set the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMetaImageReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.CanReadFile(System.String)">
            <summary>
                <para>Test whether the file with the given name can be read by this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.GetFileName">
            <summary>
                <para>Test whether the file with the given name can be read by this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMetaImageReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of meta file</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLParser.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkUGFacetReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.CreateDefaultLocator">
            <summary>
                <para>Create default locator. Used to create one when none is specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.GetLocator">
            <summary>
                <para>Specify a spatial locator for merging points. By default an instance of vtkMergePoints is used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.SetLocator(vtk.vtkPointLocator)">
            <summary>
                <para>Specify a spatial locator for merging points. By default an instance of vtkMergePoints is used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.MergingOff">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.MergingOn">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.GetMerging">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.SetMerging(System.Int32)">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.GetPartNumber">
            <summary>
                <para>Specify the desired part to extract. The part number must range between [0,NumberOfParts-1]. If the value is =(-1), then all parts will be  extracted. If the value is &lt;(-1), then no parts will be  extracted but  the part colors will be updated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.SetPartNumber(System.Int32)">
            <summary>
                <para>Specify the desired part to extract. The part number must range between [0,NumberOfParts-1]. If the value is =(-1), then all parts will be  extracted. If the value is &lt;(-1), then no parts will be  extracted but  the part colors will be updated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.GetPartColorIndex(System.Int32)">
            <summary>
                <para>Retrieve color index for the parts in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.GetNumberOfParts">
            <summary>
                <para>Special methods for interrogating the data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.GetFileName">
            <summary>
                <para>Specify Unigraphics file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.SetFileName(System.String)">
            <summary>
                <para>Specify Unigraphics file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUGFacetReader.GetMTime">
            <summary>
                <para>Overload standard modified time function. If locator is modified, then this object is modified as well.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.GetInput(System.Int32)">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsWriter.GetInput">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.GetFileVersion">
            <summary>
                <para>Get the file version of the XML file tested.  If the file could not be read, returns NULL.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.GetFileDataType">
            <summary>
                <para>Get the data type of the XML file tested.  If the file could not be read, returns NULL.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.GetFileName">
            <summary>
                <para>Get/Set the name of the file tested by TestReadFile().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.SetFileName(System.String)">
            <summary>
                <para>Get/Set the name of the file tested by TestReadFile().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLFileReadTester.TestReadFile">
            <summary>
                <para>Try to read the file given by FileName.  Returns 1 if the file is a VTK XML file, and 0 otherwise.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.CopyOutputInformation(vtk.vtkInformation,System.Int32)">
            <summary>
                <para>For the specified port, copy the information this reader sets up in SetupOutputInformation to outInfo</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataReader.SetOutput(vtk.vtkImageData)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.GetCurrentPiece">
            <summary>
                <para>Set or get the current piece.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.SetCurrentPiece(System.Int32)">
            <summary>
                <para>Set or get the current piece.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.GetPieceCaseFileName">
            <summary>
                <para>Get the file name that will be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSightMasterServerReader.DetermineFileName(System.Int32)">
            <summary>
                <para>Determine which file should be read for piece</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDataObjectReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.SetOutput(vtk.vtkDataObject)">
            <summary>
                <para>Get the output field of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.GetOutput(System.Int32)">
            <summary>
                <para>Get the output field of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectReader.GetOutput">
            <summary>
                <para>Get the output field of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSTLReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkSTLReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSTLReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkSTLReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkSTLReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkSTLReader.CreateDefaultLocator">
            <summary>
                <para>Create default locator. Used to create one when none is specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.GetLocator">
            <summary>
                <para>Specify a spatial locator for merging points. By default an instance of vtkMergePoints is used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.SetLocator(vtk.vtkPointLocator)">
            <summary>
                <para>Specify a spatial locator for merging points. By default an instance of vtkMergePoints is used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.ScalarTagsOff">
            <summary>
                <para>Turn on/off tagging of solids with scalars.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.ScalarTagsOn">
            <summary>
                <para>Turn on/off tagging of solids with scalars.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.GetScalarTags">
            <summary>
                <para>Turn on/off tagging of solids with scalars.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.SetScalarTags(System.Int32)">
            <summary>
                <para>Turn on/off tagging of solids with scalars.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.MergingOff">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.MergingOn">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.GetMerging">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.SetMerging(System.Int32)">
            <summary>
                <para>Turn on/off merging of points/triangles.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.GetFileName">
            <summary>
                <para>Specify file name of stereo lithography file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of stereo lithography file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSTLReader.GetMTime">
            <summary>
                <para>Overload standard modified time function. If locator is modified, then this object is modified as well.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBYUWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.WriteTextureOff">
            <summary>
                <para>Turn on/off writing the texture file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.WriteTextureOn">
            <summary>
                <para>Turn on/off writing the texture file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.GetWriteTexture">
            <summary>
                <para>Turn on/off writing the texture file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.SetWriteTexture(System.Int32)">
            <summary>
                <para>Turn on/off writing the texture file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.WriteScalarOff">
            <summary>
                <para>Turn on/off writing the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.WriteScalarOn">
            <summary>
                <para>Turn on/off writing the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.GetWriteScalar">
            <summary>
                <para>Turn on/off writing the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.SetWriteScalar(System.Int32)">
            <summary>
                <para>Turn on/off writing the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.WriteDisplacementOff">
            <summary>
                <para>Turn on/off writing the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.WriteDisplacementOn">
            <summary>
                <para>Turn on/off writing the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.GetWriteDisplacement">
            <summary>
                <para>Turn on/off writing the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.SetWriteDisplacement(System.Int32)">
            <summary>
                <para>Turn on/off writing the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.GetTextureFileName">
            <summary>
                <para>Specify the name of the texture file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.SetTextureFileName(System.String)">
            <summary>
                <para>Specify the name of the texture file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.GetScalarFileName">
            <summary>
                <para>Specify the name of the scalar file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.SetScalarFileName(System.String)">
            <summary>
                <para>Specify the name of the scalar file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.GetDisplacementFileName">
            <summary>
                <para>Specify the name of the displacement file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.SetDisplacementFileName(System.String)">
            <summary>
                <para>Specify the name of the displacement file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.GetGeometryFileName">
            <summary>
                <para>Specify the name of the geometry file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUWriter.SetGeometryFileName(System.String)">
            <summary>
                <para>Specify the name of the geometry file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNGReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPNGReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPNGReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPNGReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPNGReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPNGReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.End">
            <summary>
                <para>These methods start writing an Movie file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.Write">
            <summary>
                <para>These methods start writing an Movie file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMPEG2Writer.Start">
            <summary>
                <para>These methods start writing an Movie file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.ReadMetaData(vtk.vtkInformation)">
            <summary>
                <para>Read the meta information from the file.  This needs to be public to it can be accessed by vtkDataSetReader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.SetOutput(vtk.vtkStructuredGrid)">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredGridReader.GetOutput">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridReader.SetOutput(vtk.vtkStructuredGrid)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetGantryAngle">
            <summary>
                <para>Get the gantry angle for the last image processed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetStudyID">
            <summary>
                <para>Get the Study ID for the last image processed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetStudyUID">
            <summary>
                <para>Get the study uid for the last image processed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetPatientName">
            <summary>
                <para>Get the patient name for the last image processed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetRescaleOffset">
            <summary>
                <para>Get the rescale offset for the pixel data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetRescaleSlope">
            <summary>
                <para>Get the rescale slope for the pixel data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetTransferSyntaxUID">
            <summary>
                <para>Get the transfer syntax UID for the last image processed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetNumberOfComponents">
            <summary>
                <para>Get the number of components of the image data for the last image processed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetPixelRepresentation">
            <summary>
                <para>Get the pixel representation of the last image processed by the DICOMParser. A zero is a unsigned quantity.  A one indicates a signed quantity</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetBitsAllocated">
            <summary>
                <para>Get the number of bits allocated for each pixel in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetHeight">
            <summary>
                <para>Returns the image height.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetWidth">
            <summary>
                <para>Returns the image width.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetDirectoryName">
            <summary>
                <para>Returns the directory name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.SetDirectoryName(System.String)">
            <summary>
                <para>Set the directory name for the reader to look in for DICOM files. If this method is used, the reader will try to find all the DICOM files in a directory. It will select the subset corresponding to the first series UID it stumbles across and it will try to build an ordered volume from them based on the slice number. The volume building will be upgraded to something more sophisticated in the future.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.SetFileName(System.String)">
            <summary>
                <para>Set the directory name for the reader to look in for DICOM files. If this method is used, the reader will try to find all the DICOM files in a directory. It will select the subset corresponding to the first series UID it stumbles across and it will try to build an ordered volume from them based on the slice number. The volume building will be upgraded to something more sophisticated in the future.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.SafeDownCast(vtk.vtkObject)">
            <summary>
                <para>Static method for construction.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.NewInstance">
            <summary>
                <para>Static method for construction.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.IsA(System.String)">
            <summary>
                <para>Static method for construction.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDICOMImageReader.GetClassName">
            <summary>
                <para>Static method for construction.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkIVWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkIVWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkIVWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkIVWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkIVWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkIVWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPolyDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianCubeReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkGaussianCubeReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkGaussianCubeReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkGaussianCubeReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkGaussianCubeReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkGaussianCubeReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkEnSight6BinaryReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkEnSight6BinaryReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkEnSight6BinaryReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkEnSight6BinaryReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkEnSight6BinaryReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkEnSight6BinaryReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPNGWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.GetResult">
            <summary>
                <para>When writing to memory this is the result, it will be NULL until the  data is written the first time</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.SetResult(vtk.vtkUnsignedCharArray)">
            <summary>
                <para>When writing to memory this is the result, it will be NULL until the  data is written the first time</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.WriteToMemoryOff">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.WriteToMemoryOn">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.GetWriteToMemory">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.SetWriteToMemory(System.UInt32)">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNGWriter.Write">
            <summary>
                <para>The main interface which triggers the writer to start.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPImageDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GenerateDefaultConfiguration">
            <summary />
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.CanReadBinaryFile(System.String)">
            <summary>
                <para>Return 1 if the reader can read the given file name. Only meaningful for binary files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.RemoveAllFunctions">
            <summary>
                <para>Specify additional functions to read. These are placed into the point data as data arrays. Later on they can be used by labeling them as scalars, etc.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.RemoveFunction(System.Int32)">
            <summary>
                <para>Specify additional functions to read. These are placed into the point data as data arrays. Later on they can be used by labeling them as scalars, etc.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.AddFunction(System.Int32)">
            <summary>
                <para>Specify additional functions to read. These are placed into the point data as data arrays. Later on they can be used by labeling them as scalars, etc.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetVectorFunctionNumber">
            <summary>
                <para>Specify the vector function to extract. If ==(-1), then no vector function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetVectorFunctionNumber(System.Int32)">
            <summary>
                <para>Specify the vector function to extract. If ==(-1), then no vector function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetScalarFunctionNumber">
            <summary>
                <para>Specify the scalar function to extract. If ==(-1), then no scalar  function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetScalarFunctionNumber(System.Int32)">
            <summary>
                <para>Specify the scalar function to extract. If ==(-1), then no scalar  function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetWvinf">
            <summary>
                <para>Set/Get the z-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetWvinf(System.Double)">
            <summary>
                <para>Set/Get the z-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetVvinf">
            <summary>
                <para>Set/Get the y-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetVvinf(System.Double)">
            <summary>
                <para>Set/Get the y-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetUvinf">
            <summary>
                <para>Set/Get the x-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetUvinf(System.Double)">
            <summary>
                <para>Set/Get the x-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetGamma">
            <summary>
                <para>Set/Get the ratio of specific heats. Default is 1.4.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetGamma(System.Double)">
            <summary>
                <para>Set/Get the ratio of specific heats. Default is 1.4.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetR">
            <summary>
                <para>Set/Get the gas constant. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetR(System.Double)">
            <summary>
                <para>Set/Get the gas constant. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetByteOrderAsString">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetByteOrder">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetByteOrder(System.Int32)">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetByteOrderToLittleEndian">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetByteOrderToBigEndian">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.ForceReadOff">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.ForceReadOn">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetForceRead">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetForceRead(System.Int32)">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.TwoDimensionalGeometryOff">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.TwoDimensionalGeometryOn">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetTwoDimensionalGeometry">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetTwoDimensionalGeometry(System.Int32)">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.IBlankingOff">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.IBlankingOn">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetIBlanking">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetIBlanking(System.Int32)">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.HasByteCountOff">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.HasByteCountOn">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetHasByteCount">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetHasByteCount(System.Int32)">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.MultiGridOff">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.MultiGridOn">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetMultiGrid">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetMultiGrid(System.Int32)">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.BinaryFileOff">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.BinaryFileOn">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetBinaryFile">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetBinaryFile(System.Int32)">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetNumberOfGrids">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetNumberOfBlocks">
            <summary>
                <para>This returns the number of outputs this reader will produce. This number is equal to the number of grids in the current  file. This method has to be called before getting any output if the number of outputs will be greater than 1 (the first output is always the same). Note that every time this method is invoked, the header file is opened and part of the header  is read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetQFileName">
            <summary>
                <para>Set/Get the PLOT3D solution filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetQFileName(System.String)">
            <summary>
                <para>Set/Get the PLOT3D solution filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetXYZFileName">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetXYZFileName(System.String)">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.GetFileName">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMultiBlockPLOT3DReader.SetFileName(System.String)">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.GetFieldDataName">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.SetFieldDataName(System.String)">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.SetFileTypeToBinary">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.SetFileTypeToASCII">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.GetFileType">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.SetFileType(System.Int32)">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.GetHeader">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.SetHeader(System.String)">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.GetFileName">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataObjectWriter.SetFileName(System.String)">
            <summary>
                <para>Methods delegated to vtkDataWriter, see vtkDataWriter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDataSetReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.ReadOutputType">
            <summary>
                <para>This method can be used to find out the type of output expected without needing to read the whole file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.GetRectilinearGridOutput">
            <summary>
                <para>Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read.  Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned.  (You must also set the filename of the object prior to getting the output.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.GetUnstructuredGridOutput">
            <summary>
                <para>Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read.  Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned.  (You must also set the filename of the object prior to getting the output.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.GetStructuredGridOutput">
            <summary>
                <para>Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read.  Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned.  (You must also set the filename of the object prior to getting the output.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.GetStructuredPointsOutput">
            <summary>
                <para>Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read.  Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned.  (You must also set the filename of the object prior to getting the output.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.GetPolyDataOutput">
            <summary>
                <para>Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read.  Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned.  (You must also set the filename of the object prior to getting the output.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.GetOutput(System.Int32)">
            <summary>
                <para>Get the output of this filter</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetReader.GetOutput">
            <summary>
                <para>Get the output of this filter</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLDataParser.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetAttributesEncoding">
            <summary>
                <para>Get/Set the character encoding that will be used to set the attributes's encoding type of each vtkXMLDataElement created by this parser (i.e., the data element attributes will use that encoding internally). If set to VTK_ENCODING_NONE (default), the attribute encoding type will not be changed and will default to the vtkXMLDataElement default encoding type (see vtkXMLDataElement::AttributeEncoding).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetAttributesEncodingMaxValue">
            <summary>
                <para>Get/Set the character encoding that will be used to set the attributes's encoding type of each vtkXMLDataElement created by this parser (i.e., the data element attributes will use that encoding internally). If set to VTK_ENCODING_NONE (default), the attribute encoding type will not be changed and will default to the vtkXMLDataElement default encoding type (see vtkXMLDataElement::AttributeEncoding).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetAttributesEncodingMinValue">
            <summary>
                <para>Get/Set the character encoding that will be used to set the attributes's encoding type of each vtkXMLDataElement created by this parser (i.e., the data element attributes will use that encoding internally). If set to VTK_ENCODING_NONE (default), the attribute encoding type will not be changed and will default to the vtkXMLDataElement default encoding type (see vtkXMLDataElement::AttributeEncoding).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.SetAttributesEncoding(System.Int32)">
            <summary>
                <para>Get/Set the character encoding that will be used to set the attributes's encoding type of each vtkXMLDataElement created by this parser (i.e., the data element attributes will use that encoding internally). If set to VTK_ENCODING_NONE (default), the attribute encoding type will not be changed and will default to the vtkXMLDataElement default encoding type (see vtkXMLDataElement::AttributeEncoding).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.SetProgress(System.Single)">
            <summary>
                <para>Get/Set progress of reading data.  This may be checked by a progress event observer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetProgress">
            <summary>
                <para>Get/Set progress of reading data.  This may be checked by a progress event observer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.SetAbort(System.Int32)">
            <summary>
                <para>Get/Set flag to abort reading of data.  This may be set by a progress event observer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetAbort">
            <summary>
                <para>Get/Set flag to abort reading of data.  This may be set by a progress event observer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.Parse">
            <summary>
                <para>Parse the XML input and check that the file is safe to read. Returns 1 for okay, 0 for error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetWordTypeSize(System.Int32)">
            <summary>
                <para>Get the size of a word of the given type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetCompressor">
            <summary>
                <para>Get/Set the compressor used to decompress binary and appended data after reading from the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.SetCompressor(vtk.vtkDataCompressor)">
            <summary>
                <para>Get/Set the compressor used to decompress binary and appended data after reading from the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataParser.GetRootElement">
            <summary>
                <para>Get the root element from the XML document.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLParser.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLParser.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLParser.GetFileName">
            <summary>
                <para>Set and get file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.SetFileName(System.String)">
            <summary>
                <para>Set and get file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.CleanupParser">
            <summary>
                <para>When parsing fragments of XML or streaming XML, use the following three methods.  InitializeParser method initialize parser but does not perform any actual parsing.  ParseChunk parses framgent of XML. This has to match to what was already parsed. CleanupParser finishes parsing. If there were errors, CleanupParser will report them.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.ParseChunk(System.String,System.UInt32)">
            <summary>
                <para>When parsing fragments of XML or streaming XML, use the following three methods.  InitializeParser method initialize parser but does not perform any actual parsing.  ParseChunk parses framgent of XML. This has to match to what was already parsed. CleanupParser finishes parsing. If there were errors, CleanupParser will report them.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.InitializeParser">
            <summary>
                <para>When parsing fragments of XML or streaming XML, use the following three methods.  InitializeParser method initialize parser but does not perform any actual parsing.  ParseChunk parses framgent of XML. This has to match to what was already parsed. CleanupParser finishes parsing. If there were errors, CleanupParser will report them.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.Parse(System.String,System.UInt32)">
            <summary>
                <para>Parse the XML message. If length is specified, parse only the first "length" characters</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.Parse(System.String)">
            <summary>
                <para>Parse the XML message. If length is specified, parse only the first "length" characters</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.Parse">
            <summary>
                <para>Parse the XML input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.SeekG(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Used by subclasses and their supporting classes.  These methods wrap around the tellg and seekg methods of the input stream to work-around stream bugs on various platforms.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLParser.TellG">
            <summary>
                <para>Used by subclasses and their supporting classes.  These methods wrap around the tellg and seekg methods of the input stream to work-around stream bugs on various platforms.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataSetWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataSetWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataSetWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPDataSetWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataSetWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataSetWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridReader.SetOutput(vtk.vtkRectilinearGrid)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMoleculeReaderBase.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMoleculeReaderBase.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.GetInput(System.Int32)">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredGridWriter.GetInput">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldBinaryReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldBinaryReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldBinaryReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkEnSightGoldBinaryReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldBinaryReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldBinaryReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkGESignaReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkGESignaReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkGESignaReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkGESignaReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkGESignaReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkGESignaReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkGESignaReader.GetFileExtensions">
            <summary>
                <para>A descriptive name for this format</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGESignaReader.CanReadFile(System.String)">
            <summary />
        </member>
        <member name="M:vtk.vtkPLOT3DReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GenerateDefaultConfiguration">
            <summary />
        </member>
        <member name="M:vtk.vtkPLOT3DReader.CanReadBinaryFile(System.String)">
            <summary>
                <para>Return 1 if the reader can read the given file name. Only meaningful for binary files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.RemoveAllFunctions">
            <summary>
                <para>Specify additional functions to read. These are placed into the point data as data arrays. Later on they can be used by labeling them as scalars, etc.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.RemoveFunction(System.Int32)">
            <summary>
                <para>Specify additional functions to read. These are placed into the point data as data arrays. Later on they can be used by labeling them as scalars, etc.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.AddFunction(System.Int32)">
            <summary>
                <para>Specify additional functions to read. These are placed into the point data as data arrays. Later on they can be used by labeling them as scalars, etc.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetVectorFunctionNumber">
            <summary>
                <para>Specify the vector function to extract. If ==(-1), then no vector function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetVectorFunctionNumber(System.Int32)">
            <summary>
                <para>Specify the vector function to extract. If ==(-1), then no vector function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetScalarFunctionNumber">
            <summary>
                <para>Specify the scalar function to extract. If ==(-1), then no scalar  function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetScalarFunctionNumber(System.Int32)">
            <summary>
                <para>Specify the scalar function to extract. If ==(-1), then no scalar  function is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetWvinf">
            <summary>
                <para>Set/Get the z-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetWvinf(System.Double)">
            <summary>
                <para>Set/Get the z-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetVvinf">
            <summary>
                <para>Set/Get the y-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetVvinf(System.Double)">
            <summary>
                <para>Set/Get the y-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetUvinf">
            <summary>
                <para>Set/Get the x-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetUvinf(System.Double)">
            <summary>
                <para>Set/Get the x-component of the free-stream velocity. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetGamma">
            <summary>
                <para>Set/Get the ratio of specific heats. Default is 1.4.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetGamma(System.Double)">
            <summary>
                <para>Set/Get the ratio of specific heats. Default is 1.4.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetR">
            <summary>
                <para>Set/Get the gas constant. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetR(System.Double)">
            <summary>
                <para>Set/Get the gas constant. Default is 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetByteOrderAsString">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetByteOrder">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetByteOrder(System.Int32)">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetByteOrderToLittleEndian">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetByteOrderToBigEndian">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.DoNotReduceNumberOfOutputsOff">
            <summary>
                <para>If this is on, the reader will never reduce the number of outputs   after reading a file with n grids and producing n outputs. If the file read afterwards contains fewer grids, the extra outputs will be empty. This option can be used by application which rely on the initial number of outputs not shrinking.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.DoNotReduceNumberOfOutputsOn">
            <summary>
                <para>If this is on, the reader will never reduce the number of outputs   after reading a file with n grids and producing n outputs. If the file read afterwards contains fewer grids, the extra outputs will be empty. This option can be used by application which rely on the initial number of outputs not shrinking.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetDoNotReduceNumberOfOutputs">
            <summary>
                <para>If this is on, the reader will never reduce the number of outputs   after reading a file with n grids and producing n outputs. If the file read afterwards contains fewer grids, the extra outputs will be empty. This option can be used by application which rely on the initial number of outputs not shrinking.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetDoNotReduceNumberOfOutputs(System.Int32)">
            <summary>
                <para>If this is on, the reader will never reduce the number of outputs   after reading a file with n grids and producing n outputs. If the file read afterwards contains fewer grids, the extra outputs will be empty. This option can be used by application which rely on the initial number of outputs not shrinking.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.ForceReadOff">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.ForceReadOn">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetForceRead">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetForceRead(System.Int32)">
            <summary>
                <para>Try to read a binary file even if the file length seems to be inconsistent with the header information. Use this with caution, if the file length is not the same as calculated from the header. either the file is corrupt or the settings are wrong. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.TwoDimensionalGeometryOff">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.TwoDimensionalGeometryOn">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetTwoDimensionalGeometry">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetTwoDimensionalGeometry(System.Int32)">
            <summary>
                <para>If only two-dimensional data was written to the file, turn this on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.IBlankingOff">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.IBlankingOn">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetIBlanking">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetIBlanking(System.Int32)">
            <summary>
                <para>Is there iblanking (point visibility) information in the file. If there is iblanking arrays, these will be read and assigned to the PointVisibility array of the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.HasByteCountOff">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.HasByteCountOn">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetHasByteCount">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetHasByteCount(System.Int32)">
            <summary>
                <para>Were the arrays written with leading and trailing byte counts ? Usually, files written by a fortran program will contain these byte counts whereas the ones written by C/C++ won't.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.MultiGridOff">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.MultiGridOn">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetMultiGrid">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetMultiGrid(System.Int32)">
            <summary>
                <para>Does the file to be read contain information about number of grids. In some PLOT3D files, the first value contains the number  of grids (even if there is only 1). If reading such a file, set this to true.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.BinaryFileOff">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.BinaryFileOn">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetBinaryFile">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetBinaryFile(System.Int32)">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetOutput(System.Int32,vtk.vtkStructuredGrid)">
            <summary>
                <para>Replace an output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetNumberOfGrids">
            <summary>
                <para>Replace an output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetNumberOfOutputs">
            <summary>
                <para>This returns the number of outputs this reader will produce. This number is equal to the number of grids in the current  file. This method has to be called before getting any output if the number of outputs will be greater than 1 (the first output is always the same). Note that every time this method is invoked, the header file is opened and part of the header  is read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetQFileName">
            <summary>
                <para>Set/Get the PLOT3D solution filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetQFileName(System.String)">
            <summary>
                <para>Set/Get the PLOT3D solution filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetXYZFileName">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetXYZFileName(System.String)">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.GetFileName">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLOT3DReader.SetFileName(System.String)">
            <summary>
                <para>Set/Get the PLOT3D geometry filename.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBase64InputStream.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.EndReading">
            <summary>
                <para>Called after all desired calls to Seek and Read have been made. After this call, the caller is free to change the position of the stream.  Additional reads should not be done until after another call to StartReading.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.Read(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Read input data of the given length.  Returns amount actually read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.Seek(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Seek to the given offset in the input data.  Returns 1 for success, 0 for failure.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64InputStream.StartReading">
            <summary>
                <para>Called after the stream position has been set by the caller, but before any Seek or Read calls.  The stream position should not be adjusted by the caller until after an EndReading call.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkChacoReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkChacoReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkChacoReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkChacoReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkChacoReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkChacoReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkChacoReader.GetNumberOfVertices">
            <summary>
                <para>Access to meta data generated by RequestInformation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkChacoReader.GetNumberOfEdges">
            <summary>
                <para>Access to meta data generated by RequestInformation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkChacoReader.GetDimensionality">
            <summary>
                <para>Access to meta data generated by RequestInformation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredGridWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDEMReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkDEMReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDEMReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDEMReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetProfileDimension">
            <summary>
                <para>The number of rows and columns in the DEM.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetSpatialResolution">
            <summary>
                <para>DEM spatial resolution for x,y,z. Values are expressed in units of resolution. Since elevations are read as integers, this permits fractional elevations.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetAccuracyCode">
            <summary>
                <para>Accuracy code for elevations. 0=unknown accuracy</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetLocalRotation">
            <summary>
                <para>Counterclockwise angle (in radians) from the primary axis of the planimetric reference to the primary axis of the DEM local reference system. IGNORED BY THIS IMPLEMENTATION.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetElevationBounds">
            <summary>
                <para>Minimum and maximum elevation for the DEM. The units in the file are in ElevationUnitOfMeasure. This class converts them to meters.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetPolygonSize">
            <summary>
                <para>Number of sides in the polygon which defines the coverage of the DEM file. Set to 4.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetElevationUnitOfMeasure">
            <summary>
                <para>Defining unit of measure for elevation coordinates throughout the file. 1 = feet, 2 = meters</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetPlaneUnitOfMeasure">
            <summary>
                <para>Defining unit of measure for ground planimetric coordinates throughout the file. 0 = radians, 1 = feet, 2 = meters, 3 = arc-seconds.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetProjectionParameters">
            <summary>
                <para>Map Projection parameters. All are zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetGroundZone">
            <summary>
                <para>Zone in ground planimetric reference system</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetGroundSystem">
            <summary>
                <para>Ground planimetric reference system</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetElevationPattern">
            <summary>
                <para>Code 1=regular, 2=random, reserved for future use</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetDEMLevel">
            <summary>
                <para>Code 1=DEM-1, 2=DEM_2, ...</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetMapLabel">
            <summary>
                <para>An ASCII description of the map</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetElevationReferenceAsString">
            <summary>
                <para>Specify the elevation origin to use. By default, the elevation origin is equal to ElevationBounds[0]. A more convenient origin is to use sea level (i.e., a value of 0.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.SetElevationReferenceToElevationBounds">
            <summary>
                <para>Specify the elevation origin to use. By default, the elevation origin is equal to ElevationBounds[0]. A more convenient origin is to use sea level (i.e., a value of 0.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.SetElevationReferenceToSeaLevel">
            <summary>
                <para>Specify the elevation origin to use. By default, the elevation origin is equal to ElevationBounds[0]. A more convenient origin is to use sea level (i.e., a value of 0.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetElevationReference">
            <summary>
                <para>Specify the elevation origin to use. By default, the elevation origin is equal to ElevationBounds[0]. A more convenient origin is to use sea level (i.e., a value of 0.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetElevationReferenceMaxValue">
            <summary>
                <para>Specify the elevation origin to use. By default, the elevation origin is equal to ElevationBounds[0]. A more convenient origin is to use sea level (i.e., a value of 0.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetElevationReferenceMinValue">
            <summary>
                <para>Specify the elevation origin to use. By default, the elevation origin is equal to ElevationBounds[0]. A more convenient origin is to use sea level (i.e., a value of 0.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.SetElevationReference(System.Int32)">
            <summary>
                <para>Specify the elevation origin to use. By default, the elevation origin is equal to ElevationBounds[0]. A more convenient origin is to use sea level (i.e., a value of 0.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.GetFileName">
            <summary>
                <para>Specify file name of Digital Elevation Model (DEM) file</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDEMReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of Digital Elevation Model (DEM) file</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSight6Reader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkEnSight6Reader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkEnSight6Reader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkEnSight6Reader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkEnSight6Reader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkEnSight6Reader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataSetWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataSetWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataSetWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLDataSetWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLDataSetWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataSetWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkFacetWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.Write">
            <summary>
                <para>Write data</para>
            </summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.GetFileName">
            <summary>
                <para>Specify file name of Facet datafile to read</para>
            </summary>
        </member>
        <member name="M:vtk.vtkFacetWriter.SetFileName(System.String)">
            <summary>
                <para>Specify file name of Facet datafile to read</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMCubesReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetMTime">
            <summary>
                <para>Return the mtime also considering the locator.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.CreateDefaultLocator">
            <summary>
                <para>Create default locator. Used to create one when none is specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetLocator">
            <summary>
                <para>Set / get a spatial locator for merging points. By default,  an instance of vtkMergePoints is used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetLocator(vtk.vtkPointLocator)">
            <summary>
                <para>Set / get a spatial locator for merging points. By default,  an instance of vtkMergePoints is used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SwapBytesOff">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SwapBytesOn">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetSwapBytes">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetSwapBytes(System.Int32)">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetDataByteOrderAsString">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetDataByteOrder(System.Int32)">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetDataByteOrder">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetDataByteOrderToLittleEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetDataByteOrderToBigEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.NormalsOff">
            <summary>
                <para>Specify whether to read normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.NormalsOn">
            <summary>
                <para>Specify whether to read normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetNormals">
            <summary>
                <para>Specify whether to read normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetNormals(System.Int32)">
            <summary>
                <para>Specify whether to read normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.FlipNormalsOff">
            <summary>
                <para>Specify whether to flip normals in opposite direction. Flipping ONLY changes the direction of the normal vector. Contrast this with flipping in vtkPolyDataNormals which flips both the normal and the cell point order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.FlipNormalsOn">
            <summary>
                <para>Specify whether to flip normals in opposite direction. Flipping ONLY changes the direction of the normal vector. Contrast this with flipping in vtkPolyDataNormals which flips both the normal and the cell point order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetFlipNormals">
            <summary>
                <para>Specify whether to flip normals in opposite direction. Flipping ONLY changes the direction of the normal vector. Contrast this with flipping in vtkPolyDataNormals which flips both the normal and the cell point order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetFlipNormals(System.Int32)">
            <summary>
                <para>Specify whether to flip normals in opposite direction. Flipping ONLY changes the direction of the normal vector. Contrast this with flipping in vtkPolyDataNormals which flips both the normal and the cell point order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetHeaderSize">
            <summary>
                <para>Specify a header size if one exists. The header is skipped and not used at this time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetHeaderSizeMaxValue">
            <summary>
                <para>Specify a header size if one exists. The header is skipped and not used at this time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetHeaderSizeMinValue">
            <summary>
                <para>Specify a header size if one exists. The header is skipped and not used at this time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetHeaderSize(System.Int32)">
            <summary>
                <para>Specify a header size if one exists. The header is skipped and not used at this time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetLimitsFileName">
            <summary>
                <para>Set / get the file name of the marching cubes limits file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetLimitsFileName(System.String)">
            <summary>
                <para>Set / get the file name of the marching cubes limits file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.GetFileName">
            <summary>
                <para>Specify file name of marching cubes file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of marching cubes file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.ReadMetaData(vtk.vtkInformation)">
            <summary>
                <para>Read the meta information from the file.  This needs to be public to it can be accessed by vtkDataSetReader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.GetOutput">
            <summary>
                <para>Set/Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.GetOutput(System.Int32)">
            <summary>
                <para>Set/Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkStructuredPointsReader.SetOutput(vtk.vtkStructuredPoints)">
            <summary>
                <para>Set/Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkJPEGWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.GetResult">
            <summary>
                <para>When writing to memory this is the result, it will be NULL until the  data is written the first time</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.SetResult(vtk.vtkUnsignedCharArray)">
            <summary>
                <para>When writing to memory this is the result, it will be NULL until the  data is written the first time</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.WriteToMemoryOff">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.WriteToMemoryOn">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.GetWriteToMemory">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.SetWriteToMemory(System.UInt32)">
            <summary>
                <para>Write the image to memory (a vtkUnsignedCharArray)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.ProgressiveOff">
            <summary>
                <para>Progressive JPEG generation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.ProgressiveOn">
            <summary>
                <para>Progressive JPEG generation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.GetProgressive">
            <summary>
                <para>Progressive JPEG generation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.SetProgressive(System.UInt32)">
            <summary>
                <para>Progressive JPEG generation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.GetQuality">
            <summary>
                <para>Compression quality. 0 = Low quality, 100 = High quality</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.GetQualityMaxValue">
            <summary>
                <para>Compression quality. 0 = Low quality, 100 = High quality</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.GetQualityMinValue">
            <summary>
                <para>Compression quality. 0 = Low quality, 100 = High quality</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.SetQuality(System.Int32)">
            <summary>
                <para>Compression quality. 0 = Low quality, 100 = High quality</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGWriter.Write">
            <summary>
                <para>The main interface which triggers the writer to start.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSTLWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkSTLWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSTLWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkSTLWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkSTLWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkSTLWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBase64Utilities.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.Decode(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Decode bytes from the input buffer and store the decoded stream  into the output buffer until 'length' bytes have been decoded.  Return the real length of the decoded stream (which should be equal to  'length'). Note that the output buffer must be allocated by the caller. If 'max_input_length' is not null, then it specifies the number of encoded bytes that should be at most read from the input buffer. In that case the 'length' parameter is ignored. This enables the caller  to decode a stream without actually knowing how much decoded data to  expect (of course, the buffer must be large enough).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.DecodeTriplet(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                <para>Decode 4 bytes into 3 bytes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.Encode(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte[],System.Int32)">
            <summary>
                <para>Encode 'length' bytes from the input buffer and store the encoded stream into the output buffer. Return the length of the encoded stream. Note that the output buffer must be allocated by the caller (length * 1.5 should be a safe estimate). If 'mark_end' is true than an extra set of 4 bytes is added to the end of the stream if the input is a multiple of 3 bytes. These bytes are invalid chars and therefore they will stop the decoder thus enabling the caller to decode a stream without actually knowing  how much data to expect (if the input is not a multiple of 3 bytes then the extra padding needed to complete the encode 4 bytes will stop the  decoding anyway).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.EncodeSingle(System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                <para>Encode 1 byte into 4 bytes</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.EncodePair(System.Byte,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                <para>Encode 2 bytes into 4 bytes</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64Utilities.EncodeTriplet(System.Byte,System.Byte,System.Byte,System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                <para>Encode 3 bytes into 4 bytes</para>
            </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.GetInput(System.Int32)">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkRectilinearGridWriter.GetInput">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.GetGhostLevel">
            <summary>
                <para>Get/Set the ghost level used to pad each piece.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.SetGhostLevel(System.Int32)">
            <summary>
                <para>Get/Set the ghost level used to pad each piece.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.GetWritePiece">
            <summary>
                <para>Get/Set the piece to write to the file.  If this is negative or equal to the NumberOfPieces, all pieces will be written.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.SetWritePiece(System.Int32)">
            <summary>
                <para>Get/Set the piece to write to the file.  If this is negative or equal to the NumberOfPieces, all pieces will be written.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.GetNumberOfPieces">
            <summary>
                <para>Get/Set the number of pieces used to stream the image through the pipeline while writing to the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataWriter.SetNumberOfPieces(System.Int32)">
            <summary>
                <para>Get/Set the number of pieces used to stream the image through the pipeline while writing to the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.GetNumberOfPolys">
            <summary>
                <para>Get the number of verts/lines/strips/polys in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.GetNumberOfStrips">
            <summary>
                <para>Get the number of verts/lines/strips/polys in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.GetNumberOfLines">
            <summary>
                <para>Get the number of verts/lines/strips/polys in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.GetNumberOfVerts">
            <summary>
                <para>Get the number of verts/lines/strips/polys in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPolyDataReader.SetOutput(vtk.vtkPolyData)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXYZMolReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.GetMaxTimeStep">
            <summary>
                <para>Get the maximum time step.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.GetTimeStep">
            <summary>
                <para>Set the current time step. It should be greater than 0 and smaller than MaxTimeStep.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.SetTimeStep(System.Int32)">
            <summary>
                <para>Set the current time step. It should be greater than 0 and smaller than MaxTimeStep.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXYZMolReader.CanReadFile(System.String)">
            <summary>
                <para>Test whether the file with the given name can be read by this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkCGMWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.GetSpecifiedColor">
            <summary>
                <para>Set/Get the specified color to color the polydata cells. This color is only used when the color mode is set to  ColorModeToSpecifiedColor, or ColorModeToDefault is set and no cell colors are specified. The specified color is specified as RGB  values ranging from (0,1). (Note: CGM will map this color to the closest color it supports.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetSpecifiedColor(System.Single[])">
            <summary>
                <para>Set/Get the specified color to color the polydata cells. This color is only used when the color mode is set to  ColorModeToSpecifiedColor, or ColorModeToDefault is set and no cell colors are specified. The specified color is specified as RGB  values ranging from (0,1). (Note: CGM will map this color to the closest color it supports.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetSpecifiedColor(System.Single,System.Single,System.Single)">
            <summary>
                <para>Set/Get the specified color to color the polydata cells. This color is only used when the color mode is set to  ColorModeToSpecifiedColor, or ColorModeToDefault is set and no cell colors are specified. The specified color is specified as RGB  values ranging from (0,1). (Note: CGM will map this color to the closest color it supports.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetColorModeToRandomColors">
            <summary>
                <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetColorModeToSpecifiedColor">
            <summary>
                <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetColorModeToDefault">
            <summary>
                <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.GetColorMode">
            <summary>
                <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetColorMode(System.Int32)">
            <summary>
                <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.GetResolution">
            <summary>
                <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.GetResolutionMaxValue">
            <summary>
                <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.GetResolutionMinValue">
            <summary>
                <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetResolution(System.Int32)">
            <summary>
                <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.GetSort">
            <summary>
                <para>Turn on/off the sorting of the cells via depth. If enabled, polygonal cells will be sorted from back to front, i.e., a Painter's algorithm sort.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetSort(System.Int32)">
            <summary>
                <para>Turn on/off the sorting of the cells via depth. If enabled, polygonal cells will be sorted from back to front, i.e., a Painter's algorithm sort.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.GetViewport">
            <summary>
                <para>Specify a vtkViewport object to be used to transform the vtkPolyData points into 2D coordinates. By default (no vtkViewport specified), the  point coordinates are generated by ignoring the z values. If a viewport is defined, then the points are transformed into viewport coordinates.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkCGMWriter.SetViewport(vtk.vtkViewport)">
            <summary>
                <para>Specify a vtkViewport object to be used to transform the vtkPolyData points into 2D coordinates. By default (no vtkViewport specified), the  point coordinates are generated by ignoring the z values. If a viewport is defined, then the points are transformed into viewport coordinates.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredGridReader.SetOutput(vtk.vtkUnstructuredGrid)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkJPEGReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.GetDescriptiveName">
            <summary>
                <para>Return a descriptive name for the file format that might be useful in a GUI.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.GetFileExtensions">
            <summary>
                <para>Return a descriptive name for the file format that might be useful in a GUI.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkJPEGReader.CanReadFile(System.String)">
            <summary>
                <para>Is the given file a JPEG file?</para>
            </summary>
        </member>
        <member name="M:vtk.vtkInputStream.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkInputStream.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkInputStream.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkInputStream.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkInputStream.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkInputStream.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkInputStream.EndReading">
            <summary>
                <para>Called after all desired calls to Seek and Read have been made. After this call, the caller is free to change the position of the stream.  Additional reads should not be done until after another call to StartReading.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkInputStream.Read(System.String,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Read input data of the given length.  Returns amount actually read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkInputStream.Read(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Read input data of the given length.  Returns amount actually read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkInputStream.Seek(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Seek to the given offset in the input data.  Returns 1 for success, 0 for failure.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkInputStream.StartReading">
            <summary>
                <para>Called after the stream position has been set by the caller, but before any Seek or Read calls.  The stream position should not be adjusted by the caller until after an EndReading call.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLRectilinearGridWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkTIFFWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.SetCompressionToDeflate">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.SetCompressionToJPEG">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.SetCompressionToPackBits">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.SetCompressionToNoCompression">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.GetCompression">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.GetCompressionMaxValue">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.GetCompressionMinValue">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTIFFWriter.SetCompression(System.Int32)">
            <summary>
                <para>Set compression type. Sinze LZW compression is patented outside US, the additional work steps have to be taken in order to use that compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.GetCompressionLevel">
            <summary>
                <para>Get/Set the compression level.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.GetCompressionLevelMaxValue">
            <summary>
                <para>Get/Set the compression level.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.GetCompressionLevelMinValue">
            <summary>
                <para>Get/Set the compression level.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.SetCompressionLevel(System.Int32)">
            <summary>
                <para>Get/Set the compression level.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkZLibDataCompressor.GetMaximumCompressionSpace(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Get the maximum space that may be needed to store data of the given uncompressed size after compression.  This is the minimum size of the output buffer that can be passed to the four-argument Compress method.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDataCompressor.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.Uncompress(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Uncompress the given data.  A vtkUnsignedCharArray containing the compressed data is returned with a reference count of 1.  The size of the uncompressed data must be known by the caller.  It should be transmitted from the compressor by a means outside of this class.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.Compress(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Compress the given data.  A vtkUnsignedCharArray containing the compressed data is returned with a reference count of 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.Uncompress(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Uncompress the given input data into the given output buffer. The size of the uncompressed data must be known by the caller. It should be transmitted from the compressor by a means outside of this class.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.Compress(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Compress the given input data buffer into the given output buffer.  The size of the output buffer must be at least as large as the value given by GetMaximumCompressionSpace for the given input size.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataCompressor.GetMaximumCompressionSpace(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Get the maximum space that may be needed to store data of the given uncompressed size after compression.  This is the minimum size of the output buffer that can be passed to the four-argument Compress method.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridReader.SetOutput(vtk.vtkRectilinearGrid)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPImageDataReader.SetOutput(vtk.vtkImageData)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkGAMBITReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.GetNumberOfCellFields">
            <summary>
                <para>Get the number of data components at the nodes and cells.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.GetNumberOfNodeFields">
            <summary>
                <para>Get the number of data components at the nodes and cells.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.GetNumberOfNodes">
            <summary>
                <para>Get the total number of nodes. The number of nodes is only valid after a successful read of the data file is performed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.GetNumberOfCells">
            <summary>
                <para>Get the total number of cells. The number of cells is only valid after a successful read of the data file is performed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.GetFileName">
            <summary>
                <para>Specify the file name of the GAMBIT data file to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGAMBITReader.SetFileName(System.String)">
            <summary>
                <para>Specify the file name of the GAMBIT data file to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDataSetWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDataSetWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataSetWriter.GetInput(System.Int32)">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataSetWriter.GetInput">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkOutputStream.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkOutputStream.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPNMReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPNMReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPNMReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPNMReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPNMReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPNMReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPNMReader.GetFileExtensions">
            <summary>
                <para>PNM </para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkParticleReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkParticleReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkParticleReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkParticleReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetDataTypeToFloat">
            <summary>
                <para>Get/Set the data type.  The options are: - VTK_FLOAT (default) single precision floating point. - VTK_DOUBLE double precision floating point.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetDataType">
            <summary>
                <para>Get/Set the data type.  The options are: - VTK_FLOAT (default) single precision floating point. - VTK_DOUBLE double precision floating point.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetDataTypeMaxValue">
            <summary>
                <para>Get/Set the data type.  The options are: - VTK_FLOAT (default) single precision floating point. - VTK_DOUBLE double precision floating point.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetDataTypeMinValue">
            <summary>
                <para>Get/Set the data type.  The options are: - VTK_FLOAT (default) single precision floating point. - VTK_DOUBLE double precision floating point.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetDataType(System.Int32)">
            <summary>
                <para>Get/Set the data type.  The options are: - VTK_FLOAT (default) single precision floating point. - VTK_DOUBLE double precision floating point.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetFileTypeToBinary">
            <summary>
                <para>Get/Set the data type.  The options are: - VTK_FLOAT (default) single precision floating point. - VTK_DOUBLE double precision floating point.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetFileTypeToText">
            <summary>
                <para>Get/Set the file type.  The options are: - FILE_TYPE_IS_UNKNOWN (default) the class      will attempt to determine the file type.     If this fails then you should set the file type     yourself. - FILE_TYPE_IS_TEXT the file type is text. - FILE_TYPE_IS_BINARY the file type is binary.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetFileTypeToUnknown">
            <summary>
                <para>Get/Set the file type.  The options are: - FILE_TYPE_IS_UNKNOWN (default) the class      will attempt to determine the file type.     If this fails then you should set the file type     yourself. - FILE_TYPE_IS_TEXT the file type is text. - FILE_TYPE_IS_BINARY the file type is binary.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetFileType">
            <summary>
                <para>Get/Set the file type.  The options are: - FILE_TYPE_IS_UNKNOWN (default) the class      will attempt to determine the file type.     If this fails then you should set the file type     yourself. - FILE_TYPE_IS_TEXT the file type is text. - FILE_TYPE_IS_BINARY the file type is binary.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetFileTypeMaxValue">
            <summary>
                <para>Get/Set the file type.  The options are: - FILE_TYPE_IS_UNKNOWN (default) the class      will attempt to determine the file type.     If this fails then you should set the file type     yourself. - FILE_TYPE_IS_TEXT the file type is text. - FILE_TYPE_IS_BINARY the file type is binary.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetFileTypeMinValue">
            <summary>
                <para>Get/Set the file type.  The options are: - FILE_TYPE_IS_UNKNOWN (default) the class      will attempt to determine the file type.     If this fails then you should set the file type     yourself. - FILE_TYPE_IS_TEXT the file type is text. - FILE_TYPE_IS_BINARY the file type is binary.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetFileType(System.Int32)">
            <summary>
                <para>Get/Set the file type.  The options are: - FILE_TYPE_IS_UNKNOWN (default) the class      will attempt to determine the file type.     If this fails then you should set the file type     yourself. - FILE_TYPE_IS_TEXT the file type is text. - FILE_TYPE_IS_BINARY the file type is binary.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.HasScalarOff">
            <summary>
                <para>Default: 1. If 1 then each particle has a value associated with it.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.HasScalarOn">
            <summary>
                <para>Default: 1. If 1 then each particle has a value associated with it.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetHasScalar">
            <summary>
                <para>Default: 1. If 1 then each particle has a value associated with it.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetHasScalar(System.Int32)">
            <summary>
                <para>Default: 1. If 1 then each particle has a value associated with it.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SwapBytesOff">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file. Not used when reading text files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SwapBytesOn">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file. Not used when reading text files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetSwapBytes">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file. Not used when reading text files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetSwapBytes(System.Int32)">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file. Not used when reading text files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetDataByteOrderAsString">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. Not used when reading text files. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetDataByteOrder(System.Int32)">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. Not used when reading text files. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetDataByteOrder">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. Not used when reading text files. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetDataByteOrderToLittleEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. Not used when reading text files. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetDataByteOrderToBigEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. Not used when reading text files. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.GetFileName">
            <summary>
                <para>Specify file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkParticleReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.EndWriting">
            <summary>
                <para>Called after all desired calls to Write have been made.  After this call, the caller is free to change the position of the stream.  Additional writes should not be done until after another call to StartWriting.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.Write(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Write output data of the given length.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBase64OutputStream.StartWriting">
            <summary>
                <para>Called after the stream position has been set by the caller, but before any Write calls.  The stream position should not be adjusted by the caller until after an EndWriting call.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkOutputStream.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkOutputStream.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkOutputStream.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkOutputStream.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkOutputStream.EndWriting">
            <summary>
                <para>Called after all desired calls to Write have been made.  After this call, the caller is free to change the position of the stream.  Additional writes should not be done until after another call to StartWriting.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkOutputStream.Write(System.String,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Write output data of the given length.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkOutputStream.Write(System.Byte[],System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Write output data of the given length.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkOutputStream.StartWriting">
            <summary>
                <para>Called after the stream position has been set by the caller, but before any Write calls.  The stream position should not be adjusted by the caller until after an EndWriting call.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPRectilinearGridWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkAVSucdReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.SetCellArrayStatus(System.String,System.Int32)">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.SetPointArrayStatus(System.String,System.Int32)">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetCellArrayStatus(System.String)">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetPointArrayStatus(System.String)">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetCellArrayName(System.Int32)">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetPointArrayName(System.Int32)">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfCellArrays">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfPointArrays">
            <summary>
                <para>The following methods allow selective reading of solutions fields.  by default, ALL data fields are the nodes and cells are read, but this can be modified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetByteOrderAsString">
            <summary>
                <para>Set/Get the endian-ness of the binary file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.SetByteOrderToLittleEndian">
            <summary>
                <para>Set/Get the endian-ness of the binary file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.SetByteOrderToBigEndian">
            <summary>
                <para>Set/Get the endian-ness of the binary file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfCellComponents">
            <summary>
                <para>Get the number of data components at the nodes and cells.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfNodeComponents">
            <summary>
                <para>Get the number of data components at the nodes and cells.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfFields">
            <summary>
                <para>Get the number of data fields for the model. Unused because VTK has no methods for it.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfCellFields">
            <summary>
                <para>Get the number of data fields at the cell centers.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfNodeFields">
            <summary>
                <para>Get the number of data fields at the nodes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfNodes">
            <summary>
                <para>Get the total number of nodes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetNumberOfCells">
            <summary>
                <para>Get the total number of cells.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.BinaryFileOff">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.BinaryFileOn">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetBinaryFile">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.SetBinaryFile(System.Int32)">
            <summary>
                <para>Is the file to be read written in binary format (as opposed to ascii).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.GetFileName">
            <summary>
                <para>Specify file name of AVS UCD datafile to read</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVSucdReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of AVS UCD datafile to read</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMCubesWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMCubesWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMCubesWriter.GetLimitsFileName">
            <summary>
                <para>Set/get file name of marching cubes limits file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMCubesWriter.SetLimitsFileName(System.String)">
            <summary>
                <para>Set/get file name of marching cubes limits file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetNthWindowLevelPresetComment(System.Int32)">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetNthWindowLevelPresetComment(System.Int32,System.String)">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetNthWindowLevelPreset(System.Int32)">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetNthWindowLevelPreset(System.Int32,System.Double[],System.Double[])">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.HasWindowLevelPreset(System.Double,System.Double)">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetNumberOfWindowLevelPresets">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.RemoveAllWindowLevelPresets">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.RemoveWindowLevelPreset(System.Double,System.Double)">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.AddWindowLevelPreset(System.Double,System.Double)">
            <summary>
                <para>Add/Remove/Query the window/level presets that may have been associated to a medical image. Window is also known as 'width', level is also known as 'center'. The same window/level pair can not be added twice. As a convenience, a comment can be associated to a preset. For ex: DICOM Window Center (0028,1050) = 00045\000470         DICOM Window Width  (0028,1051) = 0106\03412</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.DeepCopy(vtk.vtkMedicalImageProperties)">
            <summary>
                <para>Copy the contents of p to this instance.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetExposure">
            <summary>
                <para>Exposure (The exposure expressed in mAs, for example calculated from Exposure Time and X-ray Tube Current) For ex: DICOM (0018,1152) = 114</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetExposure(System.String)">
            <summary>
                <para>Exposure (The exposure expressed in mAs, for example calculated from Exposure Time and X-ray Tube Current) For ex: DICOM (0018,1152) = 114</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetXRayTubeCurrent">
            <summary>
                <para>X-ray tube current (in mA) For ex: DICOM (0018,1151) = 400</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetXRayTubeCurrent(System.String)">
            <summary>
                <para>X-ray tube current (in mA) For ex: DICOM (0018,1151) = 400</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetExposureTime">
            <summary>
                <para>Exposure time (time of x-ray exposure in msec) For ex: DICOM (0018,1150) = 5</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetExposureTime(System.String)">
            <summary>
                <para>Exposure time (time of x-ray exposure in msec) For ex: DICOM (0018,1150) = 5</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetRepetitionTime">
            <summary>
                <para>Repetition Time The period of time in msec between the beginning of a pulse sequence and the beginning of the succeeding (essentially identical) pulse sequence. For ex: DICOM (0018,0080) = 2040</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetRepetitionTime(System.String)">
            <summary>
                <para>Repetition Time The period of time in msec between the beginning of a pulse sequence and the beginning of the succeeding (essentially identical) pulse sequence. For ex: DICOM (0018,0080) = 2040</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetEchoTrainLength">
            <summary>
                <para>Echo Train Length (Number of lines in k-space acquired per excitation per image) For ex: DICOM (0018,0091) = 35</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetEchoTrainLength(System.String)">
            <summary>
                <para>Echo Train Length (Number of lines in k-space acquired per excitation per image) For ex: DICOM (0018,0091) = 35</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetEchoTime">
            <summary>
                <para>Echo Time (Time in ms between the middle of the excitation pulse and the peak of the echo produced) For ex: DICOM (0018,0081) = 105</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetEchoTime(System.String)">
            <summary>
                <para>Echo Time (Time in ms between the middle of the excitation pulse and the peak of the echo produced) For ex: DICOM (0018,0081) = 105</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetGantryTiltAsDouble">
            <summary>
                <para>Gantry/Detector tilt (Nominal angle of tilt in degrees of the scanning gantry.) For ex: DICOM (0018,1120) = 15</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetGantryTilt">
            <summary>
                <para>Gantry/Detector tilt (Nominal angle of tilt in degrees of the scanning gantry.) For ex: DICOM (0018,1120) = 15</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetGantryTilt(System.String)">
            <summary>
                <para>Gantry/Detector tilt (Nominal angle of tilt in degrees of the scanning gantry.) For ex: DICOM (0018,1120) = 15</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetKVP">
            <summary>
                <para>Peak kilo voltage output of the (x-ray) generator used For ex: DICOM (0018,0060) = 120</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetKVP(System.String)">
            <summary>
                <para>Peak kilo voltage output of the (x-ray) generator used For ex: DICOM (0018,0060) = 120</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetSliceThicknessAsDouble">
            <summary>
                <para>Slice Thickness (Nominal reconstructed slice thickness, in mm) For ex: DICOM (0018,0050) = 0.273438</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetSliceThickness">
            <summary>
                <para>Slice Thickness (Nominal reconstructed slice thickness, in mm) For ex: DICOM (0018,0050) = 0.273438</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetSliceThickness(System.String)">
            <summary>
                <para>Slice Thickness (Nominal reconstructed slice thickness, in mm) For ex: DICOM (0018,0050) = 0.273438</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetConvolutionKernel">
            <summary>
                <para>Convolution Kernel (or algorithm used to reconstruct the data) For ex: DICOM (0018,1210) = Bone</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetConvolutionKernel(System.String)">
            <summary>
                <para>Convolution Kernel (or algorithm used to reconstruct the data) For ex: DICOM (0018,1210) = Bone</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetInstitutionName">
            <summary>
                <para>Institution Name For ex: DICOM (0008,0080) = FooCity Medical Center</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetInstitutionName(System.String)">
            <summary>
                <para>Institution Name For ex: DICOM (0008,0080) = FooCity Medical Center</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetStationName">
            <summary>
                <para>Station Name For ex: DICOM (0008,1010) = LSPD_OC8</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetStationName(System.String)">
            <summary>
                <para>Station Name For ex: DICOM (0008,1010) = LSPD_OC8</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetManufacturerModelName">
            <summary>
                <para>Manufacturer's Model Name For ex: DICOM (0008,1090) = LightSpeed QX/i</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetManufacturerModelName(System.String)">
            <summary>
                <para>Manufacturer's Model Name For ex: DICOM (0008,1090) = LightSpeed QX/i</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetManufacturer">
            <summary>
                <para>Manufacturer For ex: DICOM (0008,0070) = Siemens</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetManufacturer(System.String)">
            <summary>
                <para>Manufacturer For ex: DICOM (0008,0070) = Siemens</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetModality">
            <summary>
                <para>Modality For ex: DICOM (0008,0060)= CT</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetModality(System.String)">
            <summary>
                <para>Modality For ex: DICOM (0008,0060)= CT</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetStudyDescription">
            <summary>
                <para>Study description For ex: DICOM (0008,1030) = BRAIN/C-SP/FACIAL</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetStudyDescription(System.String)">
            <summary>
                <para>Study description For ex: DICOM (0008,1030) = BRAIN/C-SP/FACIAL</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetStudyID">
            <summary>
                <para>Study ID For ex: DICOM (0020,0010) = 37481</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetStudyID(System.String)">
            <summary>
                <para>Study ID For ex: DICOM (0020,0010) = 37481</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetSeriesDescription">
            <summary>
                <para>Series Description User provided description of the Series For ex: DICOM (0008,103e) = SCOUT</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetSeriesDescription(System.String)">
            <summary>
                <para>Series Description User provided description of the Series For ex: DICOM (0008,103e) = SCOUT</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetSeriesNumber">
            <summary>
                <para>Series number For ex: DICOM (0020,0011) = 902</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetSeriesNumber(System.String)">
            <summary>
                <para>Series number For ex: DICOM (0020,0011) = 902</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetImageNumber">
            <summary>
                <para>Image number For ex: DICOM (0020,0013) = 1</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetImageNumber(System.String)">
            <summary>
                <para>Image number For ex: DICOM (0020,0013) = 1</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetImageTime">
            <summary>
                <para>Image Time Format: hhmmss.frac (any trailing component(s) can be ommited) For ex: DICOM (0008,0033) = 162552.0705 or 230012, or 0012</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetImageTime(System.String)">
            <summary>
                <para>Image Time Format: hhmmss.frac (any trailing component(s) can be ommited) For ex: DICOM (0008,0033) = 162552.0705 or 230012, or 0012</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetDateAsLocale(System.String,System.String)">
            <summary>
                <para>Take as input a string in ISO 8601 date (YYYY/MM/DD) and construct a locale date based on the different fields (see GetDateAsFields to extract different fields) Return 0 on error, 1 on success</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetDateAsFields(System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                <para>Take as input a string in ISO 8601 date (YYYY/MM/DD) and extract the different fields namely: year month day Return 0 on error, 1 on success</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetImageDate">
            <summary>
                <para>Image Date Format: yyyymmdd For ex: DICOM (0008,0023) = 20030617</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetImageDate(System.String)">
            <summary>
                <para>Image Date Format: yyyymmdd For ex: DICOM (0008,0023) = 20030617</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetAcquisitionTime">
            <summary>
                <para>Acquisition time Format: hhmmss.frac (any trailing component(s) can be ommited) For ex: DICOM (0008,0032) = 162552.0705 or 230012, or 0012</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetAcquisitionTime(System.String)">
            <summary>
                <para>Acquisition time Format: hhmmss.frac (any trailing component(s) can be ommited) For ex: DICOM (0008,0032) = 162552.0705 or 230012, or 0012</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetAcquisitionDate">
            <summary>
                <para>Acquisition Date Format: yyyymmdd For ex: DICOM (0008,0022) = 20030617</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetAcquisitionDate(System.String)">
            <summary>
                <para>Acquisition Date Format: yyyymmdd For ex: DICOM (0008,0022) = 20030617</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetPatientBirthDate">
            <summary>
                <para>Patient birth date Format: yyyymmdd For ex: DICOM (0010,0030) = 19680427</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetPatientBirthDate(System.String)">
            <summary>
                <para>Patient birth date Format: yyyymmdd For ex: DICOM (0010,0030) = 19680427</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetPatientSex">
            <summary>
                <para>Patient sex For ex: DICOM (0010,0040) = M</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetPatientSex(System.String)">
            <summary>
                <para>Patient sex For ex: DICOM (0010,0040) = M</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetAgeAsFields(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                <para>Take as input a string in VR=AS (DICOM PS3.5) and extract either different fields namely: year month week day Return 0 on error, 1 on success One can test fields if they are different from -1 upon success</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetPatientAge">
            <summary>
                <para>Patient age Format: nnnD, nnW, nnnM or nnnY (eventually nnD, nnW, nnY)         with D (day), M (month), W (week), Y (year) For ex: DICOM (0010,1010) = 031Y</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetPatientAge(System.String)">
            <summary>
                <para>Patient age Format: nnnD, nnW, nnnM or nnnY (eventually nnD, nnW, nnY)         with D (day), M (month), W (week), Y (year) For ex: DICOM (0010,1010) = 031Y</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetPatientID">
            <summary>
                <para>Patient ID For ex: DICOM (0010,0020) = 1933197</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetPatientID(System.String)">
            <summary>
                <para>Patient ID For ex: DICOM (0010,0020) = 1933197</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.GetPatientName">
            <summary>
                <para>Patient name For ex: DICOM (0010,0010) = DOE,JOHN</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.SetPatientName(System.String)">
            <summary>
                <para>Patient name For ex: DICOM (0010,0010) = DOE,JOHN</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageProperties.Clear">
            <summary>
                <para>Convenience method to reset all fields to an emptry string/value</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetModality">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.SetModality(System.String)">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetImageNumber">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.SetImageNumber(System.String)">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetStudy">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.SetStudy(System.String)">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetSeries">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.SetSeries(System.String)">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetDate">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.SetDate(System.String)">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetPatientID">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.SetPatientID(System.String)">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetPatientName">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.SetPatientName(System.String)">
            <summary>
                <para>For backward compatibility, propagate calls to the MedicalImageProperties object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMedicalImageReader2.GetMedicalImageProperties">
            <summary>
                <para>Get the medical image properties object</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSLCReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkSLCReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSLCReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkSLCReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkSLCReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkSLCReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkSLCReader.GetFileExtensions">
            <summary>
                <para>SLC </para>
            </summary>
        </member>
        <member name="M:vtk.vtkSLCReader.CanReadFile(System.String)">
            <summary>
                <para>Is the given file an SLC file?</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSLCReader.GetError">
            <summary>
                <para>Was there an error on the last read performed?</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSLCReader.GetFileName">
            <summary>
                <para>Set/Get the name of the file to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSLCReader.SetFileName(System.String)">
            <summary>
                <para>Set/Get the name of the file to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkEnSightGoldReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightGoldReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkEnSightReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkEnSightReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkEnSightReader.GetOutputsAreValid">
            <summary>
                <para>OutputsAreValid indicates whether the outputs from this reader have changed in a consistent way.  If during re-reading (because of a change in time step or data set) the number of outputs becomes less than the current number or the type of a particular output changes (e.g., from vtkUnstructuredGrid to vtkImageData), then this flag is set to 0. Otherwise it is set to 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkEnSightReader.ReplaceNthOutput(System.Int32,vtk.vtkDataObject)">
            <summary>
                <para>This method sets/replaces one of the outputs of the reader without changing it's modification time. Make sure that you pass the right type of data object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetByteOrderAsString">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetByteOrder">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetByteOrder(System.Int32)">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetByteOrderToLittleEndian">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetByteOrderToBigEndian">
            <summary>
                <para>Set the byte order of the file (remember, more Unix workstations write big endian whereas PCs write little endian). Default is big endian (since most older PLOT3D files were written by workstations).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetCellArrayStatus(System.String,System.Int32)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetPointArrayStatus(System.String,System.Int32)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetCellArrayStatus(System.String)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetPointArrayStatus(System.String)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetCellArrayName(System.Int32)">
            <summary>
                <para>Get the name of the point or cell array with the given index in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetPointArrayName(System.Int32)">
            <summary>
                <para>Get the name of the point or cell array with the given index in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfCellArrays">
            <summary>
                <para>Get the number of point or cell arrays available in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfPointArrays">
            <summary>
                <para>Get the number of point or cell arrays available in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetCellDataArraySelection">
            <summary>
                <para>Get the data array selection tables used to configure which data arrays are loaded by the reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetPointDataArraySelection">
            <summary>
                <para>Get the data array selection tables used to configure which data arrays are loaded by the reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetReadAllVariables">
            <summary>
                <para>Set/get the flag for whether to read all the variables</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetReadAllVariables(System.Int32)">
            <summary>
                <para>Set/get the flag for whether to read all the variables</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.ReadAllVariablesOff">
            <summary>
                <para>Set/get the flag for whether to read all the variables</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.ReadAllVariablesOn">
            <summary>
                <para>Set/get the flag for whether to read all the variables</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.DetermineEnSightVersion">
            <summary>
                <para>Reads the FORMAT part of the case file to determine whether this is an EnSight6 or EnSightGold data set.  Returns 0 if the format is EnSight6, 1 if it is EnSightGold, and -1 otherwise (meaning an error occurred).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetTimeSets">
            <summary>
                <para>Get the time values per time set</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetMaximumTimeValue">
            <summary>
                <para>Get the minimum or maximum time value for this data set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetMinimumTimeValue">
            <summary>
                <para>Get the minimum or maximum time value for this data set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetTimeValue">
            <summary>
                <para>Set/Get the time value at which to get the value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetTimeValue(System.Single)">
            <summary>
                <para>Set/Get the time value at which to get the value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetComplexVariableType(System.Int32)">
            <summary>
                <para>Get the variable type of variable n.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetVariableType(System.Int32)">
            <summary>
                <para>Get the variable type of variable n.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetDescription(System.Int32,System.Int32)">
            <summary>
                <para>Get the nth description of a particular variable type.  Returns NULL if no variable of this type exists in this data set. SCALAR_PER_NODE = 0; VECTOR_PER_NODE = 1; TENSOR_SYMM_PER_NODE = 2; SCALAR_PER_ELEMENT = 3; VECTOR_PER_ELEMENT = 4; TENSOR_SYMM_PER_ELEMENT = 5; SCALAR_PER_MEASURED_NODE = 6; VECTOR_PER_MEASURED_NODE = 7; COMPLEX_SCALAR_PER_NODE = 8; COMPLEX_VECTOR_PER_NODE 9; COMPLEX_SCALAR_PER_ELEMENT  = 10; COMPLEX_VECTOR_PER_ELEMENT = 11</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetComplexDescription(System.Int32)">
            <summary>
                <para>Get the nth description for a complex variable.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetDescription(System.Int32)">
            <summary>
                <para>Get the nth description for a non-complex variable.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfComplexVectorsPerElement">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfComplexScalarsPerElement">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfComplexVectorsPerNode">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfComplexScalarsPerNode">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfVectorsPerMeasuredNode">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfScalarsPerMeasuredNode">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfTensorsSymmPerElement">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfVectorsPerElement">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfScalarsPerElement">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfTensorsSymmPerNode">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfVectorsPerNode">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfScalarsPerNode">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfVariables(System.Int32)">
            <summary>
                <para>Get the number of variables of a particular type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfComplexVariables">
            <summary>
                <para>Get the number of variables listed in the case file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetNumberOfVariables">
            <summary>
                <para>Get the number of variables listed in the case file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetFilePath">
            <summary>
                <para>Set/Get the file path.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetFilePath(System.String)">
            <summary>
                <para>Set/Get the file path.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.GetCaseFileName">
            <summary>
                <para>Set/Get the Case file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericEnSightReader.SetCaseFileName(System.String)">
            <summary>
                <para>Set/Get the Case file name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.GetFileName">
            <summary>
                <para>Set/Get the name of the file from which to read points.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSimplePointsReader.SetFileName(System.String)">
            <summary>
                <para>Set/Get the name of the file from which to read points.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.GetRAWFileName">
            <summary>
                <para>Specify the file name of the raw image data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.SetRAWFileName(System.String)">
            <summary>
                <para>Specify the file name of the raw image data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.GetFileName">
            <summary>
                <para>Specify the file name of the raw image data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkMetaImageWriter.SetFileName(System.String)">
            <summary>
                <para>Specify file name of meta file</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPolyDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.SetOutput(vtk.vtkPolyData)">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.GetOutput(System.Int32)">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPolyDataReader.GetOutput">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPPolyDataReader.SetOutput(vtk.vtkPolyData)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPNMWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPNMWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPNMWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPNMWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPNMWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPNMWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.SetOutput(vtk.vtkUnstructuredGrid)">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridReader.GetOutput">
            <summary>
                <para>Get the output of this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataReader.CloseVTKFile">
            <summary>
                <para>Close the vtk file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.Double[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.Single[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.UInt32!System.Runtime.CompilerServices.IsLong[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.Int32!System.Runtime.CompilerServices.IsLong[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.UInt32[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.Int32[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.UInt16[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.Int16[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.Byte[])">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.Read(System.String)">
            <summary>
                <para>Internal function to read in a value.  Returns zero if there was an error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadFieldData">
            <summary>
                <para>Helper functions for reading data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadArray(System.String,System.Int32,System.Int32)">
            <summary>
                <para>Helper functions for reading data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadCoordinates(vtk.vtkRectilinearGrid,System.Int32,System.Int32)">
            <summary>
                <para>Read the coordinates for a rectilinear grid. The axes parameter specifies which coordinate axes (0,1,2) is being read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadCells(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Read a piece of the cells (for streaming compliance)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadCells(System.Int32,System.Int32[])">
            <summary>
                <para>Read a bunch of "cells". Return 0 if error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadPoints(vtk.vtkPointSet,System.Int32)">
            <summary>
                <para>Read point coordinates. Return 0 if error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadPointData(vtk.vtkDataSet,System.Int32)">
            <summary>
                <para>Read the point data of a vtk data file. The number of points (from the dataset) must match the number of points defined in point attributes (unless no geometry was defined).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadCellData(vtk.vtkDataSet,System.Int32)">
            <summary>
                <para>Read the cell data of a vtk data file. The number of cells (from the  dataset) must match the number of cells defined in cell attributes (unless no geometry was defined).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadHeader">
            <summary>
                <para>Read the header of a vtk data file. Returns 0 if error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.OpenVTKFile">
            <summary>
                <para>Open a vtk data file. Returns zero if error.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllFieldsOff">
            <summary>
                <para>Enable reading all fields. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllFieldsOn">
            <summary>
                <para>Enable reading all fields. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadAllFields">
            <summary>
                <para>Enable reading all fields. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadAllFields(System.Int32)">
            <summary>
                <para>Enable reading all fields. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllTCoordsOff">
            <summary>
                <para>Enable reading all tcoords. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllTCoordsOn">
            <summary>
                <para>Enable reading all tcoords. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadAllTCoords">
            <summary>
                <para>Enable reading all tcoords. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadAllTCoords(System.Int32)">
            <summary>
                <para>Enable reading all tcoords. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllColorScalarsOff">
            <summary>
                <para>Enable reading all color scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllColorScalarsOn">
            <summary>
                <para>Enable reading all color scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadAllColorScalars">
            <summary>
                <para>Enable reading all color scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadAllColorScalars(System.Int32)">
            <summary>
                <para>Enable reading all color scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllTensorsOff">
            <summary>
                <para>Enable reading all tensors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllTensorsOn">
            <summary>
                <para>Enable reading all tensors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadAllTensors">
            <summary>
                <para>Enable reading all tensors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadAllTensors(System.Int32)">
            <summary>
                <para>Enable reading all tensors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllNormalsOff">
            <summary>
                <para>Enable reading all normals. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllNormalsOn">
            <summary>
                <para>Enable reading all normals. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadAllNormals">
            <summary>
                <para>Enable reading all normals. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadAllNormals(System.Int32)">
            <summary>
                <para>Enable reading all normals. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllVectorsOff">
            <summary>
                <para>Enable reading all vectors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllVectorsOn">
            <summary>
                <para>Enable reading all vectors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadAllVectors">
            <summary>
                <para>Enable reading all vectors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadAllVectors(System.Int32)">
            <summary>
                <para>Enable reading all vectors. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllScalarsOff">
            <summary>
                <para>Enable reading all scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadAllScalarsOn">
            <summary>
                <para>Enable reading all scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadAllScalars">
            <summary>
                <para>Enable reading all scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadAllScalars(System.Int32)">
            <summary>
                <para>Enable reading all scalars. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetFieldDataName">
            <summary>
                <para>Set the name of the field data to extract. If not specified, uses  first field data encountered in file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetFieldDataName(System.String)">
            <summary>
                <para>Set the name of the field data to extract. If not specified, uses  first field data encountered in file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetLookupTableName">
            <summary>
                <para>Set the name of the lookup table data to extract. If not specified, uses  lookup table named by scalar. Otherwise, this specification supersedes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetLookupTableName(System.String)">
            <summary>
                <para>Set the name of the lookup table data to extract. If not specified, uses  lookup table named by scalar. Otherwise, this specification supersedes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetTCoordsName">
            <summary>
                <para>Set the name of the texture coordinate data to extract. If not specified, first texture coordinate data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetTCoordsName(System.String)">
            <summary>
                <para>Set the name of the texture coordinate data to extract. If not specified, first texture coordinate data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNormalsName">
            <summary>
                <para>Set the name of the normal data to extract. If not specified, first  normal data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetNormalsName(System.String)">
            <summary>
                <para>Set the name of the normal data to extract. If not specified, first  normal data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetTensorsName">
            <summary>
                <para>Set the name of the tensor data to extract. If not specified, first  tensor data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetTensorsName(System.String)">
            <summary>
                <para>Set the name of the tensor data to extract. If not specified, first  tensor data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetVectorsName">
            <summary>
                <para>Set the name of the vector data to extract. If not specified, first  vector data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetVectorsName(System.String)">
            <summary>
                <para>Set the name of the vector data to extract. If not specified, first  vector data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetScalarsName">
            <summary>
                <para>Set the name of the scalar data to extract. If not specified, first  scalar data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetScalarsName(System.String)">
            <summary>
                <para>Set the name of the scalar data to extract. If not specified, first  scalar data encountered is extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetFieldDataNameInFile(System.Int32)">
            <summary>
                <para>What is the name of the ith attribute of a certain type in this file? This requires reading the file, so the filename  must be set prior to invoking this operation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetTCoordsNameInFile(System.Int32)">
            <summary>
                <para>What is the name of the ith attribute of a certain type in this file? This requires reading the file, so the filename  must be set prior to invoking this operation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNormalsNameInFile(System.Int32)">
            <summary>
                <para>What is the name of the ith attribute of a certain type in this file? This requires reading the file, so the filename  must be set prior to invoking this operation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetTensorsNameInFile(System.Int32)">
            <summary>
                <para>What is the name of the ith attribute of a certain type in this file? This requires reading the file, so the filename  must be set prior to invoking this operation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetVectorsNameInFile(System.Int32)">
            <summary>
                <para>What is the name of the ith attribute of a certain type in this file? This requires reading the file, so the filename  must be set prior to invoking this operation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetScalarsNameInFile(System.Int32)">
            <summary>
                <para>What is the name of the ith attribute of a certain type in this file? This requires reading the file, so the filename  must be set prior to invoking this operation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNumberOfFieldDataInFile">
            <summary>
                <para>What is the name of the ith attribute of a certain type in this file? This requires reading the file, so the filename  must be set prior to invoking this operation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNumberOfTCoordsInFile">
            <summary>
                <para>How many attributes of various types are in this file? This  requires reading the file, so the filename must be set prior  to invoking this operation. (Note: file characteristics are cached, so only a single read is necessary to return file characteristics.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNumberOfNormalsInFile">
            <summary>
                <para>How many attributes of various types are in this file? This  requires reading the file, so the filename must be set prior  to invoking this operation. (Note: file characteristics are cached, so only a single read is necessary to return file characteristics.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNumberOfTensorsInFile">
            <summary>
                <para>How many attributes of various types are in this file? This  requires reading the file, so the filename must be set prior  to invoking this operation. (Note: file characteristics are cached, so only a single read is necessary to return file characteristics.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNumberOfVectorsInFile">
            <summary>
                <para>How many attributes of various types are in this file? This  requires reading the file, so the filename must be set prior  to invoking this operation. (Note: file characteristics are cached, so only a single read is necessary to return file characteristics.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetNumberOfScalarsInFile">
            <summary>
                <para>How many attributes of various types are in this file? This  requires reading the file, so the filename must be set prior  to invoking this operation. (Note: file characteristics are cached, so only a single read is necessary to return file characteristics.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetFileType">
            <summary>
                <para>Get the type of file (ASCII or BINARY). Returned value only valid after file has been read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadFromInputStringOff">
            <summary>
                <para>Enable reading from an InputString or InputArray instead of the default,  a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.ReadFromInputStringOn">
            <summary>
                <para>Enable reading from an InputString or InputArray instead of the default,  a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetReadFromInputString">
            <summary>
                <para>Enable reading from an InputString or InputArray instead of the default,  a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetReadFromInputString(System.Int32)">
            <summary>
                <para>Enable reading from an InputString or InputArray instead of the default,  a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetHeader">
            <summary>
                <para>Get the header from the vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetInputArray">
            <summary>
                <para>Specify the vtkCharArray to be used  when reading from a string. If set, this array has precendence over InputString. Use this instead of InputString to avoid the extra memory copy. It should be noted that if the underlying char* is owned by the user ( vtkCharArray::SetArray(array, 1); ) and is deleted before the reader, bad things will happen during a pipeline update.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetInputArray(vtk.vtkCharArray)">
            <summary>
                <para>Specify the vtkCharArray to be used  when reading from a string. If set, this array has precendence over InputString. Use this instead of InputString to avoid the extra memory copy. It should be noted that if the underlying char* is owned by the user ( vtkCharArray::SetArray(array, 1); ) and is deleted before the reader, bad things will happen during a pipeline update.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetBinaryInputString(System.String,System.Int32)">
            <summary>
                <para>Specify the InputString for use when reading from a character array. Optionally include the length for binary strings. Note that a copy of the string is made and stored. If this causes exceedingly large memory consumption, consider using InputArray instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetInputStringLength">
            <summary>
                <para>Specify the InputString for use when reading from a character array. Optionally include the length for binary strings. Note that a copy of the string is made and stored. If this causes exceedingly large memory consumption, consider using InputArray instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetInputString(System.String,System.Int32)">
            <summary>
                <para>Specify the InputString for use when reading from a character array. Optionally include the length for binary strings. Note that a copy of the string is made and stored. If this causes exceedingly large memory consumption, consider using InputArray instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetInputString">
            <summary>
                <para>Specify the InputString for use when reading from a character array. Optionally include the length for binary strings. Note that a copy of the string is made and stored. If this causes exceedingly large memory consumption, consider using InputArray instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetInputString(System.String)">
            <summary>
                <para>Specify the InputString for use when reading from a character array. Optionally include the length for binary strings. Note that a copy of the string is made and stored. If this causes exceedingly large memory consumption, consider using InputArray instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.IsFileRectilinearGrid">
            <summary>
                <para>Is the file a valid vtk file of the passed dataset type ? The dataset type is passed as a lower case string.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.IsFileUnstructuredGrid">
            <summary>
                <para>Is the file a valid vtk file of the passed dataset type ? The dataset type is passed as a lower case string.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.IsFileStructuredGrid">
            <summary>
                <para>Is the file a valid vtk file of the passed dataset type ? The dataset type is passed as a lower case string.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.IsFilePolyData">
            <summary>
                <para>Is the file a valid vtk file of the passed dataset type ? The dataset type is passed as a lower case string.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.IsFileStructuredPoints">
            <summary>
                <para>Is the file a valid vtk file of the passed dataset type ? The dataset type is passed as a lower case string.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.IsFileValid(System.String)">
            <summary>
                <para>Is the file a valid vtk file of the passed dataset type ? The dataset type is passed as a lower case string.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.GetFileName">
            <summary>
                <para>Specify file name of vtk data file to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataReader.SetFileName(System.String)">
            <summary>
                <para>Specify file name of vtk data file to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLImageDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLImageDataWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.GetExtentTranslator">
            <summary>
                <para>Get/Set the extent translator used for streaming.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.SetExtentTranslator(vtk.vtkExtentTranslator)">
            <summary>
                <para>Get/Set the extent translator used for streaming.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.GetWriteExtent">
            <summary>
                <para>Get/Set the extent of the input that should be treated as the WholeExtent in the output file.  The default is the WholeExtent of the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.SetWriteExtent(System.Int32[])">
            <summary>
                <para>Get/Set the extent of the input that should be treated as the WholeExtent in the output file.  The default is the WholeExtent of the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.SetWriteExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Get/Set the extent of the input that should be treated as the WholeExtent in the output file.  The default is the WholeExtent of the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.GetNumberOfPieces">
            <summary>
                <para>Get/Set the number of pieces used to stream the image through the pipeline while writing to the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataWriter.SetNumberOfPieces(System.Int32)">
            <summary>
                <para>Get/Set the number of pieces used to stream the image through the pipeline while writing to the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkVolume16Reader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetImage(System.Int32)">
            <summary>
                <para>Other objects make use of these methods</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetTransform">
            <summary>
                <para>Set/Get transformation matrix to transform the data from slice space into world space. This matrix must be a permutation matrix. To qualify, the sums of the rows must be + or - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetTransform(vtk.vtkTransform)">
            <summary>
                <para>Set/Get transformation matrix to transform the data from slice space into world space. This matrix must be a permutation matrix. To qualify, the sums of the rows must be + or - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SwapBytesOff">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SwapBytesOn">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetSwapBytes">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetSwapBytes(System.Int32)">
            <summary>
                <para>Turn on/off byte swapping.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetDataByteOrderAsString">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetDataByteOrder(System.Int32)">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetDataByteOrder">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetDataByteOrderToLittleEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetDataByteOrderToBigEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetHeaderSize">
            <summary>
                <para>Specify the number of bytes to seek over at start of image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetHeaderSize(System.Int32)">
            <summary>
                <para>Specify the number of bytes to seek over at start of image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetDataMask">
            <summary>
                <para>Specify a mask used to eliminate data in the data file (e.g., connectivity bits).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetDataMask(System.UInt16)">
            <summary>
                <para>Specify a mask used to eliminate data in the data file (e.g., connectivity bits).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.GetDataDimensions">
            <summary>
                <para>Specify the dimensions for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetDataDimensions(System.Int32[])">
            <summary>
                <para>Specify the dimensions for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolume16Reader.SetDataDimensions(System.Int32,System.Int32)">
            <summary>
                <para>Specify the dimensions for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkVolumeReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.GetImage(System.Int32)">
            <summary>
                <para>Other objects make use of this method.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.GetDataOrigin">
            <summary>
                <para>Specify the origin for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetDataOrigin(System.Double[])">
            <summary>
                <para>Specify the origin for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetDataOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the origin for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.GetDataSpacing">
            <summary>
                <para>Specify the spacing for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetDataSpacing(System.Double[])">
            <summary>
                <para>Specify the spacing for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetDataSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the spacing for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.GetImageRange">
            <summary>
                <para>Set the range of files to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetImageRange(System.Int32[])">
            <summary>
                <para>Set the range of files to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetImageRange(System.Int32,System.Int32)">
            <summary>
                <para>Set the range of files to read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.GetFilePattern">
            <summary>
                <para>The sprintf format used to build filename from FilePrefix and number.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetFilePattern(System.String)">
            <summary>
                <para>The sprintf format used to build filename from FilePrefix and number.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.GetFilePrefix">
            <summary>
                <para>Specify file prefix for the image file(s).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVolumeReader.SetFilePrefix(System.String)">
            <summary>
                <para>Specify file prefix for the image file(s).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPLYWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetColor">
            <summary>
                <para>Set the color to use when using a uniform color (either point or cells, or both). The color is specified as a triplet of three unsigned chars between (0,255). This only takes effect when the ColorMode is set to uniform point, uniform cell, or uniform color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColor(System.Byte[])">
            <summary>
                <para>Set the color to use when using a uniform color (either point or cells, or both). The color is specified as a triplet of three unsigned chars between (0,255). This only takes effect when the ColorMode is set to uniform point, uniform cell, or uniform color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColor(System.Byte,System.Byte,System.Byte)">
            <summary>
                <para>Set the color to use when using a uniform color (either point or cells, or both). The color is specified as a triplet of three unsigned chars between (0,255). This only takes effect when the ColorMode is set to uniform point, uniform cell, or uniform color.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetLookupTable">
            <summary>
                <para>A lookup table can be specified in order to convert data arrays to RGBA colors.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetLookupTable(vtk.vtkScalarsToColors)">
            <summary>
                <para>A lookup table can be specified in order to convert data arrays to RGBA colors.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetComponent">
            <summary>
                <para>Specify the array component to use to color the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetComponentMaxValue">
            <summary>
                <para>Specify the array component to use to color the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetComponentMinValue">
            <summary>
                <para>Specify the array component to use to color the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetComponent(System.Int32)">
            <summary>
                <para>Specify the array component to use to color the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetArrayName">
            <summary>
                <para>Specify the array name to use to color the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetArrayName(System.String)">
            <summary>
                <para>Specify the array name to use to color the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColorModeToOff">
            <summary>
                <para>Specify the array name to use to color the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColorModeToUniformColor">
            <summary>
                <para>These methods enable the user to control how to add color into the PLY output file. The default behavior is as follows. The user provides the name of an array and a component number. If the type of the array is three components, unsigned char, then the data is written as three separate "red", "green" and "blue" properties. If the type is not unsigned char, and a lookup table is provided, then the array/component are mapped through the table to generate three separate "red", "green" and "blue" properties in the PLY file. The user can also set the ColorMode to specify a uniform color for the whole part (on a vertex colors, face colors, or both. (Note: vertex colors or cell colors may be written, depending on where the named array is found. If points and cells have the arrays with the same name, then both colors will be written.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColorModeToUniformPointColor">
            <summary>
                <para>These methods enable the user to control how to add color into the PLY output file. The default behavior is as follows. The user provides the name of an array and a component number. If the type of the array is three components, unsigned char, then the data is written as three separate "red", "green" and "blue" properties. If the type is not unsigned char, and a lookup table is provided, then the array/component are mapped through the table to generate three separate "red", "green" and "blue" properties in the PLY file. The user can also set the ColorMode to specify a uniform color for the whole part (on a vertex colors, face colors, or both. (Note: vertex colors or cell colors may be written, depending on where the named array is found. If points and cells have the arrays with the same name, then both colors will be written.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColorModeToUniformCellColor">
            <summary>
                <para>These methods enable the user to control how to add color into the PLY output file. The default behavior is as follows. The user provides the name of an array and a component number. If the type of the array is three components, unsigned char, then the data is written as three separate "red", "green" and "blue" properties. If the type is not unsigned char, and a lookup table is provided, then the array/component are mapped through the table to generate three separate "red", "green" and "blue" properties in the PLY file. The user can also set the ColorMode to specify a uniform color for the whole part (on a vertex colors, face colors, or both. (Note: vertex colors or cell colors may be written, depending on where the named array is found. If points and cells have the arrays with the same name, then both colors will be written.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColorModeToDefault">
            <summary>
                <para>These methods enable the user to control how to add color into the PLY output file. The default behavior is as follows. The user provides the name of an array and a component number. If the type of the array is three components, unsigned char, then the data is written as three separate "red", "green" and "blue" properties. If the type is not unsigned char, and a lookup table is provided, then the array/component are mapped through the table to generate three separate "red", "green" and "blue" properties in the PLY file. The user can also set the ColorMode to specify a uniform color for the whole part (on a vertex colors, face colors, or both. (Note: vertex colors or cell colors may be written, depending on where the named array is found. If points and cells have the arrays with the same name, then both colors will be written.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetColorMode">
            <summary>
                <para>These methods enable the user to control how to add color into the PLY output file. The default behavior is as follows. The user provides the name of an array and a component number. If the type of the array is three components, unsigned char, then the data is written as three separate "red", "green" and "blue" properties. If the type is not unsigned char, and a lookup table is provided, then the array/component are mapped through the table to generate three separate "red", "green" and "blue" properties in the PLY file. The user can also set the ColorMode to specify a uniform color for the whole part (on a vertex colors, face colors, or both. (Note: vertex colors or cell colors may be written, depending on where the named array is found. If points and cells have the arrays with the same name, then both colors will be written.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetColorMode(System.Int32)">
            <summary>
                <para>These methods enable the user to control how to add color into the PLY output file. The default behavior is as follows. The user provides the name of an array and a component number. If the type of the array is three components, unsigned char, then the data is written as three separate "red", "green" and "blue" properties. If the type is not unsigned char, and a lookup table is provided, then the array/component are mapped through the table to generate three separate "red", "green" and "blue" properties in the PLY file. The user can also set the ColorMode to specify a uniform color for the whole part (on a vertex colors, face colors, or both. (Note: vertex colors or cell colors may be written, depending on where the named array is found. If points and cells have the arrays with the same name, then both colors will be written.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetDataByteOrderToLittleEndian">
            <summary>
                <para>These methods enable the user to control how to add color into the PLY output file. The default behavior is as follows. The user provides the name of an array and a component number. If the type of the array is three components, unsigned char, then the data is written as three separate "red", "green" and "blue" properties. If the type is not unsigned char, and a lookup table is provided, then the array/component are mapped through the table to generate three separate "red", "green" and "blue" properties in the PLY file. The user can also set the ColorMode to specify a uniform color for the whole part (on a vertex colors, face colors, or both. (Note: vertex colors or cell colors may be written, depending on where the named array is found. If points and cells have the arrays with the same name, then both colors will be written.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetDataByteOrderToBigEndian">
            <summary>
                <para>If the file type is binary, then the user can specify which byte order to use (little versus big endian).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetDataByteOrder">
            <summary>
                <para>If the file type is binary, then the user can specify which byte order to use (little versus big endian).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetDataByteOrderMaxValue">
            <summary>
                <para>If the file type is binary, then the user can specify which byte order to use (little versus big endian).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.GetDataByteOrderMinValue">
            <summary>
                <para>If the file type is binary, then the user can specify which byte order to use (little versus big endian).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPLYWriter.SetDataByteOrder(System.Int32)">
            <summary>
                <para>If the file type is binary, then the user can specify which byte order to use (little versus big endian).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.GetInput(System.Int32)">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPolyDataWriter.GetInput">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBMPReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkBMPReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBMPReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBMPReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBMPReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBMPReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBMPReader.Allow8BitBMPOff">
            <summary>
                <para>If this flag is set and the BMP reader encounters an 8bit file, the data will be kept as unsigned chars and a lookuptable will be exported</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBMPReader.Allow8BitBMPOn">
            <summary>
                <para>If this flag is set and the BMP reader encounters an 8bit file, the data will be kept as unsigned chars and a lookuptable will be exported</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBMPReader.GetAllow8BitBMP">
            <summary>
                <para>If this flag is set and the BMP reader encounters an 8bit file, the data will be kept as unsigned chars and a lookuptable will be exported</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBMPReader.SetAllow8BitBMP(System.Int32)">
            <summary>
                <para>If this flag is set and the BMP reader encounters an 8bit file, the data will be kept as unsigned chars and a lookuptable will be exported</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBMPReader.GetDescriptiveName">
            <summary>
                <para>If this flag is set and the BMP reader encounters an 8bit file, the data will be kept as unsigned chars and a lookuptable will be exported</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBMPReader.GetFileExtensions">
            <summary>
                <para>Return a descriptive name for the file format that might be useful in a GUI.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBMPReader.CanReadFile(System.String)">
            <summary />
        </member>
        <member name="M:vtk.vtkBMPReader.GetDepth">
            <summary>
                <para>Returns the depth of the BMP, either 8 or 24.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader.GetScalarArrayName">
            <summary>
                <para>Set/get the scalar array name for this data set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.SetScalarArrayName(System.String)">
            <summary>
                <para>Set/get the scalar array name for this data set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.GetTransform">
            <summary>
                <para>Set/Get transformation matrix to transform the data from slice space into world space. This matrix must be a permutation matrix. To qualify, the sums of the rows must be + or - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.SetTransform(vtk.vtkTransform)">
            <summary>
                <para>Set/Get transformation matrix to transform the data from slice space into world space. This matrix must be a permutation matrix. To qualify, the sums of the rows must be + or - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.SetDataMask(System.Int32)">
            <summary>
                <para>Set/Get transformation matrix to transform the data from slice space into world space. This matrix must be a permutation matrix. To qualify, the sums of the rows must be + or - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.GetDataMask">
            <summary>
                <para>Set/Get the Data mask.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.GetDataVOI">
            <summary>
                <para>Set/get the data VOI. You can limit the reader to only read a subset of the data. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.SetDataVOI(System.Int32[])">
            <summary>
                <para>Set/get the data VOI. You can limit the reader to only read a subset of the data. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader.SetDataVOI(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/get the data VOI. You can limit the reader to only read a subset of the data. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLDataElement.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetAttributeEncoding">
            <summary>
                <para>Get/Set the internal character encoding of the attributes. Default type is VTK_ENCODING_UTF_8. Note that a vtkXMLDataParser has its own AttributesEncoding ivar. If  this ivar is set to something other than VTK_ENCODING_NONE, it will be used to set the attribute encoding of each vtkXMLDataElement  created by this vtkXMLDataParser.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetAttributeEncodingMaxValue">
            <summary>
                <para>Get/Set the internal character encoding of the attributes. Default type is VTK_ENCODING_UTF_8. Note that a vtkXMLDataParser has its own AttributesEncoding ivar. If  this ivar is set to something other than VTK_ENCODING_NONE, it will be used to set the attribute encoding of each vtkXMLDataElement  created by this vtkXMLDataParser.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetAttributeEncodingMinValue">
            <summary>
                <para>Get/Set the internal character encoding of the attributes. Default type is VTK_ENCODING_UTF_8. Note that a vtkXMLDataParser has its own AttributesEncoding ivar. If  this ivar is set to something other than VTK_ENCODING_NONE, it will be used to set the attribute encoding of each vtkXMLDataElement  created by this vtkXMLDataParser.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetAttributeEncoding(System.Int32)">
            <summary>
                <para>Get/Set the internal character encoding of the attributes. Default type is VTK_ENCODING_UTF_8. Note that a vtkXMLDataParser has its own AttributesEncoding ivar. If  this ivar is set to something other than VTK_ENCODING_NONE, it will be used to set the attribute encoding of each vtkXMLDataElement  created by this vtkXMLDataParser.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.DeepCopy(vtk.vtkXMLDataElement)">
            <summary>
                <para>Copy this element from another of the same type (elem), recursively. Old attributes and nested elements are removed, new ones are created given the contents of 'elem'. Warning: Parent is ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.IsEqualTo(vtk.vtkXMLDataElement)">
            <summary>
                <para>Check if the instance has the same name, attributes and nested elements contents than the given element (this method is applied recursively on the nested elements, and they must be stored in the same order). Warning: Id, Parent, XMLByteIndex are ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetXMLByteIndex(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Set/Get the offset from the beginning of the XML document to this element.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetXMLByteIndex">
            <summary>
                <para>Set/Get the offset from the beginning of the XML document to this element.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.LookupElement(System.String)">
            <summary>
                <para>Lookup the element with the given id, starting at this scope.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.FindNestedElementWithNameAndAttribute(System.String,System.String,System.String)">
            <summary>
                <para>Find a nested element with the given id, given name, or given name and id.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.FindNestedElementWithNameAndId(System.String,System.String)">
            <summary>
                <para>Find a nested element with the given id, given name, or given name and id.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.FindNestedElementWithName(System.String)">
            <summary>
                <para>Find a nested element with the given id, given name, or given name and id.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.FindNestedElement(System.String)">
            <summary>
                <para>Find a nested element with the given id, given name, or given name and id.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.RemoveAllNestedElements">
            <summary>
                <para>Remove all nested elements.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.RemoveNestedElement(vtk.vtkXMLDataElement)">
            <summary>
                <para>Remove nested element.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.AddNestedElement(vtk.vtkXMLDataElement)">
            <summary>
                <para>Add nested element</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetNestedElement(System.Int32)">
            <summary>
                <para>Get the element nested in this one at the given index.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetNumberOfNestedElements">
            <summary>
                <para>Get the number of elements nested in this one.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetRoot">
            <summary>
                <para>Get root of the XML tree this element is part of.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetParent(vtk.vtkXMLDataElement)">
            <summary>
                <para>Set/Get the parent of this element.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetParent">
            <summary>
                <para>Set/Get the parent of this element.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.RemoveAllAttributes">
            <summary>
                <para>Remove all attributes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetAttributeValue(System.Int32)">
            <summary>
                <para>Get the n-th attribute value. Returns 0 if there is no such attribute.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetAttributeName(System.Int32)">
            <summary>
                <para>Get the n-th attribute name. Returns 0 if there is no such attribute.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetNumberOfAttributes">
            <summary>
                <para>Get the number of attributes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetWordTypeAttribute(System.String,System.Int32@)">
            <summary>
                <para>Get the attribute with the given name and converted to a word type such as VTK_FLOAT or VTK_UNSIGNED_LONG.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetVectorAttribute(System.String,System.Int32,System.UInt32!System.Runtime.CompilerServices.IsLong[])">
            <summary>
                <para>Set the attribute with the given name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetVectorAttribute(System.String,System.Int32,System.Double[])">
            <summary>
                <para>Set the attribute with the given name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetVectorAttribute(System.String,System.Int32,System.Single[])">
            <summary>
                <para>Set the attribute with the given name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetVectorAttribute(System.String,System.Int32,System.Int32[])">
            <summary>
                <para>Set the attribute with the given name.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetVectorAttribute(System.String,System.Int32,System.UInt32!System.Runtime.CompilerServices.IsLong[])">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns length of vector read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetVectorAttribute(System.String,System.Int32,System.Double[])">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns length of vector read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetVectorAttribute(System.String,System.Int32,System.Single[])">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns length of vector read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetVectorAttribute(System.String,System.Int32,System.Int32[])">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns length of vector read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetUnsignedLongAttribute(System.String,System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Set the attribute with the given name. We can not use the same GetScalarAttribute() construct since the compiler will not be able to resolve between SetAttribute(..., int) and SetAttribute(..., unsigned long).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetDoubleAttribute(System.String,System.Double)">
            <summary>
                <para>Set the attribute with the given name. We can not use the same GetScalarAttribute() construct since the compiler will not be able to resolve between SetAttribute(..., int) and SetAttribute(..., unsigned long).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetFloatAttribute(System.String,System.Single)">
            <summary>
                <para>Set the attribute with the given name. We can not use the same GetScalarAttribute() construct since the compiler will not be able to resolve between SetAttribute(..., int) and SetAttribute(..., unsigned long).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetIntAttribute(System.String,System.Int32)">
            <summary>
                <para>Set the attribute with the given name. We can not use the same GetScalarAttribute() construct since the compiler will not be able to resolve between SetAttribute(..., int) and SetAttribute(..., unsigned long).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetScalarAttribute(System.String,System.UInt32!System.Runtime.CompilerServices.IsLong@)">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns whether value was extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetScalarAttribute(System.String,System.Double@)">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns whether value was extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetScalarAttribute(System.String,System.Single@)">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns whether value was extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetScalarAttribute(System.String,System.Int32@)">
            <summary>
                <para>Get the attribute with the given name and converted to a scalar value.  Returns whether value was extracted.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetAttribute(System.String,System.String)">
            <summary>
                <para>Set the attribute with the given name and value. If it doesn't exist, adds it.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetAttribute(System.String)">
            <summary>
                <para>Get the attribute with the given name.  If it doesn't exist, returns 0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetId(System.String)">
            <summary>
                <para>Set/Get the value of the id attribute of the element, if any.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetId">
            <summary>
                <para>Set/Get the value of the id attribute of the element, if any.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.SetName(System.String)">
            <summary>
                <para>Set/Get the name of the element.  This is its XML tag.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataElement.GetName">
            <summary>
                <para>Set/Get the name of the element.  This is its XML tag.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUtilities.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLUtilities.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLUtilities.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUtilities.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUtilities.UnFactorElements(vtk.vtkXMLDataElement)">
            <summary>
                <para>Factor and unfactor a tree. This operation looks for duplicate elements in the tree, and replace them with references to a pool of elements. Unfactoring a non-factored element is harmless.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUtilities.FactorElements(vtk.vtkXMLDataElement)">
            <summary>
                <para>Factor and unfactor a tree. This operation looks for duplicate elements in the tree, and replace them with references to a pool of elements. Unfactoring a non-factored element is harmless.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2Factory.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2Factory.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.GetNextItem">
            <summary>
                <para>Get the next implicit function in the list.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2Collection.AddItem(vtk.vtkImageReader2)">
            <summary>
                <para>Add an implicit function to the list.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2Factory.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageReader2Factory.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageReader2Factory.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2Factory.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2Factory.GetRegisteredReaders(vtk.vtkImageReader2Collection)">
            <summary>
                <para>The caller must allocate the vtkImageReader2Collection and pass in the pointer to this method.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.CopyOutputInformation(vtk.vtkInformation,System.Int32)">
            <summary>
                <para>For the specified port, copy the information this reader sets up in SetupOutputInformation to outInfo</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.WholeSlicesOff">
            <summary>
                <para>Get/Set whether the reader gets a whole slice from disk when only a rectangle inside it is needed.  This mode reads more data than necessary, but prevents many short reads from interacting poorly with the compression and encoding schemes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.WholeSlicesOn">
            <summary>
                <para>Get/Set whether the reader gets a whole slice from disk when only a rectangle inside it is needed.  This mode reads more data than necessary, but prevents many short reads from interacting poorly with the compression and encoding schemes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.GetWholeSlices">
            <summary>
                <para>Get/Set whether the reader gets a whole slice from disk when only a rectangle inside it is needed.  This mode reads more data than necessary, but prevents many short reads from interacting poorly with the compression and encoding schemes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.SetWholeSlices(System.Int32)">
            <summary>
                <para>Get/Set whether the reader gets a whole slice from disk when only a rectangle inside it is needed.  This mode reads more data than necessary, but prevents many short reads from interacting poorly with the compression and encoding schemes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.GetNumberOfCells">
            <summary>
                <para>Get the number of cells in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLStructuredDataReader.GetNumberOfPoints">
            <summary>
                <para>Get the number of points in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBMPWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkBMPWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBMPWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBMPWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBMPWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBMPWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPUnstructuredDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.GetExtentTranslator">
            <summary>
                <para>Get/Set the extent translator used for creating pieces.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataWriter.SetExtentTranslator(vtk.vtkExtentTranslator)">
            <summary>
                <para>Get/Set the extent translator used for creating pieces.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.WriteSummaryFileOff">
            <summary>
                <para>Get/Set whether this instance of the writer should write the summary file that refers to all of the pieces' individual files. Default is yes only for piece 0 writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.WriteSummaryFileOn">
            <summary>
                <para>Get/Set whether this instance of the writer should write the summary file that refers to all of the pieces' individual files. Default is yes only for piece 0 writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.GetWriteSummaryFile">
            <summary>
                <para>Get/Set whether this instance of the writer should write the summary file that refers to all of the pieces' individual files. Default is yes only for piece 0 writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.SetWriteSummaryFile(System.Int32)">
            <summary>
                <para>Get/Set whether this instance of the writer should write the summary file that refers to all of the pieces' individual files. Default is yes only for piece 0 writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.GetGhostLevel">
            <summary>
                <para>Get/Set the ghost level used for this writer's piece.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.SetGhostLevel(System.Int32)">
            <summary>
                <para>Get/Set the ghost level used for this writer's piece.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.GetEndPiece">
            <summary>
                <para>Get/Set the range of pieces assigned to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.SetEndPiece(System.Int32)">
            <summary>
                <para>Get/Set the range of pieces assigned to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.GetStartPiece">
            <summary>
                <para>Get/Set the range of pieces assigned to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.SetStartPiece(System.Int32)">
            <summary>
                <para>Get/Set the range of pieces assigned to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.GetNumberOfPieces">
            <summary>
                <para>Get/Set the number of pieces that are being written in parallel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataWriter.SetNumberOfPieces(System.Int32)">
            <summary>
                <para>Get/Set the number of pieces that are being written in parallel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.WriteNextTime(System.Double)">
            <summary>
                <para>API to interface an outside the VTK pipeline control</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.Stop">
            <summary>
                <para>API to interface an outside the VTK pipeline control</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.Start">
            <summary>
                <para>API to interface an outside the VTK pipeline control</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetNumberOfTimeSteps(System.Int32)">
            <summary>
                <para>Set the number of time steps</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetNumberOfTimeSteps">
            <summary>
                <para>Set the number of time steps</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetTimeStepRange(System.Int32[])">
            <summary>
                <para>Which TimeStepRange to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetTimeStepRange(System.Int32,System.Int32)">
            <summary>
                <para>Which TimeStepRange to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetTimeStepRange">
            <summary>
                <para>Which TimeStepRange to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetTimeStep">
            <summary>
                <para>Which TimeStep to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetTimeStep(System.Int32)">
            <summary>
                <para>Which TimeStep to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.Write">
            <summary>
                <para>Invoke the writer.  Returns 1 for success, 0 for failure.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetDefaultFileExtension">
            <summary>
                <para>Get the default file extension for files written by this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetInput">
            <summary>
                <para>Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetInput(System.Int32)">
            <summary>
                <para>Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetInput(System.Int32,vtk.vtkDataObject)">
            <summary>
                <para>Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetInput(vtk.vtkDataObject)">
            <summary>
                <para>Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.EncodeAppendedDataOff">
            <summary>
                <para>Get/Set whether the appended data section is base64 encoded.  If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only.  If not encoded, the XML specification will be violated, but reading and writing will be fast.  The default is to do the encoding.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.EncodeAppendedDataOn">
            <summary>
                <para>Get/Set whether the appended data section is base64 encoded.  If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only.  If not encoded, the XML specification will be violated, but reading and writing will be fast.  The default is to do the encoding.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetEncodeAppendedData">
            <summary>
                <para>Get/Set whether the appended data section is base64 encoded.  If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only.  If not encoded, the XML specification will be violated, but reading and writing will be fast.  The default is to do the encoding.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetEncodeAppendedData(System.Int32)">
            <summary>
                <para>Get/Set whether the appended data section is base64 encoded.  If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only.  If not encoded, the XML specification will be violated, but reading and writing will be fast.  The default is to do the encoding.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetDataModeToAppended">
            <summary>
                <para>Get/Set the data mode used for the file's data.  The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetDataModeToBinary">
            <summary>
                <para>Get/Set the data mode used for the file's data.  The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetDataModeToAscii">
            <summary>
                <para>Get/Set the data mode used for the file's data.  The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetDataMode">
            <summary>
                <para>Get/Set the data mode used for the file's data.  The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetDataMode(System.Int32)">
            <summary>
                <para>Get/Set the data mode used for the file's data.  The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetBlockSize">
            <summary>
                <para>Get/Set the block size used in compression.  When reading, this controls the granularity of how much extra information must be read when only part of the data are requested.  The value should be a multiple of the largest scalar data type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetBlockSize(System.UInt32)">
            <summary>
                <para>Get/Set the block size used in compression.  When reading, this controls the granularity of how much extra information must be read when only part of the data are requested.  The value should be a multiple of the largest scalar data type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetCompressor">
            <summary>
                <para>Get/Set the compressor used to compress binary and appended data before writing to the file.  Default is no compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetCompressor(vtk.vtkDataCompressor)">
            <summary>
                <para>Get/Set the compressor used to compress binary and appended data before writing to the file.  Default is no compression.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetFileName">
            <summary>
                <para>Get/Set the name of the output file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetFileName(System.String)">
            <summary>
                <para>Get/Set the name of the output file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetIdTypeToInt64">
            <summary>
                <para>Get/Set the size of the vtkIdType values stored in the file.  The default is the real size of vtkIdType.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetIdTypeToInt32">
            <summary>
                <para>Get/Set the size of the vtkIdType values stored in the file.  The default is the real size of vtkIdType.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetIdType">
            <summary>
                <para>Get/Set the size of the vtkIdType values stored in the file.  The default is the real size of vtkIdType.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetIdType(System.Int32)">
            <summary>
                <para>Get/Set the size of the vtkIdType values stored in the file.  The default is the real size of vtkIdType.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetByteOrderToLittleEndian">
            <summary>
                <para>Get/Set the byte order of data written to the file.  The default is the machine's hardware byte order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetByteOrderToBigEndian">
            <summary>
                <para>Get/Set the byte order of data written to the file.  The default is the machine's hardware byte order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.GetByteOrder">
            <summary>
                <para>Get/Set the byte order of data written to the file.  The default is the machine's hardware byte order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLWriter.SetByteOrder(System.Int32)">
            <summary>
                <para>Get/Set the byte order of data written to the file.  The default is the machine's hardware byte order.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.GetInput(System.Int32)">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkUnstructuredGridWriter.GetInput">
            <summary>
                <para>Get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkDataWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkDataWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetFieldDataName">
            <summary>
                <para>Give a name to the field data. If not specified, uses default  name "field".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetFieldDataName(System.String)">
            <summary>
                <para>Give a name to the field data. If not specified, uses default  name "field".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetLookupTableName">
            <summary>
                <para>Give a name to the lookup table. If not specified, uses default name "lookupTable".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetLookupTableName(System.String)">
            <summary>
                <para>Give a name to the lookup table. If not specified, uses default name "lookupTable".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetTCoordsName">
            <summary>
                <para>Give a name to the texture coordinates data. If not specified, uses  default name "textureCoords".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetTCoordsName(System.String)">
            <summary>
                <para>Give a name to the texture coordinates data. If not specified, uses  default name "textureCoords".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetNormalsName">
            <summary>
                <para>Give a name to the normals data. If not specified, uses default name "normals".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetNormalsName(System.String)">
            <summary>
                <para>Give a name to the normals data. If not specified, uses default name "normals".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetTensorsName">
            <summary>
                <para>Give a name to the tensors data. If not specified, uses default name "tensors".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetTensorsName(System.String)">
            <summary>
                <para>Give a name to the tensors data. If not specified, uses default name "tensors".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetVectorsName">
            <summary>
                <para>Give a name to the vector data. If not specified, uses default name "vectors".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetVectorsName(System.String)">
            <summary>
                <para>Give a name to the vector data. If not specified, uses default name "vectors".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetScalarsName">
            <summary>
                <para>Give a name to the scalar data. If not specified, uses default name "scalars".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetScalarsName(System.String)">
            <summary>
                <para>Give a name to the scalar data. If not specified, uses default name "scalars".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetFileTypeToBinary">
            <summary>
                <para>Specify file type (ASCII or BINARY) for vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetFileTypeToASCII">
            <summary>
                <para>Specify file type (ASCII or BINARY) for vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetFileType">
            <summary>
                <para>Specify file type (ASCII or BINARY) for vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetFileTypeMaxValue">
            <summary>
                <para>Specify file type (ASCII or BINARY) for vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetFileTypeMinValue">
            <summary>
                <para>Specify file type (ASCII or BINARY) for vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetFileType(System.Int32)">
            <summary>
                <para>Specify file type (ASCII or BINARY) for vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetHeader">
            <summary>
                <para>Specify the header for the vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetHeader(System.String)">
            <summary>
                <para>Specify the header for the vtk data file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.RegisterAndGetOutputString">
            <summary>
                <para>This convenience method returns the string, sets the IVAR to NULL, so that the user is responsible for deleting the string. I am not sure what the name should be, so it may change in the future.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetOutputString">
            <summary>
                <para>When WriteToOutputString in on, then a string is allocated, written to, and can be retrieved with these methods.  The string is deleted during the next call to write ...</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetOutputStringLength">
            <summary>
                <para>When WriteToOutputString in on, then a string is allocated, written to, and can be retrieved with these methods.  The string is deleted during the next call to write ...</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.WriteToOutputStringOff">
            <summary>
                <para>Enable writing to an OutputString instead of the default, a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.WriteToOutputStringOn">
            <summary>
                <para>Enable writing to an OutputString instead of the default, a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetWriteToOutputString">
            <summary>
                <para>Enable writing to an OutputString instead of the default, a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetWriteToOutputString(System.Int32)">
            <summary>
                <para>Enable writing to an OutputString instead of the default, a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.GetFileName">
            <summary>
                <para>Specify file name of vtk polygon data file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkDataWriter.SetFileName(System.String)">
            <summary>
                <para>Specify file name of vtk polygon data file to write.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkWriter.SetInput(System.Int32,vtk.vtkDataObject)">
            <summary>
                <para>Set/get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkWriter.SetInput(vtk.vtkDataObject)">
            <summary>
                <para>Set/get the input to this writer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkWriter.EncodeArrayName(System.String,System.String)">
            <summary>
                <para>Encode the name so that the reader will not have problems. The resulting string is up to four time the size of the input  string.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkWriter.Write">
            <summary>
                <para>Write data to output. Method executes subclasses WriteData() method, as  well as StartMethod() and EndMethod() methods. Returns 1 on success and 0 on failure.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkBYUReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBYUReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBYUReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBYUReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetPartNumber">
            <summary>
                <para>Set/Get the part number to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetPartNumberMaxValue">
            <summary>
                <para>Set/Get the part number to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetPartNumberMinValue">
            <summary>
                <para>Set/Get the part number to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetPartNumber(System.Int32)">
            <summary>
                <para>Set/Get the part number to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.ReadTextureOff">
            <summary>
                <para>Turn on/off the reading of the texture coordinate file. Specify name of geometry FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.ReadTextureOn">
            <summary>
                <para>Turn on/off the reading of the texture coordinate file. Specify name of geometry FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetReadTexture">
            <summary>
                <para>Turn on/off the reading of the texture coordinate file. Specify name of geometry FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetReadTexture(System.Int32)">
            <summary>
                <para>Turn on/off the reading of the texture coordinate file. Specify name of geometry FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.ReadScalarOff">
            <summary>
                <para>Turn on/off the reading of the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.ReadScalarOn">
            <summary>
                <para>Turn on/off the reading of the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetReadScalar">
            <summary>
                <para>Turn on/off the reading of the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetReadScalar(System.Int32)">
            <summary>
                <para>Turn on/off the reading of the scalar file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.ReadDisplacementOff">
            <summary>
                <para>Turn on/off the reading of the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.ReadDisplacementOn">
            <summary>
                <para>Turn on/off the reading of the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetReadDisplacement">
            <summary>
                <para>Turn on/off the reading of the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetReadDisplacement(System.Int32)">
            <summary>
                <para>Turn on/off the reading of the displacement file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetTextureFileName">
            <summary>
                <para>Specify name of texture coordinates FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetTextureFileName(System.String)">
            <summary>
                <para>Specify name of texture coordinates FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetScalarFileName">
            <summary>
                <para>Specify name of scalar FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetScalarFileName(System.String)">
            <summary>
                <para>Specify name of scalar FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetDisplacementFileName">
            <summary>
                <para>Specify name of displacement FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetDisplacementFileName(System.String)">
            <summary>
                <para>Specify name of displacement FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetFileName">
            <summary>
                <para>Specify name of displacement FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetFileName(System.String)">
            <summary>
                <para>Specify name of geometry FileName (alias).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.GetGeometryFileName">
            <summary>
                <para>Specify name of geometry FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBYUReader.SetGeometryFileName(System.String)">
            <summary>
                <para>Specify name of geometry FileName.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPDBReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPDBReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPDBReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPDBReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPDBReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPDBReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkMoleculeReaderBase.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkMoleculeReaderBase.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkMoleculeReaderBase.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkMoleculeReaderBase.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageReader2.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetDescriptiveName">
            <summary>
                <para>Return a descriptive name for the file format that might be useful in a GUI.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFileExtensions">
            <summary>
                <para>Return a descriptive name for the file format that might be useful in a GUI.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.CanReadFile(System.String)">
            <summary>
                <para>Get the file extensions for this format. Returns a string with a space separated list of extensions in  the format .extension</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetInternalFileName">
            <summary>
                <para>Set/Get the internal file name</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.ComputeInternalFileName(System.Int32)">
            <summary>
                <para>Set/Get the internal file name</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetFileLowerLeft(System.Int32)">
            <summary>
                <para>Set/Get whether the data comes from the file starting in the lower left corner or upper left corner.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFileLowerLeft">
            <summary>
                <para>Set/Get whether the data comes from the file starting in the lower left corner or upper left corner.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.FileLowerLeftOff">
            <summary>
                <para>Set/Get whether the data comes from the file starting in the lower left corner or upper left corner.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.FileLowerLeftOn">
            <summary>
                <para>Set/Get whether the data comes from the file starting in the lower left corner or upper left corner.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SwapBytesOff">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SwapBytesOn">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetSwapBytes">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetSwapBytes(System.Int32)">
            <summary>
                <para>Set/Get the byte swapping to explicitly swap the bytes of a file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFileNameSliceSpacing">
            <summary>
                <para>When reading files which have regular, but non contiguous slices (eg filename.1,filename.3,filename.5) a spacing can be specified to skip missing files (default = 1)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetFileNameSliceSpacing(System.Int32)">
            <summary>
                <para>When reading files which have regular, but non contiguous slices (eg filename.1,filename.3,filename.5) a spacing can be specified to skip missing files (default = 1)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFileNameSliceOffset">
            <summary>
                <para>When reading files which start at an unusual index, this can be added to the slice number when generating the file name (default = 0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetFileNameSliceOffset(System.Int32)">
            <summary>
                <para>When reading files which start at an unusual index, this can be added to the slice number when generating the file name (default = 0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetDataByteOrderAsString">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataByteOrder(System.Int32)">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetDataByteOrder">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataByteOrderToLittleEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataByteOrderToBigEndian">
            <summary>
                <para>These methods should be used instead of the SwapBytes methods. They indicate the byte ordering of the file you are trying to read in. These methods will then either swap or not swap the bytes depending on the byte ordering of the machine it is being run on. For example, reading in a BigEndian file on a BigEndian machine will result in no swapping. Trying to read the same file on a LittleEndian machine will result in swapping. As a quick note most UNIX machines are BigEndian while PC's and VAX tend to be LittleEndian. So if the file you are reading in was generated on a VAX or PC, SetDataByteOrderToLittleEndian  otherwise SetDataByteOrderToBigEndian. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetHeaderSize(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>If there is a tail on the file, you want to explicitly set the header size.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetHeaderSize(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
                <para>Get the size of the header computed by this object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetHeaderSize">
            <summary>
                <para>Get the size of the header computed by this object.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetDataOrigin">
            <summary>
                <para>Set/Get the origin of the data (location of first pixel in the file).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataOrigin(System.Double[])">
            <summary>
                <para>Set/Get the origin of the data (location of first pixel in the file).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the origin of the data (location of first pixel in the file).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetDataSpacing">
            <summary>
                <para>Set/Get the spacing of the data in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataSpacing(System.Double[])">
            <summary>
                <para>Set/Get the spacing of the data in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the spacing of the data in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFileDimensionality">
            <summary>
                <para>Set/Get the spacing of the data in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetFileDimensionality(System.Int32)">
            <summary>
                <para>The number of dimensions stored in a file. This defaults to two.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetDataExtent">
            <summary>
                <para>Get/Set the extent of the data on disk.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataExtent(System.Int32[])">
            <summary>
                <para>Get/Set the extent of the data on disk.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Get/Set the extent of the data on disk.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetNumberOfScalarComponents">
            <summary>
                <para>Set/Get the number of scalar components</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetNumberOfScalarComponents(System.Int32)">
            <summary>
                <para>Set/Get the number of scalar components</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetDataScalarType">
            <summary>
                <para>Get the file format.  Pixels are this type in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataScalarTypeToUnsignedChar">
            <summary>
                <para>Get the file format.  Pixels are this type in the file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataScalarTypeToUnsignedShort">
            <summary>
                <para>Set the data type of pixels in the file.   If you want the output scalar type to have a different value, set it after this method is called.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataScalarTypeToShort">
            <summary>
                <para>Set the data type of pixels in the file.   If you want the output scalar type to have a different value, set it after this method is called.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataScalarTypeToInt">
            <summary>
                <para>Set the data type of pixels in the file.   If you want the output scalar type to have a different value, set it after this method is called.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataScalarTypeToDouble">
            <summary>
                <para>Set the data type of pixels in the file.   If you want the output scalar type to have a different value, set it after this method is called.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataScalarTypeToFloat">
            <summary>
                <para>Set the data type of pixels in the file.   If you want the output scalar type to have a different value, set it after this method is called.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetDataScalarType(System.Int32)">
            <summary>
                <para>Set the data type of pixels in the file.   If you want the output scalar type to have a different value, set it after this method is called.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFilePattern">
            <summary>
                <para>The sprintf format used to build filename from FilePrefix and number.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetFilePattern(System.String)">
            <summary>
                <para>The sprintf format used to build filename from FilePrefix and number.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFilePrefix">
            <summary>
                <para>Specify file prefix for the image file(s).You should specify either a FileName or FilePrefix. Use FilePrefix if the data is stored in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetFilePrefix(System.String)">
            <summary>
                <para>Specify file prefix for the image file(s).You should specify either a FileName or FilePrefix. Use FilePrefix if the data is stored in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.GetFileName">
            <summary>
                <para>Specify file name for the image file. You should specify either a FileName or a FilePrefix. Use FilePrefix if the data is stored  in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReader2.SetFileName(System.String)">
            <summary>
                <para>Specify file name for the image file. You should specify either a FileName or a FilePrefix. Use FilePrefix if the data is stored  in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Needed for ParaView</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredGridReader.SetOutput(vtk.vtkStructuredGrid)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPStructuredDataReader.GetExtentTranslator">
            <summary>
                <para>Get an extent translator that will create pieces matching the input file's piece breakdown.  This can be used further down the pipeline to prevent reading from outside this process's piece. The translator is only valid after an UpdateInformation has been called.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLPDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLPDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLPDataReader.GetNumberOfPieces">
            <summary>
                <para>Get the number of pieces from the summary file being read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.GetOutput(System.Int32)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.GetOutput">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredGridReader.SetOutput(vtk.vtkUnstructuredGrid)">
            <summary>
                <para>Get/Set the reader's output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.SetupUpdateExtent(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Setup the reader as if the given update extent were requested by its output.  This can be used after an UpdateInformation to validate GetNumberOfPoints() and GetNumberOfCells() without actually reading data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.GetNumberOfCells">
            <summary>
                <para>Get the number of cells in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLUnstructuredDataReader.GetNumberOfPoints">
            <summary>
                <para>Get the number of points in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLDataReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLDataReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLDataReader.GetNumberOfCells">
            <summary>
                <para>Get the number of cells in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLDataReader.GetNumberOfPoints">
            <summary>
                <para>Get the number of points in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkXMLReader.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkXMLReader.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkXMLReader.SetTimeStepRange(System.Int32[])">
            <summary>
                <para>Which TimeStepRange to read</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.SetTimeStepRange(System.Int32,System.Int32)">
            <summary>
                <para>Which TimeStepRange to read</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetTimeStepRange">
            <summary>
                <para>Which TimeStepRange to read</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetTimeStep">
            <summary>
                <para>Which TimeStep to read.    </para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.SetTimeStep(System.Int32)">
            <summary>
                <para>Which TimeStep to read.    </para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.CopyOutputInformation(vtk.vtkInformation,System.Int32)">
            <summary>
                <para>Which TimeStep to read.    </para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.SetCellArrayStatus(System.String,System.Int32)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.SetPointArrayStatus(System.String,System.Int32)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetCellArrayStatus(System.String)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetPointArrayStatus(System.String)">
            <summary>
                <para>Get/Set whether the point or cell array with the given name is to be read.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetCellArrayName(System.Int32)">
            <summary>
                <para>Get the name of the point or cell array with the given index in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetPointArrayName(System.Int32)">
            <summary>
                <para>Get the name of the point or cell array with the given index in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetNumberOfCellArrays">
            <summary>
                <para>Get the number of point or cell arrays available in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetNumberOfPointArrays">
            <summary>
                <para>Get the number of point or cell arrays available in the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetCellDataArraySelection">
            <summary>
                <para>Get the data array selection tables used to configure which data arrays are loaded by the reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetPointDataArraySelection">
            <summary>
                <para>Get the data array selection tables used to configure which data arrays are loaded by the reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetOutputAsDataSet(System.Int32)">
            <summary>
                <para>Get the output as a vtkDataSet pointer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetOutputAsDataSet">
            <summary>
                <para>Get the output as a vtkDataSet pointer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.CanReadFile(System.String)">
            <summary>
                <para>Test whether the file with the given name can be read by this reader.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.GetFileName">
            <summary>
                <para>Get/Set the name of the input file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkXMLReader.SetFileName(System.String)">
            <summary>
                <para>Get/Set the name of the input file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageWriter.Write">
            <summary>
                <para>The main interface which triggers the writer to start.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.GetFileDimensionality">
            <summary>
                <para>What dimension are the files to be written. Usually this is 2, or 3. If it is 2 and the input is a volume then the volume will be  written as a series of 2d slices.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.SetFileDimensionality(System.Int32)">
            <summary>
                <para>What dimension are the files to be written. Usually this is 2, or 3. If it is 2 and the input is a volume then the volume will be  written as a series of 2d slices.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.GetFilePattern">
            <summary>
                <para>The sprintf format used to build filename from FilePrefix and number.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.SetFilePattern(System.String)">
            <summary>
                <para>The sprintf format used to build filename from FilePrefix and number.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.GetFilePrefix">
            <summary>
                <para>Specify file prefix for the image file(s).You should specify either a FileName or FilePrefix. Use FilePrefix if the data is stored in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.SetFilePrefix(System.String)">
            <summary>
                <para>Specify file prefix for the image file(s).You should specify either a FileName or FilePrefix. Use FilePrefix if the data is stored in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.GetFileName">
            <summary>
                <para>Specify file name for the image file. You should specify either a FileName or a FilePrefix. Use FilePrefix if the data is stored  in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWriter.SetFileName(System.String)">
            <summary>
                <para>Specify file name for the image file. You should specify either a FileName or a FilePrefix. Use FilePrefix if the data is stored  in multiple files.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkAVIWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.End">
            <summary>
                <para>These methods start writing an AVI file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.Write">
            <summary>
                <para>These methods start writing an AVI file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkAVIWriter.Start">
            <summary>
                <para>These methods start writing an AVI file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.GetError">
            <summary>
                <para>Was there an error on the last read performed?</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.End">
            <summary>
                <para>These methods start writing an Movie file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.Write">
            <summary>
                <para>These methods start writing an Movie file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.Start">
            <summary>
                <para>These methods start writing an Movie file, write a frame to the file and then end the writing process.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.GetFileName">
            <summary>
                <para>Specify file name of avi file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.SetFileName(System.String)">
            <summary>
                <para>Specify file name of avi file.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.GetInput">
            <summary>
                <para>Set/Get the input object from the image pipeline.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGenericMovieWriter.SetInput(vtk.vtkImageData)">
            <summary>
                <para>Set/Get the input object from the image pipeline.</para>
            </summary>
        </member>
    </members>
</doc>