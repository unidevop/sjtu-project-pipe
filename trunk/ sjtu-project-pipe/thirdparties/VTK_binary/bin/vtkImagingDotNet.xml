<?xml version="1.0"?>
<doc>
    <assembly>
        "vtkImagingDotNet"
    </assembly>
    <members>
        <member name="M:vtk.vtkImageShrink3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageShrink3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.AveragingOff">
            <summary>
                <para>Choose Mean, Minimum, Maximum, Median or sub sampling. The neighborhood operations are not centered on the sampled pixel. This may cause a half pixel shift in your output image. You can changed "Shift" to get around this. vtkImageGaussianSmooth or vtkImageMean with strides.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.AveragingOn">
            <summary>
                <para>Choose Mean, Minimum, Maximum, Median or sub sampling. The neighborhood operations are not centered on the sampled pixel. This may cause a half pixel shift in your output image. You can changed "Shift" to get around this. vtkImageGaussianSmooth or vtkImageMean with strides.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.GetAveraging">
            <summary>
                <para>Choose Mean, Minimum, Maximum, Median or sub sampling. The neighborhood operations are not centered on the sampled pixel. This may cause a half pixel shift in your output image. You can changed "Shift" to get around this. vtkImageGaussianSmooth or vtkImageMean with strides.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.SetAveraging(System.Int32)">
            <summary>
                <para>Choose Mean, Minimum, Maximum, Median or sub sampling. The neighborhood operations are not centered on the sampled pixel. This may cause a half pixel shift in your output image. You can changed "Shift" to get around this. vtkImageGaussianSmooth or vtkImageMean with strides.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.GetShift">
            <summary>
                <para>Set/Get the pixel to use as origin.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.SetShift(System.Int32[])">
            <summary>
                <para>Set/Get the pixel to use as origin.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.SetShift(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the pixel to use as origin.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.GetShrinkFactors">
            <summary>
                <para>Set/Get the shrink factors</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.SetShrinkFactors(System.Int32[])">
            <summary>
                <para>Set/Get the shrink factors</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShrink3D.SetShrinkFactors(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the shrink factors</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.GetThreshold">
            <summary>
                <para>Set the threshold value for the implicit function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.SetThreshold(System.Double)">
            <summary>
                <para>Set the threshold value for the implicit function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.GetInput">
            <summary>
                <para>Specify the implicit function to convert into a stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImplicitFunctionToImageStencil.SetInput(vtk.vtkImplicitFunction)">
            <summary>
                <para>Specify the implicit function to convert into a stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageFlip.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageFlip.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageFlip.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageFlip.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageFlip.PreserveImageExtentOff">
            <summary>
                <para>PreserveImageExtentOff wasn't covered by test scripts and its implementation was broken.  It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.PreserveImageExtentOn">
            <summary>
                <para>PreserveImageExtentOff wasn't covered by test scripts and its implementation was broken.  It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.GetPreserveImageExtent">
            <summary>
                <para>PreserveImageExtentOff wasn't covered by test scripts and its implementation was broken.  It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.SetPreserveImageExtent(System.Int32)">
            <summary>
                <para>PreserveImageExtentOff wasn't covered by test scripts and its implementation was broken.  It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.SetFilteredAxes(System.Int32)">
            <summary>
                <para>For compatibility with old scripts.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.FlipAboutOriginOff">
            <summary>
                <para>By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input.  However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image.  This method will adjust the Origin of the output such that the flip occurs about (0,0,0).  Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used.  Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a  vtkImageData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.FlipAboutOriginOn">
            <summary>
                <para>By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input.  However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image.  This method will adjust the Origin of the output such that the flip occurs about (0,0,0).  Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used.  Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a  vtkImageData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.GetFlipAboutOrigin">
            <summary>
                <para>By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input.  However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image.  This method will adjust the Origin of the output such that the flip occurs about (0,0,0).  Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used.  Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a  vtkImageData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.SetFlipAboutOrigin(System.Int32)">
            <summary>
                <para>By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input.  However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image.  This method will adjust the Origin of the output such that the flip occurs about (0,0,0).  Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used.  Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a  vtkImageData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.GetFilteredAxis">
            <summary>
                <para>Specify which axis will be flipped.  This must be an integer between 0 (for x) and 2 (for z).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFlip.SetFilteredAxis(System.Int32)">
            <summary>
                <para>Specify which axis will be flipped.  This must be an integer between 0 (for x) and 2 (for z).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSobel3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSobel3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageSobel3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSobel3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSobel3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSobel3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilSource.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilSource.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.GetMaximum">
            <summary>
                <para>Hue is an angle. Maximum specifies when it maps back to 0. HueMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input. Maximum also specifies the maximum of the Saturation, and R, G, B.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageHSVToRGB.SetMaximum(System.Double)">
            <summary>
                <para>Hue is an angle. Maximum specifies when it maps back to 0. HueMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input. Maximum also specifies the maximum of the Saturation, and R, G, B.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.GetOrder">
            <summary>
                <para>The order determines sharpness of the cutoff curve.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.SetOrder(System.Int32)">
            <summary>
                <para>The order determines sharpness of the cutoff curve.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.GetZCutOff">
            <summary>
                <para>The order determines sharpness of the cutoff curve.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.GetYCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.GetXCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.GetCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.SetZCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.SetYCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.SetXCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.SetCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.SetCutOff(System.Double[])">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthLowPass.SetCutOff(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.CopyOriginAndSample(vtk.vtkImageMandelbrotSource)">
            <summary>
                <para>Convienence for Viewer.  Copy the OriginCX and the SpacingCX. What about other parameters ???</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.Pan(System.Double,System.Double,System.Double)">
            <summary>
                <para>Convienence for Viewer.  Pan 3D volume relative to spacing.  Zoom constant factor.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.Zoom(System.Double)">
            <summary>
                <para>Convienence for Viewer.  Pan 3D volume relative to spacing.  Zoom constant factor.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetMaximumNumberOfIterations">
            <summary>
                <para>The maximum number of cycles run to see if the value goes over 2</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetMaximumNumberOfIterationsMaxValue">
            <summary>
                <para>The maximum number of cycles run to see if the value goes over 2</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetMaximumNumberOfIterationsMinValue">
            <summary>
                <para>The maximum number of cycles run to see if the value goes over 2</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetMaximumNumberOfIterations(System.UInt16)">
            <summary>
                <para>The maximum number of cycles run to see if the value goes over 2</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetSizeCX(System.Double[])">
            <summary>
                <para>Just a different way of setting the sample.   This sets the size of the 4D volume.  SampleCX is computed from size and extent. Size is ignored when a dimension i 0 (collapsed).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetSizeCX">
            <summary>
                <para>Just a different way of setting the sample.   This sets the size of the 4D volume.  SampleCX is computed from size and extent. Size is ignored when a dimension i 0 (collapsed).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetSizeCX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Just a different way of setting the sample.   This sets the size of the 4D volume.  SampleCX is computed from size and extent. Size is ignored when a dimension i 0 (collapsed).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetSampleCX">
            <summary>
                <para>Imaginary and real value for C (constant in equation)  and X (initial value).void SetOriginCX(double cReal, double cImag, double xReal, double xImag);</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetSampleCX(System.Double[])">
            <summary>
                <para>Imaginary and real value for C (constant in equation)  and X (initial value).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetSampleCX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Imaginary and real value for C (constant in equation)  and X (initial value).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetOriginCX">
            <summary>
                <para>Imaginary and real value for C (constant in equation)  and X (initial value).void SetOriginCX(double cReal, double cImag, double xReal, double xImag);</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetOriginCX(System.Double[])">
            <summary>
                <para>Imaginary and real value for C (constant in equation)  and X (initial value).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetOriginCX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Imaginary and real value for C (constant in equation)  and X (initial value).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetProjectionAxes">
            <summary>
                <para>Set the projection from  the 4D space (4 parameters / 2 imaginary numbers) to the axes of the 3D Volume.  0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetProjectionAxes(System.Int32[])">
            <summary>
                <para>Set the projection from  the 4D space (4 parameters / 2 imaginary numbers) to the axes of the 3D Volume.  0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetProjectionAxes(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set the projection from  the 4D space (4 parameters / 2 imaginary numbers) to the axes of the 3D Volume.  0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.ConstantSizeOff">
            <summary>
                <para>This flag determines whether the Size or spacing of  a data set remain constant (when extent is changed).   By default, size remains constant.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.ConstantSizeOn">
            <summary>
                <para>This flag determines whether the Size or spacing of  a data set remain constant (when extent is changed).   By default, size remains constant.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetConstantSize">
            <summary>
                <para>This flag determines whether the Size or spacing of  a data set remain constant (when extent is changed).   By default, size remains constant.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetConstantSize(System.Int32)">
            <summary>
                <para>This flag determines whether the Size or spacing of  a data set remain constant (when extent is changed).   By default, size remains constant.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.GetWholeExtent">
            <summary>
                <para>Set/Get the extent of the whole output Volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the extent of the whole output Volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMandelbrotSource.SetWholeExtent(System.Int32[])">
            <summary>
                <para>Set/Get the extent of the whole output Volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkBooleanTexture.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetOutOn">
            <summary>
                <para>Specify intensity/transparency for "out/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOutOn(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "out/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOutOn(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "out/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetInOn">
            <summary>
                <para>Specify intensity/transparency for "in/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetInOn(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "in/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetInOn(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "in/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetOnOut">
            <summary>
                <para>Specify intensity/transparency for "on/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOnOut(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "on/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOnOut(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "on/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetOnIn">
            <summary>
                <para>Specify intensity/transparency for "on/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOnIn(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "on/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOnIn(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "on/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetOnOn">
            <summary>
                <para>Specify intensity/transparency for "on/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOnOn(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "on/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOnOn(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "on/on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetOutOut">
            <summary>
                <para>Specify intensity/transparency for "out/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOutOut(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "out/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOutOut(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "out/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetOutIn">
            <summary>
                <para>Specify intensity/transparency for "out/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOutIn(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "out/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetOutIn(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "out/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetInOut">
            <summary>
                <para>Specify intensity/transparency for "in/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetInOut(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "in/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetInOut(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "in/out" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetInIn">
            <summary>
                <para>Specify intensity/transparency for "in/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetInIn(System.Byte[])">
            <summary>
                <para>Specify intensity/transparency for "in/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetInIn(System.Byte,System.Byte)">
            <summary>
                <para>Specify intensity/transparency for "in/in" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetThickness">
            <summary>
                <para>Set the thickness of the "on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetThickness(System.Int32)">
            <summary>
                <para>Set the thickness of the "on" region.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetYSize">
            <summary>
                <para>Set the Y texture map dimension.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetYSize(System.Int32)">
            <summary>
                <para>Set the Y texture map dimension.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.GetXSize">
            <summary>
                <para>Set the X texture map dimension.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkBooleanTexture.SetXSize(System.Int32)">
            <summary>
                <para>Set the X texture map dimension.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkPointLoad.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkPointLoad.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkPointLoad.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkPointLoad.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkPointLoad.ComputeEffectiveStressOff">
            <summary>
                <para>Turn on/off computation of effective stress scalar. These methods do  nothing. The effective stress is always computed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.ComputeEffectiveStressOn">
            <summary>
                <para>Turn on/off computation of effective stress scalar. These methods do  nothing. The effective stress is always computed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.GetComputeEffectiveStress">
            <summary>
                <para>Turn on/off computation of effective stress scalar. These methods do  nothing. The effective stress is always computed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.SetComputeEffectiveStress(System.Int32)">
            <summary>
                <para>Turn on/off computation of effective stress scalar. These methods do  nothing. The effective stress is always computed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.GetPoissonsRatio">
            <summary>
                <para>Set/Get Poisson's ratio.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.SetPoissonsRatio(System.Double)">
            <summary>
                <para>Set/Get Poisson's ratio.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.GetModelBounds">
            <summary>
                <para>Specify the region in space over which the tensors are computed. The point load is assumed to be applied at top center of the volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.SetModelBounds(System.Double[])">
            <summary>
                <para>Specify the region in space over which the tensors are computed. The point load is assumed to be applied at top center of the volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.SetModelBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the region in space over which the tensors are computed. The point load is assumed to be applied at top center of the volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.GetSampleDimensions">
            <summary>
                <para>Specify the dimensions of the volume. A stress tensor will be computed for each point in the volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.SetSampleDimensions(System.Int32[])">
            <summary>
                <para>Specify the dimensions of the volume. A stress tensor will be computed for each point in the volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.SetSampleDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Specify the dimensions of the volume. A stress tensor will be computed for each point in the volume.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.GetLoadValue">
            <summary>
                <para>Set/Get value of applied load.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkPointLoad.SetLoadValue(System.Double)">
            <summary>
                <para>Set/Get value of applied load.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkVoxelModeller.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.GetModelBounds">
            <summary>
                <para>Specify the position in space to perform the voxelization.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.SetModelBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the position in space to perform the voxelization.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.SetModelBounds(System.Double[])">
            <summary>
                <para>Specify the position in space to perform the voxelization.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.GetMaximumDistance">
            <summary>
                <para>Specify distance away from surface of input geometry to sample. Smaller values make large increases in performance.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.GetMaximumDistanceMaxValue">
            <summary>
                <para>Specify distance away from surface of input geometry to sample. Smaller values make large increases in performance.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.GetMaximumDistanceMinValue">
            <summary>
                <para>Specify distance away from surface of input geometry to sample. Smaller values make large increases in performance.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.SetMaximumDistance(System.Double)">
            <summary>
                <para>Specify distance away from surface of input geometry to sample. Smaller values make large increases in performance.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.GetSampleDimensions">
            <summary>
                <para>Set the i-j-k dimensions on which to sample the distance function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.SetSampleDimensions(System.Int32[])">
            <summary>
                <para>Set the i-j-k dimensions on which to sample the distance function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.SetSampleDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set the i-j-k dimensions on which to sample the distance function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkVoxelModeller.ComputeModelBounds(System.Double[],System.Double[])">
            <summary>
                <para>Compute the ModelBounds based on the input geometry.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageConvolve.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.GetKernel3x3x3(System.Double[])">
            <summary>
                <para>Return an array that contains the kernel</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.SetKernel3x3x3(System.Double[])">
            <summary>
                <para>Set the kernel to be a 3x3x3 or 5x5x5 or 7x7x7 kernel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.GetKernel5x5(System.Double[])">
            <summary>
                <para>Return an array that contains the kernel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.GetKernel3x3(System.Double[])">
            <summary>
                <para>Return an array that contains the kernel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.SetKernel5x5(System.Double[])">
            <summary>
                <para>Set the kernel to be a given 3x3 or 5x5 or 7x7 kernel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.SetKernel3x3(System.Double[])">
            <summary>
                <para>Set the kernel to be a given 3x3 or 5x5 or 7x7 kernel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.GetKernelSize">
            <summary>
                <para>Get the kernel size</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.SafeDownCast(vtk.vtkObject)">
            <summary>
                <para>Construct an instance of vtkImageConvolve filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.NewInstance">
            <summary>
                <para>Construct an instance of vtkImageConvolve filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.IsA(System.String)">
            <summary>
                <para>Construct an instance of vtkImageConvolve filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConvolve.GetClassName">
            <summary>
                <para>Construct an instance of vtkImageConvolve filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImportExecutive.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageImportExecutive.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageImportExecutive.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageImportExecutive.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeparableConvolution.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeparableConvolution.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeparableConvolution.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSeparableConvolution.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSeparableConvolution.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeparableConvolution.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeparableConvolution.GetMTime">
            <summary>
                <para>Overload standard modified time function. If kernel arrays are modified, then this object is modified as well.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.SetKernelSize(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>This method sets the size of the neighborhood.  It also sets the  default middle of the neighborhood and computes the elliptical foot print.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.SafeDownCast(vtk.vtkObject)">
            <summary>
                <para>Construct an instance of vtkImageContinuousDilate3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.NewInstance">
            <summary>
                <para>Construct an instance of vtkImageContinuousDilate3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.IsA(System.String)">
            <summary>
                <para>Construct an instance of vtkImageContinuousDilate3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousDilate3D.GetClassName">
            <summary>
                <para>Construct an instance of vtkImageContinuousDilate3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageCast.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageCast.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageCast.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageCast.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageCast.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageCast.ClampOverflowOff">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.ClampOverflowOn">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.GetClampOverflow">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetClampOverflow(System.Int32)">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToChar">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToUnsignedChar">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToUnsignedShort">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToShort">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToUnsignedLong">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToLong">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToUnsignedInt">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToInt">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToDouble">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarTypeToFloat">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.GetOutputScalarType">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCast.SetOutputScalarType(System.Int32)">
            <summary>
                <para>Set the desired output scalar type to cast to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkShepardMethod.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.GetNullValue">
            <summary>
                <para>Set the Null value for output points not receiving a contribution from the input points.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.SetNullValue(System.Double)">
            <summary>
                <para>Set the Null value for output points not receiving a contribution from the input points.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.GetModelBounds">
            <summary>
                <para>Specify the position in space to perform the sampling.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.SetModelBounds(System.Double[])">
            <summary>
                <para>Specify the position in space to perform the sampling.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.SetModelBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the position in space to perform the sampling.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.GetMaximumDistance">
            <summary>
                <para>Specify influence distance of each input point. This distance is a  fraction of the length of the diagonal of the sample space. Thus, values  of 1.0 will cause each input point to influence all points in the  structured point dataset. Values less than 1.0 can improve performance significantly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.GetMaximumDistanceMaxValue">
            <summary>
                <para>Specify influence distance of each input point. This distance is a  fraction of the length of the diagonal of the sample space. Thus, values  of 1.0 will cause each input point to influence all points in the  structured point dataset. Values less than 1.0 can improve performance significantly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.GetMaximumDistanceMinValue">
            <summary>
                <para>Specify influence distance of each input point. This distance is a  fraction of the length of the diagonal of the sample space. Thus, values  of 1.0 will cause each input point to influence all points in the  structured point dataset. Values less than 1.0 can improve performance significantly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.SetMaximumDistance(System.Double)">
            <summary>
                <para>Specify influence distance of each input point. This distance is a  fraction of the length of the diagonal of the sample space. Thus, values  of 1.0 will cause each input point to influence all points in the  structured point dataset. Values less than 1.0 can improve performance significantly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.SetSampleDimensions(System.Int32[])">
            <summary>
                <para>Set the i-j-k dimensions on which to sample the distance function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.SetSampleDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set the i-j-k dimensions on which to sample the distance function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.GetSampleDimensions">
            <summary>
                <para>Specify i-j-k dimensions on which to sample input points.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkShepardMethod.ComputeModelBounds(System.Double[],System.Double[])">
            <summary>
                <para>Compute ModelBounds from input geometry.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDivergence.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageDivergence.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageDivergence.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageDivergence.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.GetReplaceValue">
            <summary>
                <para>Set/Get the value to put in the place of removed pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.SetReplaceValue(System.Double)">
            <summary>
                <para>Set/Get the value to put in the place of removed pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.GetIslandValue">
            <summary>
                <para>Set/Get the value to remove.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.SetIslandValue(System.Double)">
            <summary>
                <para>Set/Get the value to remove.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.SquareNeighborhoodOff">
            <summary>
                <para>Set/Get whether to use 4 or 8 neighbors</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.SquareNeighborhoodOn">
            <summary>
                <para>Set/Get whether to use 4 or 8 neighbors</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.GetSquareNeighborhood">
            <summary>
                <para>Set/Get whether to use 4 or 8 neighbors</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.SetSquareNeighborhood(System.Int32)">
            <summary>
                <para>Set/Get whether to use 4 or 8 neighbors</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.GetAreaThreshold">
            <summary>
                <para>Set/Get the cutoff area for removal</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.SetAreaThreshold(System.Int32)">
            <summary>
                <para>Set/Get the cutoff area for removal</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.SafeDownCast(vtk.vtkObject)">
            <summary>
                <para>Constructor: Sets default filter to be identity.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.NewInstance">
            <summary>
                <para>Constructor: Sets default filter to be identity.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.IsA(System.String)">
            <summary>
                <para>Constructor: Sets default filter to be identity.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIslandRemoval2D.GetClassName">
            <summary>
                <para>Constructor: Sets default filter to be identity.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToChar">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToUnsignedShort">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToShort">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToUnsignedInt">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToInt">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToUnsignedLong">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToLong">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToDouble">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarTypeToFloat">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.GetOutputScalarType">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutputScalarType(System.Int32)">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.GetOutValue">
            <summary>
                <para>Set/Get the outside pixel values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetOutValue(System.Double)">
            <summary>
                <para>Set/Get the outside pixel values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.GetInValue">
            <summary>
                <para>Set/Get the inside pixel values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetInValue(System.Double)">
            <summary>
                <para>Set/Get the inside pixel values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.GetRadius">
            <summary>
                <para>Set/Get the radius of the ellipsoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetRadius(System.Double[])">
            <summary>
                <para>Set/Get the radius of the ellipsoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetRadius(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the radius of the ellipsoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.GetCenter">
            <summary>
                <para>Set/Get the center of the ellipsoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetCenter(System.Double[])">
            <summary>
                <para>Set/Get the center of the ellipsoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetCenter(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the center of the ellipsoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.GetWholeExtent">
            <summary>
                <para>Set/Get the center of the ellipsoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.GetWholeExtent(System.Int32[])">
            <summary>
                <para>Set/Get the extent of the whole output image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the extent of the whole output image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEllipsoidSource.SetWholeExtent(System.Int32[])">
            <summary>
                <para>Set/Get the extent of the whole output image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.GetConstant">
            <summary>
                <para>Set/Get the scale factor for the logarithmic function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogarithmicScale.SetConstant(System.Double)">
            <summary>
                <para>Set/Get the scale factor for the logarithmic function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.GetLookupTable">
            <summary>
                <para>Get the resulting lookup table that contains the color definitions corresponding to the index values in the output image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.GetNumberOfColors">
            <summary>
                <para>Set / Get the number of color index values to produce - must be  a number between 2 and 65536.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.GetNumberOfColorsMaxValue">
            <summary>
                <para>Set / Get the number of color index values to produce - must be  a number between 2 and 65536.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.GetNumberOfColorsMinValue">
            <summary>
                <para>Set / Get the number of color index values to produce - must be  a number between 2 and 65536.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageQuantizeRGBToIndex.SetNumberOfColors(System.Int32)">
            <summary>
                <para>Set / Get the number of color index values to produce - must be  a number between 2 and 65536.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.SetSampleSpacing(System.Double)">
            <summary>
                <para>Specify the spacing of the 3D sampling grid. If not set, a reasonable guess will be made.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.GetSampleSpacing">
            <summary>
                <para>Specify the spacing of the 3D sampling grid. If not set, a reasonable guess will be made.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.SetNeighborhoodSize(System.Int32)">
            <summary>
                <para>Specify the number of neighbors each point has, used for estimating the local surface orientation.  The default value of 20 should be OK for most applications, higher values can be specified if the spread of points is uneven. Values as low as 10 may yield adequate results for some surfaces. Higher values cause the algorithm to take longer. Higher values will cause errors on sharp boundaries.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSurfaceReconstructionFilter.GetNeighborhoodSize">
            <summary>
                <para>Specify the number of neighbors each point has, used for estimating the local surface orientation.  The default value of 20 should be OK for most applications, higher values can be specified if the spread of points is uneven. Values as low as 10 may yield adequate results for some surfaces. Higher values cause the algorithm to take longer. Higher values will cause errors on sharp boundaries.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageBlend.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageBlend.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageBlend.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageBlend.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetCompoundThreshold">
            <summary>
                <para>Specify a threshold in compound mode. Pixels with opacity*alpha less or equal the threshold are ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetCompoundThreshold(System.Double)">
            <summary>
                <para>Specify a threshold in compound mode. Pixels with opacity*alpha less or equal the threshold are ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetBlendModeAsString">
            <summary>
                <para>Set the blend mode</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetBlendModeToCompound">
            <summary>
                <para>Set the blend mode</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetBlendModeToNormal">
            <summary>
                <para>Set the blend mode</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetBlendMode">
            <summary>
                <para>Set the blend mode</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetBlendModeMaxValue">
            <summary>
                <para>Set the blend mode</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetBlendModeMinValue">
            <summary>
                <para>Set the blend mode</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetBlendMode(System.Int32)">
            <summary>
                <para>Set the blend mode</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetStencil">
            <summary>
                <para>Set a stencil to apply when blending the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetStencil(vtk.vtkImageStencilData)">
            <summary>
                <para>Set a stencil to apply when blending the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetOpacity(System.Int32)">
            <summary>
                <para>Set the opacity of an input image: the alpha values of the image are multiplied by the opacity.  The opacity of image idx=0 is ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetOpacity(System.Int32,System.Double)">
            <summary>
                <para>Set the opacity of an input image: the alpha values of the image are multiplied by the opacity.  The opacity of image idx=0 is ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetNumberOfInputs">
            <summary>
                <para>Get the number of inputs to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetNumberOfInputConnections(0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetInput">
            <summary>
                <para>Get one input to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.GetInput(System.Int32)">
            <summary>
                <para>Get one input to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetInput(vtk.vtkDataObject)">
            <summary>
                <para>Set an Input of this filter.  This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::AddInputConnection(0, data).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageBlend.SetInput(System.Int32,vtk.vtkDataObject)">
            <summary>
                <para>Set an Input of this filter.  This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::AddInputConnection(0, data).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkSampleFunction.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetMTime">
            <summary>
                <para>Return the MTime also considering the implicit function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.ComputeNormalsOff">
            <summary>
                <para>Turn on/off the computation of normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.ComputeNormalsOn">
            <summary>
                <para>Turn on/off the computation of normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetComputeNormals">
            <summary>
                <para>Turn on/off the computation of normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetComputeNormals(System.Int32)">
            <summary>
                <para>Turn on/off the computation of normals.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetCapValue">
            <summary>
                <para>Set the cap value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetCapValue(System.Double)">
            <summary>
                <para>Set the cap value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.CappingOff">
            <summary>
                <para>Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.CappingOn">
            <summary>
                <para>Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetCapping">
            <summary>
                <para>Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetCapping(System.Int32)">
            <summary>
                <para>Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetModelBounds">
            <summary>
                <para>Specify the region in space over which the sampling occurs. The bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetModelBounds(System.Double[])">
            <summary>
                <para>Specify the region in space over which the sampling occurs. The bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetModelBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the region in space over which the sampling occurs. The bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetSampleDimensions">
            <summary>
                <para>Specify the dimensions of the data on which to sample.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetSampleDimensions(System.Int32[])">
            <summary>
                <para>Specify the dimensions of the data on which to sample.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetSampleDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Specify the dimensions of the data on which to sample.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetScalars(vtk.vtkDataArray)">
            <summary>
                <para>Control the type of the scalars object by explicitly providing a scalar object.  THIS IS DEPRECATED, although it still works!!! Please use SetOutputScalarType instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToUnsignedChar">
            <summary>
                <para>Control the type of the scalars object by explicitly providing a scalar object.  THIS IS DEPRECATED, although it still works!!! Please use SetOutputScalarType instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToChar">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToUnsignedShort">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToShort">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToUnsignedInt">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToInt">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToUnsignedLong">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToLong">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToFloat">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarTypeToDouble">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetOutputScalarType">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetOutputScalarType(System.Int32)">
            <summary>
                <para>Set what type of scalar data this source should generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.GetImplicitFunction">
            <summary>
                <para>Specify the implicit function to use to generate data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSampleFunction.SetImplicitFunction(vtk.vtkImplicitFunction)">
            <summary>
                <para>Specify the implicit function to use to generate data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMaskBits.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetOperationToNor">
            <summary>
                <para>Set/Get the boolean operator. Default is AND.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetOperationToNand">
            <summary>
                <para>Set/Get the boolean operator. Default is AND.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetOperationToXor">
            <summary>
                <para>Set/Get the boolean operator. Default is AND.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetOperationToOr">
            <summary>
                <para>Set/Get the boolean operator. Default is AND.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetOperationToAnd">
            <summary>
                <para>Set/Get the boolean operator. Default is AND.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.GetOperation">
            <summary>
                <para>Set/Get the boolean operator. Default is AND.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetOperation(System.Int32)">
            <summary>
                <para>Set/Get the boolean operator. Default is AND.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.GetMasks">
            <summary>
                <para>Set/Get the bit-masks. Default is 0xffffffff.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetMasks(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                <para>Set/Get the bit-masks. Default is 0xffffffff.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetMasks(System.UInt32,System.UInt32)">
            <summary>
                <para>Set/Get the bit-masks. Default is 0xffffffff.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetMask(System.UInt32)">
            <summary>
                <para>Set/Get the bit-masks. Default is 0xffffffff.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetMasks(System.UInt32[])">
            <summary>
                <para>Set/Get the bit-masks. Default is 0xffffffff.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMaskBits.SetMasks(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                <para>Set/Get the bit-masks. Default is 0xffffffff.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.GetMaximum">
            <summary>
                <para>Hue is an angle. Maximum specifies when it maps back to 0.  HueMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input.  Maximum also specifies the maximum of the Saturation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSI.SetMaximum(System.Double)">
            <summary>
                <para>Hue is an angle. Maximum specifies when it maps back to 0.  HueMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input.  Maximum also specifies the maximum of the Saturation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageCorrelation.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.SetInput1(vtk.vtkDataObject)">
            <summary>
                <para>Set the two inputs to this filter</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.GetDimensionality">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.GetDimensionalityMaxValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.GetDimensionalityMinValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCorrelation.SetDimensionality(System.Int32)">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.GetNumberOfComponents">
            <summary>
                <para>Get the number of components to extract. This is set implicitly by the  SetComponents() method.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.GetComponents">
            <summary>
                <para>Set/Get the components to extract.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.SetComponents(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the components to extract.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.SetComponents(System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the components to extract.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExtractComponents.SetComponents(System.Int32)">
            <summary>
                <para>Set/Get the components to extract.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.GetLevel">
            <summary>
                <para>Set / Get the Level to use -&gt; modulation will be performed on the  color based on (S - (L - W/2))/W where S is the scalar value, L is the level and W is the window.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.SetLevel(System.Double)">
            <summary>
                <para>Set / Get the Level to use -&gt; modulation will be performed on the  color based on (S - (L - W/2))/W where S is the scalar value, L is the level and W is the window.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.GetWindow">
            <summary>
                <para>Set / Get the Window to use -&gt; modulation will be performed on the  color based on (S - (L - W/2))/W where S is the scalar value, L is the level and W is the window.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToWindowLevelColors.SetWindow(System.Double)">
            <summary>
                <para>Set / Get the Window to use -&gt; modulation will be performed on the  color based on (S - (L - W/2))/W where S is the scalar value, L is the level and W is the window.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkTriangularTexture.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.GetTexturePattern">
            <summary>
                <para>Set the texture pattern.    1 = opaque at centroid (default)    2 = opaque at vertices    3 = opaque in rings around vertices</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.GetTexturePatternMaxValue">
            <summary>
                <para>Set the texture pattern.    1 = opaque at centroid (default)    2 = opaque at vertices    3 = opaque in rings around vertices</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.GetTexturePatternMinValue">
            <summary>
                <para>Set the texture pattern.    1 = opaque at centroid (default)    2 = opaque at vertices    3 = opaque in rings around vertices</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.SetTexturePattern(System.Int32)">
            <summary>
                <para>Set the texture pattern.    1 = opaque at centroid (default)    2 = opaque at vertices    3 = opaque in rings around vertices</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.GetYSize">
            <summary>
                <para>Set the Y texture map dimension. Default is 64.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.SetYSize(System.Int32)">
            <summary>
                <para>Set the Y texture map dimension. Default is 64.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.GetXSize">
            <summary>
                <para>Set the X texture map dimension. Default is 64.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.SetXSize(System.Int32)">
            <summary>
                <para>Set the X texture map dimension. Default is 64.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.GetScaleFactor">
            <summary>
                <para>Set a Scale Factor.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkTriangularTexture.SetScaleFactor(System.Double)">
            <summary>
                <para>Set a Scale Factor.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRFFT.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageRFFT.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageRFFT.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageRFFT.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageRFFT.SplitExtent(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
                <para>For streaming and threads.  Splits output update extent into num pieces. This method needs to be called num times.  Results must not overlap for consistent starting extent.  Subclass can override this method.  This method returns the number of pieces resulting from a successful split. This can be from 1 to "total".  If 1 is returned, the extent cannot be split.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnitude.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMagnitude.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMagnitude.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMagnitude.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradient.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradient.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradient.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageGradient.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradient.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradient.HandleBoundariesOff">
            <summary>
                <para>Get/Set whether to handle boundaries.  If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels.  If disabled, the output whole extent of the image is reduced by one pixel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.HandleBoundariesOn">
            <summary>
                <para>Get/Set whether to handle boundaries.  If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels.  If disabled, the output whole extent of the image is reduced by one pixel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.GetHandleBoundaries">
            <summary>
                <para>Get/Set whether to handle boundaries.  If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels.  If disabled, the output whole extent of the image is reduced by one pixel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.SetHandleBoundaries(System.Int32)">
            <summary>
                <para>Get/Set whether to handle boundaries.  If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels.  If disabled, the output whole extent of the image is reduced by one pixel.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.GetDimensionality">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.GetDimensionalityMaxValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.GetDimensionalityMinValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradient.SetDimensionality(System.Int32)">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarType(System.Int32)">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToChar">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToUnsignedChar">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToUnsignedShort">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToShort">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToUnsignedLong">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToLong">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToUnsignedInt">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToInt">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToDouble">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetScalarTypeToFloat">
            <summary>
                <para>Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these methods are setting and getting the pipeline scalar type. i.e. they are setting the type that the image data will be once it has executed. Until the REQUEST_DATA pass the actual scalars may be of some other type. This is for backwards compatibility</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetNumberOfScalarComponents(System.Int32)">
            <summary>
                <para>Set the number of scalar components</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.GetRatio">
            <summary>
                <para>Set/Get Ratio. This is the value that is used to pre-multiply each (x, y, z) drawing coordinates (including DefaultZ).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetRatio(System.Double[])">
            <summary>
                <para>Set/Get Ratio. This is the value that is used to pre-multiply each (x, y, z) drawing coordinates (including DefaultZ).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetRatio(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get Ratio. This is the value that is used to pre-multiply each (x, y, z) drawing coordinates (including DefaultZ).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.GetDefaultZ">
            <summary>
                <para>The drawing operations can only draw into one 2D XY plane at a time. If the canvas is a 3D volume, then this z value is used as the default for 2D operations.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetDefaultZ(System.Int32)">
            <summary>
                <para>The drawing operations can only draw into one 2D XY plane at a time. If the canvas is a 3D volume, then this z value is used as the default for 2D operations.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>These methods set the WholeExtent of the output It sets the size of the canvas. Extent is a min max 3D box.  Minimums and maximums are inclusive.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetExtent(System.Int32[])">
            <summary>
                <para>These methods set the WholeExtent of the output It sets the size of the canvas. Extent is a min max 3D box.  Minimums and maximums are inclusive.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.FillPixel(System.Int32,System.Int32)">
            <summary>
                <para>Fill a colored area with another color. (like connectivity) All pixels connected (and with the same value) to pixel (x, y)  get replaced by the current "DrawColor".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.DrawImage(System.Int32,System.Int32,vtk.vtkImageData,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Draw subimage of the input image in the canvas at position x0 and y0. The subimage is defined with sx, sy, width, and height.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.DrawImage(System.Int32,System.Int32,vtk.vtkImageData)">
            <summary>
                <para>Draw subimage of the input image in the canvas at position x0 and y0. The subimage is defined with sx, sy, width, and height.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.DrawSegment3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Draw subimage of the input image in the canvas at position x0 and y0. The subimage is defined with sx, sy, width, and height.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetDrawColor(System.Double,System.Double)">
            <summary>
                <para>Set/Get DrawValue.  This is the value that is used when filling data or drawing lines.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetDrawColor(System.Double)">
            <summary>
                <para>Set/Get DrawValue.  This is the value that is used when filling data or drawing lines.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.GetDrawColor">
            <summary>
                <para>Set/Get DrawValue.  This is the value that is used when filling data or drawing lines.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetDrawColor(System.Double[])">
            <summary>
                <para>Set/Get DrawValue.  This is the value that is used when filling data or drawing lines.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCanvasSource2D.SetDrawColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get DrawValue.  This is the value that is used when filling data or drawing lines.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageCursor3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.GetCursorRadius">
            <summary>
                <para>Sets/Gets the radius of the cursor. The radius determines how far the axis lines project out from the cursors center.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.SetCursorRadius(System.Int32)">
            <summary>
                <para>Sets/Gets the radius of the cursor. The radius determines how far the axis lines project out from the cursors center.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.GetCursorValue">
            <summary>
                <para>Sets/Gets what pixel value to draw the cursor in.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.SetCursorValue(System.Double)">
            <summary>
                <para>Sets/Gets what pixel value to draw the cursor in.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.GetCursorPosition">
            <summary>
                <para>Sets/Gets the center point of the 3d cursor.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.SetCursorPosition(System.Double[])">
            <summary>
                <para>Sets/Gets the center point of the 3d cursor.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCursor3D.SetCursorPosition(System.Double,System.Double,System.Double)">
            <summary>
                <para>Sets/Gets the center point of the 3d cursor.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.GetThetaMaximum">
            <summary>
                <para>Theta is an angle. Maximum specifies when it maps back to 0. ThetaMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input. The output type must be the same as input type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanToPolar.SetThetaMaximum(System.Double)">
            <summary>
                <para>Theta is an angle. Maximum specifies when it maps back to 0. ThetaMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input. The output type must be the same as input type.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GradientMagnitudeThresholdOff">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GradientMagnitudeThresholdOn">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GetGradientMagnitudeThreshold">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.SetGradientMagnitudeThreshold(System.Int32)">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.CornersOff">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.CornersOn">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GetCorners">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.SetCorners(System.Int32)">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.EdgesOff">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.EdgesOn">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GetEdges">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.SetEdges(System.Int32)">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.FacesOff">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.FacesOn">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GetFaces">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.SetFaces(System.Int32)">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GetDiffusionFactor">
            <summary>
                <para>Set/Get the difference factor</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.SetDiffusionFactor(System.Double)">
            <summary>
                <para>Set/Get the difference factor</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GetDiffusionThreshold">
            <summary>
                <para>Set/Get the difference threshold that stops diffusion.  when the difference between two pixel is greater than this threshold, the pixels are not diffused.  This causes diffusion to avoid sharp edges. If the GradientMagnitudeThreshold is set, then gradient magnitude is used  for comparison instead of pixel differences.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.SetDiffusionThreshold(System.Double)">
            <summary>
                <para>Set/Get the difference threshold that stops diffusion.  when the difference between two pixel is greater than this threshold, the pixels are not diffused.  This causes diffusion to avoid sharp edges. If the GradientMagnitudeThreshold is set, then gradient magnitude is used  for comparison instead of pixel differences.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.GetNumberOfIterations">
            <summary>
                <para>Get the number of iterations.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion3D.SetNumberOfIterations(System.Int32)">
            <summary>
                <para>This method sets the number of interations which also affects the input neighborhood needed to compute one output pixel.  Each iterations requires an extra pixel layer on the neighborhood.  This is only relavent when you are trying to stream or are requesting a sub extent of the "wholeExtent".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkExtractVOI.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.GetSampleRate">
            <summary>
                <para>Set the sampling rate in the i, j, and k directions. If the rate is &gt; 1, then the resulting VOI will be subsampled representation of the input.  For example, if the SampleRate=(2,2,2), every other point will be selected, resulting in a volume 1/8th the original size.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.SetSampleRate(System.Int32[])">
            <summary>
                <para>Set the sampling rate in the i, j, and k directions. If the rate is &gt; 1, then the resulting VOI will be subsampled representation of the input.  For example, if the SampleRate=(2,2,2), every other point will be selected, resulting in a volume 1/8th the original size.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.SetSampleRate(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set the sampling rate in the i, j, and k directions. If the rate is &gt; 1, then the resulting VOI will be subsampled representation of the input.  For example, if the SampleRate=(2,2,2), every other point will be selected, resulting in a volume 1/8th the original size.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.GetVOI">
            <summary>
                <para>Specify i-j-k (min,max) pairs to extract. The resulting structured points dataset can be of any topological dimension (i.e., point, line, image,  or volume). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.SetVOI(System.Int32[])">
            <summary>
                <para>Specify i-j-k (min,max) pairs to extract. The resulting structured points dataset can be of any topological dimension (i.e., point, line, image,  or volume). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkExtractVOI.SetVOI(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Specify i-j-k (min,max) pairs to extract. The resulting structured points dataset can be of any topological dimension (i.e., point, line, image,  or volume). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFourierCenter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageFourierCenter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageFourierCenter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageFourierCenter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageExport.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageExport.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageExport.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageExport.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageExport.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageExport.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetCallbackUserData">
            <summary>
                <para>Get the user data that should be passed to the callback functions.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetPointerToData">
            <summary>
                <para>An alternative to Export(): Use with caution.   Update the pipeline and return a pointer to the image memory.  The pointer is only valid until the next time that the pipeline is updated. WARNING: This method ignores the ImageLowerLeft flag.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.Export(System.IntPtr)">
            <summary>
                <para>The main interface: update the pipeline and export the image to the memory pointed to by SetExportVoidPointer().  You can also specify a void pointer when you call Export().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.Export">
            <summary>
                <para>The main interface: update the pipeline and export the image to the memory pointed to by SetExportVoidPointer().  You can also specify a void pointer when you call Export().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetExportVoidPointer">
            <summary>
                <para>Set the void pointer of the C array to export the data to. From python, you can specify a pointer to a string that is large enough to hold the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.SetExportVoidPointer(System.IntPtr)">
            <summary>
                <para>Set the void pointer of the C array to export the data to. From python, you can specify a pointer to a string that is large enough to hold the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.SetImageLowerLeft(System.Int32)">
            <summary>
                <para>Set/Get whether the data goes to the exported memory starting  in the lower left corner or upper left corner.  Default: On. When this flag is Off, the image will be flipped vertically before it is exported. WARNING: this flag is used only with the Export() method, it is ignored by GetPointerToData().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetImageLowerLeft">
            <summary>
                <para>Set/Get whether the data goes to the exported memory starting  in the lower left corner or upper left corner.  Default: On. When this flag is Off, the image will be flipped vertically before it is exported. WARNING: this flag is used only with the Export() method, it is ignored by GetPointerToData().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.ImageLowerLeftOff">
            <summary>
                <para>Set/Get whether the data goes to the exported memory starting  in the lower left corner or upper left corner.  Default: On. When this flag is Off, the image will be flipped vertically before it is exported. WARNING: this flag is used only with the Export() method, it is ignored by GetPointerToData().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.ImageLowerLeftOn">
            <summary>
                <para>Set/Get whether the data goes to the exported memory starting  in the lower left corner or upper left corner.  Default: On. When this flag is Off, the image will be flipped vertically before it is exported. WARNING: this flag is used only with the Export() method, it is ignored by GetPointerToData().</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataOrigin(System.Double[])">
            <summary>
                <para>Get miscellaneous additional information about the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataOrigin">
            <summary>
                <para>Get miscellaneous additional information about the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataSpacing(System.Double[])">
            <summary>
                <para>Get miscellaneous additional information about the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataSpacing">
            <summary>
                <para>Get miscellaneous additional information about the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataExtent(System.Int32[])">
            <summary>
                <para>Get miscellaneous additional information about the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataExtent">
            <summary>
                <para>Get miscellaneous additional information about the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataScalarTypeAsString">
            <summary>
                <para>Get miscellaneous additional information about the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataScalarType">
            <summary>
                <para>Get the scalar type of the data.  The scalar type of the C array must match the scalar type of the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataNumberOfScalarComponents">
            <summary>
                <para>Get the number of scalar components of the data.  Please note that when you index into a C array, the scalar component index comes last, i.e. array[z][y][x][c].</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataDimensions">
            <summary>
                <para>Get the number of scalar components of the data.  Please note that when you index into a C array, the scalar component index comes last, i.e. array[z][y][x][c].</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataDimensions(System.Int32[])">
            <summary>
                <para>Get the (x,y,z) index dimensions of the data.  Please note that C arrays are indexed in decreasing order, i.e. array[z][y][x]. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageExport.GetDataMemorySize">
            <summary>
                <para>Get the number of bytes required for the output C array.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.GetOrder">
            <summary>
                <para>The order determines sharpness of the cutoff curve.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.SetOrder(System.Int32)">
            <summary>
                <para>The order determines sharpness of the cutoff curve.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.GetZCutOff">
            <summary>
                <para>The order determines sharpness of the cutoff curve.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.GetYCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.GetXCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.GetCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.SetZCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.SetYCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.SetXCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.SetCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.SetCutOff(System.Double[])">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageButterworthHighPass.SetCutOff(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.GetDimensionality">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices or a 3D volume)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.GetDimensionalityMaxValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices or a 3D volume)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.GetDimensionalityMinValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices or a 3D volume)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.SetDimensionality(System.Int32)">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices or a 3D volume)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.HandleBoundariesOff">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.HandleBoundariesOn">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.GetHandleBoundaries">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.SetHandleBoundaries(System.Int32)">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.SetVectorInput(vtk.vtkImageData)">
            <summary>
                <para>Set the magnitude and vector inputs.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNonMaximumSuppression.SetMagnitudeInput(vtk.vtkImageData)">
            <summary>
                <para>Set the magnitude and vector inputs.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMask.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMask.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMask.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMask.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMask.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetInput1(vtk.vtkDataObject)">
            <summary>
                <para>Set the two inputs to this filter</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.NotMaskOff">
            <summary>
                <para>When Not Mask is on, the mask is passed through a boolean not before it is used to mask the image.  The effect is to pass the pixels where the input mask is zero, and replace the pixels where the input value is non zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.NotMaskOn">
            <summary>
                <para>When Not Mask is on, the mask is passed through a boolean not before it is used to mask the image.  The effect is to pass the pixels where the input mask is zero, and replace the pixels where the input value is non zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.GetNotMask">
            <summary>
                <para>When Not Mask is on, the mask is passed through a boolean not before it is used to mask the image.  The effect is to pass the pixels where the input mask is zero, and replace the pixels where the input value is non zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetNotMask(System.Int32)">
            <summary>
                <para>When Not Mask is on, the mask is passed through a boolean not before it is used to mask the image.  The effect is to pass the pixels where the input mask is zero, and replace the pixels where the input value is non zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetMaskInput(vtk.vtkImageData)">
            <summary>
                <para>Set the mask to be used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetImageInput(vtk.vtkImageData)">
            <summary>
                <para>Set the input to be masked.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.GetMaskAlpha">
            <summary>
                <para>Set/Get the alpha blending value for the mask The input image is assumed to be at alpha = 1.0 and the mask image uses this alpha to blend using an over operator.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.GetMaskAlphaMaxValue">
            <summary>
                <para>Set/Get the alpha blending value for the mask The input image is assumed to be at alpha = 1.0 and the mask image uses this alpha to blend using an over operator.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.GetMaskAlphaMinValue">
            <summary>
                <para>Set/Get the alpha blending value for the mask The input image is assumed to be at alpha = 1.0 and the mask image uses this alpha to blend using an over operator.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetMaskAlpha(System.Double)">
            <summary>
                <para>Set/Get the alpha blending value for the mask The input image is assumed to be at alpha = 1.0 and the mask image uses this alpha to blend using an over operator.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.GetMaskedOutputValueLength">
            <summary>
                <para>Set/Get the alpha blending value for the mask The input image is assumed to be at alpha = 1.0 and the mask image uses this alpha to blend using an over operator.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetMaskedOutputValue(System.Double,System.Double,System.Double)">
            <summary>
                <para>SetGet the value of the output pixel replaced by mask.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetMaskedOutputValue(System.Double,System.Double)">
            <summary>
                <para>SetGet the value of the output pixel replaced by mask.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetMaskedOutputValue(System.Double)">
            <summary>
                <para>SetGet the value of the output pixel replaced by mask.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMask.SetMaskedOutputValue(System.Int32,System.Double[])">
            <summary>
                <para>SetGet the value of the output pixel replaced by mask.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageShiftScale.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.ClampOverflowOff">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default, ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.ClampOverflowOn">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default, ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.GetClampOverflow">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default, ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetClampOverflow(System.Int32)">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default, ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToUnsignedChar">
            <summary>
                <para>When the ClampOverflow flag is on, the data is thresholded so that the output value does not exceed the max or min of the data type. By default, ClampOverflow is off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToChar">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToUnsignedShort">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToShort">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToUnsignedInt">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToInt">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToUnsignedLong">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToLong">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToFloat">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarTypeToDouble">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.GetOutputScalarType">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetOutputScalarType(System.Int32)">
            <summary>
                <para>Set the desired output scalar type. The result of the shift  and scale operations is cast to the type specified.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.GetScale">
            <summary>
                <para>Set/Get the scale value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetScale(System.Double)">
            <summary>
                <para>Set/Get the scale value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.GetShift">
            <summary>
                <para>Set/Get the shift value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageShiftScale.SetShift(System.Double)">
            <summary>
                <para>Set/Get the shift value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogic.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogic.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageLogic.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogic.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetInput2(vtk.vtkDataObject)">
            <summary>
                <para>Set the Input2 of this filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetInput1(vtk.vtkDataObject)">
            <summary>
                <para>Set the Input1 of this filter. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.GetOutputTrueValue">
            <summary>
                <para>Set the value to use for true in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOutputTrueValue(System.Double)">
            <summary>
                <para>Set the value to use for true in the output.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOperationToNot">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOperationToNor">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOperationToNand">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOperationToXor">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOperationToOr">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOperationToAnd">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.GetOperation">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLogic.SetOperation(System.Int32)">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.SetAlgorithmToSaito">
            <summary>
                <para>Selects a Euclidean DT algorithm.  1. Saito 2. Saito-cached  More algorithms will be added later on. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.GetAlgorithm">
            <summary>
                <para>Selects a Euclidean DT algorithm.  1. Saito 2. Saito-cached  More algorithms will be added later on. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.SetAlgorithm(System.Int32)">
            <summary>
                <para>Selects a Euclidean DT algorithm.  1. Saito 2. Saito-cached  More algorithms will be added later on. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.GetMaximumDistance">
            <summary>
                <para>Any distance bigger than this-&gt;MaximumDistance will not ne computed but set to this-&gt;MaximumDistance instead. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.SetMaximumDistance(System.Double)">
            <summary>
                <para>Any distance bigger than this-&gt;MaximumDistance will not ne computed but set to this-&gt;MaximumDistance instead. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.ConsiderAnisotropyOff">
            <summary>
                <para>Used to define whether Spacing should be used in the computation of the distances </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.ConsiderAnisotropyOn">
            <summary>
                <para>Used to define whether Spacing should be used in the computation of the distances </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.GetConsiderAnisotropy">
            <summary>
                <para>Used to define whether Spacing should be used in the computation of the distances </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.SetConsiderAnisotropy(System.Int32)">
            <summary>
                <para>Used to define whether Spacing should be used in the computation of the distances </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.InitializeOff">
            <summary>
                <para>Used to set all non-zero voxels to MaximumDistance before starting the distance transformation. Setting Initialize off keeps the current  value in the input image as starting point. This allows to superimpose  several distance maps. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.InitializeOn">
            <summary>
                <para>Used to set all non-zero voxels to MaximumDistance before starting the distance transformation. Setting Initialize off keeps the current  value in the input image as starting point. This allows to superimpose  several distance maps. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.GetInitialize">
            <summary>
                <para>Used to set all non-zero voxels to MaximumDistance before starting the distance transformation. Setting Initialize off keeps the current  value in the input image as starting point. This allows to superimpose  several distance maps. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.SetInitialize(System.Int32)">
            <summary>
                <para>Used to set all non-zero voxels to MaximumDistance before starting the distance transformation. Setting Initialize off keeps the current  value in the input image as starting point. This allows to superimpose  several distance maps. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageEuclideanDistance.SplitExtent(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
                <para>Used internally for streaming and threads.   Splits output update extent into num pieces. This method needs to be called num times.  Results must not overlap for consistent starting extent.  Subclass can override this method. This method returns the number of peices resulting from a successful split.  This can be from 1 to "total".   If 1 is returned, the extent cannot be split.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.SetNumberOfIterations(System.Int32)">
            <summary>
                <para>Sets the number of cycles in the erosion.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.PruneOff">
            <summary>
                <para>When prune is on, only closed loops are left unchanged.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.PruneOn">
            <summary>
                <para>When prune is on, only closed loops are left unchanged.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.GetPrune">
            <summary>
                <para>When prune is on, only closed loops are left unchanged.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSkeleton2D.SetPrune(System.Int32)">
            <summary>
                <para>When prune is on, only closed loops are left unchanged.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.GetNumberOfInputs">
            <summary>
                <para>Get the number of inputs to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetNumberOfInputConnections(0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.GetInput">
            <summary>
                <para>Get one input to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.GetInput(System.Int32)">
            <summary>
                <para>Get one input to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.SetInput(vtk.vtkDataObject)">
            <summary>
                <para>Set an Input of this filter.  This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::AddInputConnection(0, data).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppendComponents.SetInput(System.Int32,vtk.vtkDataObject)">
            <summary>
                <para>Set an Input of this filter.  This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::AddInputConnection(0, data).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.GetDimensionality">
            <summary>
                <para>Set/Get the dimensionality of this filter. This determines whether a one, two, or three dimensional gaussian is performed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetDimensionality(System.Int32)">
            <summary>
                <para>Set/Get the dimensionality of this filter. This determines whether a one, two, or three dimensional gaussian is performed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.GetRadiusFactors">
            <summary>
                <para>Sets/Gets the Radius Factors of the gaussian (no unit). The radius factors determine how far out the gaussian kernel will  go before being clamped to zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetRadiusFactor(System.Double)">
            <summary>
                <para>Sets/Gets the Radius Factors of the gaussian (no unit). The radius factors determine how far out the gaussian kernel will  go before being clamped to zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetRadiusFactors(System.Double,System.Double)">
            <summary>
                <para>Sets/Gets the Radius Factors of the gaussian (no unit). The radius factors determine how far out the gaussian kernel will  go before being clamped to zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetRadiusFactors(System.Double[])">
            <summary>
                <para>Sets/Gets the Radius Factors of the gaussian (no unit). The radius factors determine how far out the gaussian kernel will  go before being clamped to zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetRadiusFactors(System.Double,System.Double,System.Double)">
            <summary>
                <para>Sets/Gets the Radius Factors of the gaussian (no unit). The radius factors determine how far out the gaussian kernel will  go before being clamped to zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetStandardDeviation(System.Double,System.Double,System.Double)">
            <summary>
                <para>Sets/Gets the Radius Factors of the gaussian (no unit). The radius factors determine how far out the gaussian kernel will  go before being clamped to zero.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetStandardDeviation(System.Double,System.Double)">
            <summary>
                <para>Sets/Gets the Standard deviation of the gaussian in pixel units. These methods are provided for compatibility with old scripts</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.GetStandardDeviations">
            <summary>
                <para>Sets/Gets the Standard deviation of the gaussian in pixel units.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetStandardDeviations(System.Double,System.Double)">
            <summary>
                <para>Sets/Gets the Standard deviation of the gaussian in pixel units.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetStandardDeviation(System.Double)">
            <summary>
                <para>Sets/Gets the Standard deviation of the gaussian in pixel units.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetStandardDeviations(System.Double[])">
            <summary>
                <para>Sets/Gets the Standard deviation of the gaussian in pixel units.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSmooth.SetStandardDeviations(System.Double,System.Double,System.Double)">
            <summary>
                <para>Sets/Gets the Standard deviation of the gaussian in pixel units.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToRGBA.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMapToRGBA.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMapToRGBA.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToRGBA.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.GetCacheSize">
            <summary>
                <para>This is the maximum number of images that can be retained in memory. it defaults to 10.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCacheFilter.SetCacheSize(System.Int32)">
            <summary>
                <para>This is the maximum number of images that can be retained in memory. it defaults to 10.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageAccumulate.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetVoxelCount">
            <summary>
                <para>Get the statistics information for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetStandardDeviation">
            <summary>
                <para>Get the statistics information for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetMean">
            <summary>
                <para>Get the statistics information for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetMax">
            <summary>
                <para>Get the statistics information for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetMin">
            <summary>
                <para>Get the statistics information for the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetReverseStencil">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.ReverseStencilOff">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.ReverseStencilOn">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetReverseStencil(System.Int32)">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetStencil">
            <summary>
                <para>Use a stencil to specify which voxels to accumulate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetStencil(vtk.vtkImageStencilData)">
            <summary>
                <para>Use a stencil to specify which voxels to accumulate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetComponentExtent">
            <summary>
                <para>Use a stencil to specify which voxels to accumulate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetComponentExtent(System.Int32[])">
            <summary>
                <para>Set/Get - The component extent sets the number/extent of the bins. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this extent should be set to 0, 9, 0, 0, 0, 0. The extent specifies inclusive min/max values.   This implies the the top extent should be set to the number of bins - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetComponentExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get - The component extent sets the number/extent of the bins. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this extent should be set to 0, 9, 0, 0, 0, 0. The extent specifies inclusive min/max values.   This implies the the top extent should be set to the number of bins - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetComponentExtent(System.Int32[])">
            <summary>
                <para>Set/Get - The component extent sets the number/extent of the bins. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this extent should be set to 0, 9, 0, 0, 0, 0. The extent specifies inclusive min/max values.   This implies the the top extent should be set to the number of bins - 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetComponentOrigin">
            <summary>
                <para>Set/Get - The component origin is the location of bin (0, 0, 0). Note that if the Component extent does not include the value (0,0,0), then this origin bin will not actually be in the output. The origin of the output ends up being the same as the componenet origin. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this origin should be set to 1000, 0, 0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetComponentOrigin(System.Double[])">
            <summary>
                <para>Set/Get - The component origin is the location of bin (0, 0, 0). Note that if the Component extent does not include the value (0,0,0), then this origin bin will not actually be in the output. The origin of the output ends up being the same as the componenet origin. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this origin should be set to 1000, 0, 0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetComponentOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get - The component origin is the location of bin (0, 0, 0). Note that if the Component extent does not include the value (0,0,0), then this origin bin will not actually be in the output. The origin of the output ends up being the same as the componenet origin. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this origin should be set to 1000, 0, 0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.GetComponentSpacing">
            <summary>
                <para>Set/Get - The component spacing is the dimension of each bin. This ends up being the spacing of the output "image". If the number of input scalar components are less than three, then some of these spacing values are ignored. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this spacing should be set to 100, 0, 0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetComponentSpacing(System.Double[])">
            <summary>
                <para>Set/Get - The component spacing is the dimension of each bin. This ends up being the spacing of the output "image". If the number of input scalar components are less than three, then some of these spacing values are ignored. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this spacing should be set to 100, 0, 0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAccumulate.SetComponentSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get - The component spacing is the dimension of each bin. This ends up being the spacing of the output "image". If the number of input scalar components are less than three, then some of these spacing values are ignored. For a 1D histogram with 10 bins spanning the values 1000 to 2000, this spacing should be set to 100, 0, 0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMedian3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMedian3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMedian3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMedian3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMedian3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMedian3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMedian3D.GetNumberOfElements">
            <summary>
                <para>Return the number of elements in the median mask</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMedian3D.SetKernelSize(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>This method sets the size of the neighborhood.  It also sets the  default middle of the neighborhood </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetWipeToUpperLeft">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetWipeToLowerRight">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetWipeToLowerLeft">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetWipeToVertical">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetWipeToHorizontal">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetWipeToQuad">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.GetWipe">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.GetWipeMaxValue">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.GetWipeMinValue">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetWipe(System.Int32)">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetInput2(vtk.vtkDataObject)">
            <summary>
                <para>Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position.   SetWipeToQuad - alternate input 0 and input 1 horizontally and     vertically. The Position specifies the location of the quad     intersection.   SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one     input and 1 of the other. Select the location of input 0 to the     LowerLeft{LowerRight,UpperLeft,UpperRight}. Position     selects the location of the corner.   SetWipeToHorizontal - alternate input 0 and input 1 with a vertical     split. Position[0] specifies the location of the vertical     transition between input 0 and input 1.   SetWipeToVertical - alternate input 0 and input 1 with a     horizontal split. Position[1] specifies the location of the     horizonal transition between input 0 and input 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetInput1(vtk.vtkDataObject)">
            <summary>
                <para>Set the two inputs to this filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.GetPosition">
            <summary>
                <para>Set/Get the location of the image transition. Note that position is specified in pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetPosition(System.Int32[])">
            <summary>
                <para>Set/Get the location of the image transition. Note that position is specified in pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRectilinearWipe.SetPosition(System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the location of the image transition. Note that position is specified in pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePermute.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImagePermute.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImagePermute.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImagePermute.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImagePermute.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImagePermute.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImagePermute.GetFilteredAxes">
            <summary>
                <para>The filtered axes are the input axes that get relabeled to X,Y,Z.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePermute.SetFilteredAxes(System.Int32[])">
            <summary>
                <para>The filtered axes are the input axes that get relabeled to X,Y,Z.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePermute.SetFilteredAxes(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>The filtered axes are the input axes that get relabeled to X,Y,Z.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConnector.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageConnector.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageCityBlockDistance.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageCityBlockDistance.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageCityBlockDistance.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageCityBlockDistance.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.SetWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set how large of an image to generate.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.GetMaximum">
            <summary>
                <para>Set/Get the minimum and maximum values for the generated noise.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.SetMaximum(System.Double)">
            <summary>
                <para>Set/Get the minimum and maximum values for the generated noise.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.GetMinimum">
            <summary>
                <para>Set/Get the minimum and maximum values for the generated noise.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNoiseSource.SetMinimum(System.Double)">
            <summary>
                <para>Set/Get the minimum and maximum values for the generated noise.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSpatialAlgorithm.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialAlgorithm.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMathematics.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetInput1(vtk.vtkDataObject)">
            <summary>
                <para>Set the two inputs to this filter</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetOperationToComplexMultiply">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetOperationToConjugate">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetOperationToDivide">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetOperationToMultiply">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetOperationToSubtract">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetOperationToAdd">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.GetOperation">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMathematics.SetOperation(System.Int32)">
            <summary>
                <para>Set/Get the Operation to perform.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSV.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSV.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSV.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageRGBToHSV.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSV.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageRGBToHSV.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMapToColors.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.GetMTime">
            <summary>
                <para>We need to check the modified time of the lookup table too.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.GetPassAlphaToOutput">
            <summary>
                <para>Use the alpha component of the input when computing the alpha component of the output (useful when converting monochrome+alpha data to RGBA)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.PassAlphaToOutputOff">
            <summary>
                <para>Use the alpha component of the input when computing the alpha component of the output (useful when converting monochrome+alpha data to RGBA)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.PassAlphaToOutputOn">
            <summary>
                <para>Use the alpha component of the input when computing the alpha component of the output (useful when converting monochrome+alpha data to RGBA)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetPassAlphaToOutput(System.Int32)">
            <summary>
                <para>Use the alpha component of the input when computing the alpha component of the output (useful when converting monochrome+alpha data to RGBA)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.GetActiveComponent">
            <summary>
                <para>Set the component to map for multi-component images (default: 0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetActiveComponent(System.Int32)">
            <summary>
                <para>Set the component to map for multi-component images (default: 0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetOutputFormatToLuminance">
            <summary>
                <para>Set the output format, the default is RGBA.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetOutputFormatToLuminanceAlpha">
            <summary>
                <para>Set the output format, the default is RGBA.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetOutputFormatToRGB">
            <summary>
                <para>Set the output format, the default is RGBA.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetOutputFormatToRGBA">
            <summary>
                <para>Set the output format, the default is RGBA.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.GetOutputFormat">
            <summary>
                <para>Set the output format, the default is RGBA.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetOutputFormat(System.Int32)">
            <summary>
                <para>Set the output format, the default is RGBA.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.GetLookupTable">
            <summary>
                <para>Set the lookup table.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMapToColors.SetLookupTable(vtk.vtkScalarsToColors)">
            <summary>
                <para>Set the lookup table.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GradientMagnitudeThresholdOff">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GradientMagnitudeThresholdOn">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GetGradientMagnitudeThreshold">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.SetGradientMagnitudeThreshold(System.Int32)">
            <summary>
                <para>Switch between gradient magnitude threshold and pixel gradient threshold.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.CornersOff">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.CornersOn">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GetCorners">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.SetCorners(System.Int32)">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.EdgesOff">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.EdgesOn">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GetEdges">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.SetEdges(System.Int32)">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.FacesOff">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.FacesOn">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GetFaces">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.SetFaces(System.Int32)">
            <summary>
                <para>Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GetDiffusionFactor">
            <summary>
                <para>The diffusion factor specifies  how much neighboring pixels effect each other. No diffusion occurs with a factor of 0, and a diffusion factor of 1 causes the pixel to become the average of all its neighbors.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.SetDiffusionFactor(System.Double)">
            <summary>
                <para>The diffusion factor specifies  how much neighboring pixels effect each other. No diffusion occurs with a factor of 0, and a diffusion factor of 1 causes the pixel to become the average of all its neighbors.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GetDiffusionThreshold">
            <summary>
                <para>Set/Get the difference threshold that stops diffusion.  when the difference between two pixel is greater than this threshold, the pixels are not diffused.  This causes diffusion to avoid sharp edges. If the GradientMagnitudeThreshold is set, then gradient magnitude is used  for comparison instead of pixel differences.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.SetDiffusionThreshold(System.Double)">
            <summary>
                <para>Set/Get the difference threshold that stops diffusion.  when the difference between two pixel is greater than this threshold, the pixels are not diffused.  This causes diffusion to avoid sharp edges. If the GradientMagnitudeThreshold is set, then gradient magnitude is used  for comparison instead of pixel differences.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.GetNumberOfIterations">
            <summary>
                <para>Get the number of iterations.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAnisotropicDiffusion2D.SetNumberOfIterations(System.Int32)">
            <summary>
                <para>This method sets the number of interations which also affects the input neighborhood needed to compute one output pixel.  Each iterations requires an extra pixel layer on the neighborhood.  This is only relavent when you are trying to stream or are requesting a sub extent of the "wholeExtent".</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencil.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencil.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageStencil.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencil.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencil.GetBackgroundColor">
            <summary>
                <para>Set the default color to use when the second input is not set. This is like SetBackgroundValue, but for multi-component images.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.SetBackgroundColor(System.Double[])">
            <summary>
                <para>Set the default color to use when the second input is not set. This is like SetBackgroundValue, but for multi-component images.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.SetBackgroundColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Set the default color to use when the second input is not set. This is like SetBackgroundValue, but for multi-component images.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.GetBackgroundValue">
            <summary>
                <para>Set the default output value to use when the second input is not set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.SetBackgroundValue(System.Double)">
            <summary>
                <para>Set the default output value to use when the second input is not set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.GetBackgroundInput">
            <summary>
                <para>NOTE: Not yet implemented, use SetBackgroundValue instead. Set the second input.  This image will be used for the 'outside' of the stencil.  If not set, the output voxels will be filled with BackgroundValue instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.SetBackgroundInput(vtk.vtkImageData)">
            <summary>
                <para>NOTE: Not yet implemented, use SetBackgroundValue instead. Set the second input.  This image will be used for the 'outside' of the stencil.  If not set, the output voxels will be filled with BackgroundValue instead.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.GetReverseStencil">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.ReverseStencilOff">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.ReverseStencilOn">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.SetReverseStencil(System.Int32)">
            <summary>
                <para>Reverse the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.GetStencil">
            <summary>
                <para>Specify the stencil to use.  The stencil can be created from a vtkImplicitFunction or a vtkPolyData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencil.SetStencil(vtk.vtkImageStencilData)">
            <summary>
                <para>Specify the stencil to use.  The stencil can be created from a vtkImplicitFunction or a vtkPolyData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageClip.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageClip.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageClip.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageClip.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageClip.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageClip.SetOutputWholeExtent(System.Int32,System.Int32)">
            <summary>
                <para>Hack set output by piece</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.ClipDataOff">
            <summary>
                <para>By default, ClipData is off, and only the WholeExtent is modified. the data's extent may actually be larger.  When this flag is on, the data extent will be no more than the OutputWholeExtent.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.ClipDataOn">
            <summary>
                <para>By default, ClipData is off, and only the WholeExtent is modified. the data's extent may actually be larger.  When this flag is on, the data extent will be no more than the OutputWholeExtent.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.GetClipData">
            <summary>
                <para>By default, ClipData is off, and only the WholeExtent is modified. the data's extent may actually be larger.  When this flag is on, the data extent will be no more than the OutputWholeExtent.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.SetClipData(System.Int32)">
            <summary>
                <para>By default, ClipData is off, and only the WholeExtent is modified. the data's extent may actually be larger.  When this flag is on, the data extent will be no more than the OutputWholeExtent.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.GetOutputWholeExtent(System.Int32[])">
            <summary>
                <para>The whole extent of the output has to be set explicitly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.SetOutputWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>The whole extent of the output has to be set explicitly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageClip.SetOutputWholeExtent(System.Int32[],vtk.vtkInformation)">
            <summary>
                <para>The whole extent of the output has to be set explicitly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFFT.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageFFT.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageFFT.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageFFT.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageFFT.SplitExtent(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
                <para>Used internally for streaming and threads.   Splits output update extent into num pieces. This method needs to be called num times.  Results must not overlap for consistent starting extent.  Subclass can override this method. This method returns the number of pieces resulting from a successful split.  This can be from 1 to "total".   If 1 is returned, the extent cannot be split.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageFourierFilter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageFourierFilter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageFourierFilter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageFourierFilter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageGridSource.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetDataOrigin">
            <summary>
                <para>Set/Get the origin of the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataOrigin(System.Double[])">
            <summary>
                <para>Set/Get the origin of the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the origin of the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetDataSpacing">
            <summary>
                <para>Set/Get the pixel spacing.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataSpacing(System.Double[])">
            <summary>
                <para>Set/Get the pixel spacing.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the pixel spacing.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetDataExtent">
            <summary>
                <para>Set/Get the extent of the whole output image, Default: (0,255,0,255,0,0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataExtent(System.Int32[])">
            <summary>
                <para>Set/Get the extent of the whole output image, Default: (0,255,0,255,0,0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the extent of the whole output image, Default: (0,255,0,255,0,0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetDataScalarTypeAsString">
            <summary>
                <para>Set/Get the extent of the whole output image, Default: (0,255,0,255,0,0)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetDataScalarType">
            <summary>
                <para>Set/Get the data type of pixels in the imported data. As a convenience, the OutputScalarType is set to the same value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataScalarTypeToUnsignedChar">
            <summary>
                <para>Set/Get the data type of pixels in the imported data. As a convenience, the OutputScalarType is set to the same value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataScalarTypeToUnsignedShort">
            <summary>
                <para>Set/Get the data type of pixels in the imported data. As a convenience, the OutputScalarType is set to the same value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataScalarTypeToShort">
            <summary>
                <para>Set/Get the data type of pixels in the imported data. As a convenience, the OutputScalarType is set to the same value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataScalarTypeToInt">
            <summary>
                <para>Set/Get the data type of pixels in the imported data. As a convenience, the OutputScalarType is set to the same value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataScalarTypeToDouble">
            <summary>
                <para>Set/Get the data type of pixels in the imported data. As a convenience, the OutputScalarType is set to the same value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetDataScalarType(System.Int32)">
            <summary>
                <para>Set/Get the data type of pixels in the imported data. As a convenience, the OutputScalarType is set to the same value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetFillValue">
            <summary>
                <para>Set the grey level of the fill. Default 0.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetFillValue(System.Double)">
            <summary>
                <para>Set the grey level of the fill. Default 0.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetLineValue">
            <summary>
                <para>Set the grey level of the lines. Default 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetLineValue(System.Double)">
            <summary>
                <para>Set the grey level of the lines. Default 1.0.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetGridOrigin">
            <summary>
                <para>Set/Get the grid origin, in ijk integer values.  Default (0,0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetGridOrigin(System.Int32[])">
            <summary>
                <para>Set/Get the grid origin, in ijk integer values.  Default (0,0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetGridOrigin(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the grid origin, in ijk integer values.  Default (0,0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.GetGridSpacing">
            <summary>
                <para>Set/Get the grid spacing in pixel units.  Default (10,10,0). A value of zero means no grid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetGridSpacing(System.Int32[])">
            <summary>
                <para>Set/Get the grid spacing in pixel units.  Default (10,10,0). A value of zero means no grid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGridSource.SetGridSpacing(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the grid spacing in pixel units.  Default (10,10,0). A value of zero means no grid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLuminance.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageLuminance.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageLuminance.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageLuminance.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageThreshold.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToSignedChar">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToChar">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToUnsignedShort">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToShort">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToUnsignedInt">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToInt">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToUnsignedLong">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToLong">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToFloat">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarTypeToDouble">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.GetOutputScalarType">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutputScalarType(System.Int32)">
            <summary>
                <para>Set the desired output scalar type to cast to</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.GetLowerThreshold">
            <summary>
                <para>Get the Upper and Lower thresholds.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.GetUpperThreshold">
            <summary>
                <para>Get the Upper and Lower thresholds.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.GetOutValue">
            <summary>
                <para>Replace the in range pixels with this value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetOutValue(System.Double)">
            <summary>
                <para>Replace the in range pixels with this value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ReplaceOutOff">
            <summary>
                <para>Determines whether to replace the pixel out of range with OutValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ReplaceOutOn">
            <summary>
                <para>Determines whether to replace the pixel out of range with OutValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.GetReplaceOut">
            <summary>
                <para>Determines whether to replace the pixel out of range with OutValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetReplaceOut(System.Int32)">
            <summary>
                <para>Determines whether to replace the pixel out of range with OutValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.GetInValue">
            <summary>
                <para>Replace the in range pixels with this value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetInValue(System.Double)">
            <summary>
                <para>Replace the in range pixels with this value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ReplaceInOff">
            <summary>
                <para>Determines whether to replace the pixel in range with InValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ReplaceInOn">
            <summary>
                <para>Determines whether to replace the pixel in range with InValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.GetReplaceIn">
            <summary>
                <para>Determines whether to replace the pixel in range with InValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.SetReplaceIn(System.Int32)">
            <summary>
                <para>Determines whether to replace the pixel in range with InValue</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ThresholdBetween(System.Double,System.Double)">
            <summary>
                <para>The values in a range (inclusive) match</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ThresholdByLower(System.Double)">
            <summary>
                <para>The values less than or equal to the value match.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageThreshold.ThresholdByUpper(System.Double)">
            <summary>
                <para>The values greater than or equal to the value match.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageNormalize.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageNormalize.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageNormalize.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageNormalize.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.GetExtentTranslator">
            <summary>
                <para>Get the extent translator that will be used to split the requests</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.SetExtentTranslator(vtk.vtkExtentTranslator)">
            <summary>
                <para>Get the extent translator that will be used to split the requests</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.GetNumberOfStreamDivisions">
            <summary>
                <para>Set how many pieces to divide the input into. void SetNumberOfStreamDivisions(int num); int GetNumberOfStreamDivisions();</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDataStreamer.SetNumberOfStreamDivisions(System.Int32)">
            <summary>
                <para>Set how many pieces to divide the input into. void SetNumberOfStreamDivisions(int num); int GetNumberOfStreamDivisions();</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageRange3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageRange3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageRange3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageRange3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageRange3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageRange3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageRange3D.SetKernelSize(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>This method sets the size of the neighborhood.  It also sets the  default middle of the neighborhood and computes the elliptical foot print.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.GetLowerThreshold">
            <summary>
                <para>Get the Upper and Lower thresholds.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.SetLowerThreshold(System.Double)">
            <summary>
                <para>Get the Upper and Lower thresholds.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.GetUpperThreshold">
            <summary>
                <para>Get the Upper and Lower thresholds.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.SetUpperThreshold(System.Double)">
            <summary>
                <para>Get the Upper and Lower thresholds.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.ThresholdBetween(System.Double,System.Double)">
            <summary>
                <para>The values in a range (inclusive) match</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.ThresholdByLower(System.Double)">
            <summary>
                <para>The values less than or equal to the value match.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.ThresholdByUpper(System.Double)">
            <summary>
                <para>The values greater than or equal to the value match.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.GetInput">
            <summary>
                <para>Specify the image data to convert into a stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageToImageStencil.SetInput(vtk.vtkImageData)">
            <summary>
                <para>Specify the image data to convert into a stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilSource.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageStencilSource.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageStencilSource.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilSource.GetOutput">
            <summary>
                <para>Get or set the output for this source.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilSource.SetOutput(vtk.vtkImageStencilData)">
            <summary>
                <para>Get or set the output for this source.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMagnify.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.InterpolateOff">
            <summary>
                <para>Turn interpolation on and off (pixel replication is used when off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.InterpolateOn">
            <summary>
                <para>Turn interpolation on and off (pixel replication is used when off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.GetInterpolate">
            <summary>
                <para>Turn interpolation on and off (pixel replication is used when off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.SetInterpolate(System.Int32)">
            <summary>
                <para>Turn interpolation on and off (pixel replication is used when off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.GetMagnificationFactors">
            <summary>
                <para>Set/Get the integer magnification factors in the i-j-k directions.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.SetMagnificationFactors(System.Int32[])">
            <summary>
                <para>Set/Get the integer magnification factors in the i-j-k directions.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMagnify.SetMagnificationFactors(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the integer magnification factors in the i-j-k directions.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.SetKernelSize(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>This method sets the size of the neighborhood.  It also sets the  default middle of the neighborhood and computes the elliptical foot print.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.SafeDownCast(vtk.vtkObject)">
            <summary>
                <para>Construct an instance of vtkImageContinuousErode3D filter. By default zero values are eroded.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.NewInstance">
            <summary>
                <para>Construct an instance of vtkImageContinuousErode3D filter. By default zero values are eroded.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.IsA(System.String)">
            <summary>
                <para>Construct an instance of vtkImageContinuousErode3D filter. By default zero values are eroded.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageContinuousErode3D.GetClassName">
            <summary>
                <para>Construct an instance of vtkImageContinuousErode3D filter. By default zero values are eroded.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageDifference.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageDifference.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageDifference.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageDifference.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageDifference.AveragingOff">
            <summary>
                <para>Specify whether the comparison will include comparison of averaged 3x3 data between the images. For graphics renderings you normally would leave this on. For imaging operations it should be off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.AveragingOn">
            <summary>
                <para>Specify whether the comparison will include comparison of averaged 3x3 data between the images. For graphics renderings you normally would leave this on. For imaging operations it should be off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetAveraging">
            <summary>
                <para>Specify whether the comparison will include comparison of averaged 3x3 data between the images. For graphics renderings you normally would leave this on. For imaging operations it should be off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.SetAveraging(System.Int32)">
            <summary>
                <para>Specify whether the comparison will include comparison of averaged 3x3 data between the images. For graphics renderings you normally would leave this on. For imaging operations it should be off.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.AllowShiftOff">
            <summary>
                <para>Specify whether the comparison will allow a shift of one pixel between the images.  If set, then the minimum difference between input images will be used to determine the difference. Otherwise, the difference is computed directly between pixels of identical row/column values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.AllowShiftOn">
            <summary>
                <para>Specify whether the comparison will allow a shift of one pixel between the images.  If set, then the minimum difference between input images will be used to determine the difference. Otherwise, the difference is computed directly between pixels of identical row/column values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetAllowShift">
            <summary>
                <para>Specify whether the comparison will allow a shift of one pixel between the images.  If set, then the minimum difference between input images will be used to determine the difference. Otherwise, the difference is computed directly between pixels of identical row/column values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.SetAllowShift(System.Int32)">
            <summary>
                <para>Specify whether the comparison will allow a shift of one pixel between the images.  If set, then the minimum difference between input images will be used to determine the difference. Otherwise, the difference is computed directly between pixels of identical row/column values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetThreshold">
            <summary>
                <para>Specify a threshold tolerance for pixel differences.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.SetThreshold(System.Int32)">
            <summary>
                <para>Specify a threshold tolerance for pixel differences.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetThresholdedError(System.Double[])">
            <summary>
                <para>Return the total thresholded error in comparing the two images. The thresholded error is the error for a given pixel minus the threshold and clamped at a minimum of zero. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetThresholdedError">
            <summary>
                <para>Return the total thresholded error in comparing the two images. The thresholded error is the error for a given pixel minus the threshold and clamped at a minimum of zero. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetError(System.Double[])">
            <summary>
                <para>Return the total error in comparing the two images.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetError">
            <summary>
                <para>Return the total error in comparing the two images.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.GetImage">
            <summary>
                <para>Specify the Image to compare the input to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDifference.SetImage(vtk.vtkDataObject)">
            <summary>
                <para>Specify the Image to compare the input to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkSimpleImageFilterExample.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkSimpleImageFilterExample.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkSimpleImageFilterExample.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkSimpleImageFilterExample.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageSobel2D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSobel2D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageSobel2D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSobel2D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSobel2D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSobel2D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageConstantPad.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageConstantPad.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageConstantPad.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageConstantPad.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageConstantPad.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageConstantPad.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageConstantPad.GetConstant">
            <summary>
                <para>Set/Get the pad value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConstantPad.SetConstant(System.Double)">
            <summary>
                <para>Set/Get the pad value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.GetMaximum">
            <summary>
                <para>Hue is an angle. Maximum specifies when it maps back to 0. HueMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input. Maximum also specifies the maximum of the Saturation, and R, G, B.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageHSIToRGB.SetMaximum(System.Double)">
            <summary>
                <para>Hue is an angle. Maximum specifies when it maps back to 0. HueMaximum defaults to 255 instead of 2PI, because unsigned char is expected as input. Maximum also specifies the maximum of the Saturation, and R, G, B.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.GetYCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.GetXCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.GetCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.SetZCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.SetYCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.SetXCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.SetCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.SetCutOff(System.Double[])">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealHighPass.SetCutOff(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.GetTranslation">
            <summary>
                <para>Delta to change "WholeExtent". -1 changes 0-&gt;10 to -1-&gt;9.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.SetTranslation(System.Int32[])">
            <summary>
                <para>Delta to change "WholeExtent". -1 changes 0-&gt;10 to -1-&gt;9.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageTranslateExtent.SetTranslation(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Delta to change "WholeExtent". -1 changes 0-&gt;10 to -1-&gt;9.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageAppend.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageAppend.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageAppend.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageAppend.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageAppend.PreserveExtentsOff">
            <summary>
                <para>By default "PreserveExtents" is off and the append axis is used.   When "PreseveExtents" is on, the extent of the inputs is used to  place the image in the output.  The whole extent of the output is  the union of the input whole extents.  Any portion of the  output not covered by the inputs is set to zero.  The origin and  spacing is taken from the first input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.PreserveExtentsOn">
            <summary>
                <para>By default "PreserveExtents" is off and the append axis is used.   When "PreseveExtents" is on, the extent of the inputs is used to  place the image in the output.  The whole extent of the output is  the union of the input whole extents.  Any portion of the  output not covered by the inputs is set to zero.  The origin and  spacing is taken from the first input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.GetPreserveExtents">
            <summary>
                <para>By default "PreserveExtents" is off and the append axis is used.   When "PreseveExtents" is on, the extent of the inputs is used to  place the image in the output.  The whole extent of the output is  the union of the input whole extents.  Any portion of the  output not covered by the inputs is set to zero.  The origin and  spacing is taken from the first input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.SetPreserveExtents(System.Int32)">
            <summary>
                <para>By default "PreserveExtents" is off and the append axis is used.   When "PreseveExtents" is on, the extent of the inputs is used to  place the image in the output.  The whole extent of the output is  the union of the input whole extents.  Any portion of the  output not covered by the inputs is set to zero.  The origin and  spacing is taken from the first input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.GetAppendAxis">
            <summary>
                <para>This axis is expanded to hold the multiple images.   The default AppendAxis is the X axis. If you want to create a volue from a series of XY images, then you should set the AppendAxis to 2 (Z axis).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.SetAppendAxis(System.Int32)">
            <summary>
                <para>This axis is expanded to hold the multiple images.   The default AppendAxis is the X axis. If you want to create a volue from a series of XY images, then you should set the AppendAxis to 2 (Z axis).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.GetNumberOfInputs">
            <summary>
                <para>Get the number of inputs to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetNumberOfInputConnections(0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.GetInput">
            <summary>
                <para>Get one input to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.GetInput(System.Int32)">
            <summary>
                <para>Get one input to this filter. This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.SetInput(vtk.vtkDataObject)">
            <summary>
                <para>Set an Input of this filter.  This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::AddInputConnection(0, data).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageAppend.SetInput(System.Int32,vtk.vtkDataObject)">
            <summary>
                <para>Set an Input of this filter.  This method is only for support of old-style pipeline connections.  When writing new code you should use vtkAlgorithm::AddInputConnection(0, data).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.GetStandardDeviation">
            <summary>
                <para>Set/Get the standard deviation of the gaussian</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.SetStandardDeviation(System.Double)">
            <summary>
                <para>Set/Get the standard deviation of the gaussian</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.GetMaximum">
            <summary>
                <para>Set/Get the Maximum value of the gaussian</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.SetMaximum(System.Double)">
            <summary>
                <para>Set/Get the Maximum value of the gaussian</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.GetCenter">
            <summary>
                <para>Set/Get the center of the Gaussian.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.SetCenter(System.Double[])">
            <summary>
                <para>Set/Get the center of the Gaussian.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.SetCenter(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the center of the Gaussian.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGaussianSource.SetWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the extent of the whole output image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageResample.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageResample.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageResample.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageResample.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageResample.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageResample.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageResample.GetDimensionality">
            <summary>
                <para>Dimensionality is the number of axes which are considered during execution. To process images dimensionality would be set to 2. This has the same effect as setting the magnification of the third axis to 1.0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageResample.SetDimensionality(System.Int32)">
            <summary>
                <para>Dimensionality is the number of axes which are considered during execution. To process images dimensionality would be set to 2. This has the same effect as setting the magnification of the third axis to 1.0</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageResample.GetAxisMagnificationFactor(System.Int32,vtk.vtkInformation)">
            <summary>
                <para>Set/Get Magnification factors. Zero is a reserved value indicating values have not been computed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageResample.SetAxisMagnificationFactor(System.Int32,System.Double)">
            <summary>
                <para>Set/Get Magnification factors. Zero is a reserved value indicating values have not been computed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageResample.SetAxisOutputSpacing(System.Int32,System.Double)">
            <summary>
                <para>Set desired spacing.   Zero is a reserved value indicating spacing has not been set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageConnector.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageConnector.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageConnector.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageConnector.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageConnector.MarkData(vtk.vtkImageData,System.Int32,System.Int32[])">
            <summary>
                <para>Input a data of 0's and "UnconnectedValue"s. Seeds of this object are used to find connected pixels.  All pixels connected to seeds are set to ConnectedValue.  The data has to be unsigned char.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConnector.GetUnconnectedValue">
            <summary>
                <para>Values used by the MarkRegion method</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConnector.SetUnconnectedValue(System.Byte)">
            <summary>
                <para>Values used by the MarkRegion method</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConnector.GetConnectedValue">
            <summary>
                <para>Values used by the MarkRegion method</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageConnector.SetConnectedValue(System.Byte)">
            <summary>
                <para>Values used by the MarkRegion method</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.GetDimensionality">
            <summary>
                <para>Set the number of axes to use in connectivity.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.SetDimensionality(System.Int32)">
            <summary>
                <para>Set the number of axes to use in connectivity.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.GetConnector">
            <summary>
                <para>Get the vtkImageCOnnector used by this filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.GetOutputUnconnectedValue">
            <summary>
                <para>Set/Get the value to set unconnected pixels to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.SetOutputUnconnectedValue(System.Int32)">
            <summary>
                <para>Set/Get the value to set unconnected pixels to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.GetOutputConnectedValue">
            <summary>
                <para>Set/Get the value to set connected pixels to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.SetOutputConnectedValue(System.Int32)">
            <summary>
                <para>Set/Get the value to set connected pixels to.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.GetInputConnectValue">
            <summary>
                <para>Set/Get what value is considered as connecting pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.SetInputConnectValue(System.Int32)">
            <summary>
                <para>Set/Get what value is considered as connecting pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.AddSeed(System.Int32,System.Int32)">
            <summary>
                <para>Methods for manipulating the seed pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.AddSeed(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Methods for manipulating the seed pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.AddSeed(System.Int32,System.Int32[])">
            <summary>
                <para>Methods for manipulating the seed pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSeedConnectivity.RemoveAllSeeds">
            <summary>
                <para>Methods for manipulating the seed pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.ComputeModelBounds(vtk.vtkDataSet,vtk.vtkImageData,vtk.vtkInformation)">
            <summary>
                <para>Compute the size of the sample bounding box automatically from the input data. This is an internal helper function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetNullValue">
            <summary>
                <para>Set the Null value for output points not receiving a contribution from the input points. (This is the initial value of the voxel samples.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetNullValue(System.Double)">
            <summary>
                <para>Set the Null value for output points not receiving a contribution from the input points. (This is the initial value of the voxel samples.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetAccumulationModeAsString">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetAccumulationModeToSum">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetAccumulationModeToMax">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetAccumulationModeToMin">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetAccumulationMode">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetAccumulationModeMaxValue">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetAccumulationModeMinValue">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetAccumulationMode(System.Int32)">
            <summary>
                <para>Specify the scalar accumulation mode. This mode expresses how scalar values are combined when splats are overlapped. The Max mode acts like a set union operation and is the most commonly used; the Min mode acts like a set intersection, and the sum is just weird.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetCapValue">
            <summary>
                <para>Specify the cap value to use. (This instance variable only has effect  if the ivar Capping is on.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetCapValue(System.Double)">
            <summary>
                <para>Specify the cap value to use. (This instance variable only has effect  if the ivar Capping is on.)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.CappingOff">
            <summary>
                <para>Turn on/off the capping of the outer boundary of the volume to a specified cap value. This can be used to close surfaces (after iso-surfacing) and create other effects.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.CappingOn">
            <summary>
                <para>Turn on/off the capping of the outer boundary of the volume to a specified cap value. This can be used to close surfaces (after iso-surfacing) and create other effects.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetCapping">
            <summary>
                <para>Turn on/off the capping of the outer boundary of the volume to a specified cap value. This can be used to close surfaces (after iso-surfacing) and create other effects.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetCapping(System.Int32)">
            <summary>
                <para>Turn on/off the capping of the outer boundary of the volume to a specified cap value. This can be used to close surfaces (after iso-surfacing) and create other effects.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.ScalarWarpingOff">
            <summary>
                <para>Turn on/off the scaling of splats by scalar value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.ScalarWarpingOn">
            <summary>
                <para>Turn on/off the scaling of splats by scalar value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetScalarWarping">
            <summary>
                <para>Turn on/off the scaling of splats by scalar value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetScalarWarping(System.Int32)">
            <summary>
                <para>Turn on/off the scaling of splats by scalar value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetEccentricity">
            <summary>
                <para>Control the shape of elliptical splatting. Eccentricity is the ratio of the major axis (aligned along normal) to the minor (axes) aligned along other two axes. So Eccentricity &gt; 1 creates needles with the long axis in the direction of the normal; Eccentricity&lt;1 creates pancakes perpendicular to the normal vector.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetEccentricityMaxValue">
            <summary>
                <para>Control the shape of elliptical splatting. Eccentricity is the ratio of the major axis (aligned along normal) to the minor (axes) aligned along other two axes. So Eccentricity &gt; 1 creates needles with the long axis in the direction of the normal; Eccentricity&lt;1 creates pancakes perpendicular to the normal vector.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetEccentricityMinValue">
            <summary>
                <para>Control the shape of elliptical splatting. Eccentricity is the ratio of the major axis (aligned along normal) to the minor (axes) aligned along other two axes. So Eccentricity &gt; 1 creates needles with the long axis in the direction of the normal; Eccentricity&lt;1 creates pancakes perpendicular to the normal vector.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetEccentricity(System.Double)">
            <summary>
                <para>Control the shape of elliptical splatting. Eccentricity is the ratio of the major axis (aligned along normal) to the minor (axes) aligned along other two axes. So Eccentricity &gt; 1 creates needles with the long axis in the direction of the normal; Eccentricity&lt;1 creates pancakes perpendicular to the normal vector.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.NormalWarpingOff">
            <summary>
                <para>Turn on/off the generation of elliptical splats. If normal warping is on, then the input normals affect the distribution of the splat. This boolean is used in combination with the Eccentricity ivar.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.NormalWarpingOn">
            <summary>
                <para>Turn on/off the generation of elliptical splats. If normal warping is on, then the input normals affect the distribution of the splat. This boolean is used in combination with the Eccentricity ivar.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetNormalWarping">
            <summary>
                <para>Turn on/off the generation of elliptical splats. If normal warping is on, then the input normals affect the distribution of the splat. This boolean is used in combination with the Eccentricity ivar.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetNormalWarping(System.Int32)">
            <summary>
                <para>Turn on/off the generation of elliptical splats. If normal warping is on, then the input normals affect the distribution of the splat. This boolean is used in combination with the Eccentricity ivar.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetExponentFactor">
            <summary>
                <para>Set / get the sharpness of decay of the splats. This is the exponent constant in the Gaussian equation. Normally this is a negative value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetExponentFactor(System.Double)">
            <summary>
                <para>Set / get the sharpness of decay of the splats. This is the exponent constant in the Gaussian equation. Normally this is a negative value.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetScaleFactor">
            <summary>
                <para>Multiply Gaussian splat distribution by this value. If ScalarWarping is on, then the Scalar value will be multiplied by the ScaleFactor times the Gaussian function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetScaleFactorMaxValue">
            <summary>
                <para>Multiply Gaussian splat distribution by this value. If ScalarWarping is on, then the Scalar value will be multiplied by the ScaleFactor times the Gaussian function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetScaleFactorMinValue">
            <summary>
                <para>Multiply Gaussian splat distribution by this value. If ScalarWarping is on, then the Scalar value will be multiplied by the ScaleFactor times the Gaussian function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetScaleFactor(System.Double)">
            <summary>
                <para>Multiply Gaussian splat distribution by this value. If ScalarWarping is on, then the Scalar value will be multiplied by the ScaleFactor times the Gaussian function.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetRadius">
            <summary>
                <para>Set / get the radius of propagation of the splat. This value is expressed as a percentage of the length of the longest side of the sampling volume. Smaller numbers greatly reduce execution time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetRadiusMaxValue">
            <summary>
                <para>Set / get the radius of propagation of the splat. This value is expressed as a percentage of the length of the longest side of the sampling volume. Smaller numbers greatly reduce execution time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetRadiusMinValue">
            <summary>
                <para>Set / get the radius of propagation of the splat. This value is expressed as a percentage of the length of the longest side of the sampling volume. Smaller numbers greatly reduce execution time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetRadius(System.Double)">
            <summary>
                <para>Set / get the radius of propagation of the splat. This value is expressed as a percentage of the length of the longest side of the sampling volume. Smaller numbers greatly reduce execution time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetModelBounds">
            <summary>
                <para>Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in which the sampling is performed. If any of the (min,max) bounds values are min &gt;= max, then the bounds will be computed automatically from the input data. Otherwise, the user-specified bounds will be used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetModelBounds(System.Double[])">
            <summary>
                <para>Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in which the sampling is performed. If any of the (min,max) bounds values are min &gt;= max, then the bounds will be computed automatically from the input data. Otherwise, the user-specified bounds will be used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetModelBounds(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in which the sampling is performed. If any of the (min,max) bounds values are min &gt;= max, then the bounds will be computed automatically from the input data. Otherwise, the user-specified bounds will be used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.GetSampleDimensions">
            <summary>
                <para>Set / get the dimensions of the sampling structured point set. Higher values produce better results but are much slower.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetSampleDimensions(System.Int32[])">
            <summary>
                <para>Set / get the dimensions of the sampling structured point set. Higher values produce better results but are much slower.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkGaussianSplatter.SetSampleDimensions(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set / get the dimensions of the sampling structured point set. Higher values produce better results but are much slower.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.SetInput1(vtk.vtkDataObject)">
            <summary>
                <para>Set the two inputs to this filter</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.GetNumberOfDivisions">
            <summary>
                <para>Set/Get the number of divisions along each axis.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.SetNumberOfDivisions(System.Int32[])">
            <summary>
                <para>Set/Get the number of divisions along each axis.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageCheckerboard.SetNumberOfDivisions(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the number of divisions along each axis.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageWrapPad.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageWrapPad.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageWrapPad.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageWrapPad.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.GetAmplitude">
            <summary>
                <para>Set/Get the magnitude of the sinusoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.SetAmplitude(System.Double)">
            <summary>
                <para>Set/Get the magnitude of the sinusoid.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.GetPhase">
            <summary>
                <para>Set/Get the phase: 0-&gt;2Pi.  0 =&gt; Cosine, pi/2 =&gt; Sine.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.SetPhase(System.Double)">
            <summary>
                <para>Set/Get the phase: 0-&gt;2Pi.  0 =&gt; Cosine, pi/2 =&gt; Sine.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.GetPeriod">
            <summary>
                <para>Set/Get the period of the sinusoid in pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.SetPeriod(System.Double)">
            <summary>
                <para>Set/Get the period of the sinusoid in pixels.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.GetDirection">
            <summary>
                <para>Set/Get the direction vector which determines the sinusoidal orientation. The magnitude is ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.SetDirection(System.Double[])">
            <summary>
                <para>Set/Get the direction vector which determines the sinusoidal orientation. The magnitude is ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.SetDirection(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the direction vector which determines the sinusoidal orientation. The magnitude is ignored.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSinusoidSource.SetWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set/Get the extent of the whole output image.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageImport.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageImport.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageImport.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageImport.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageImport.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageImport.LegacyCheckWholeExtent">
            <summary>
                <para>Invoke the appropriate callbacks</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.InvokeExecuteDataCallbacks">
            <summary>
                <para>Invoke the appropriate callbacks</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.InvokeExecuteInformationCallbacks">
            <summary>
                <para>Invoke the appropriate callbacks</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.InvokeUpdateInformationCallbacks">
            <summary>
                <para>Invoke the appropriate callbacks</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.InvokePipelineModifiedCallbacks">
            <summary>
                <para>Invoke the appropriate callbacks</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetWholeExtent">
            <summary>
                <para>Get/Set the whole extent of the image.  This is the largest possible extent.  Set the DataExtent to the extent of the image in the buffer pointed to by the ImportVoidPointer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetWholeExtent(System.Int32[])">
            <summary>
                <para>Get/Set the whole extent of the image.  This is the largest possible extent.  Set the DataExtent to the extent of the image in the buffer pointed to by the ImportVoidPointer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Get/Set the whole extent of the image.  This is the largest possible extent.  Set the DataExtent to the extent of the image in the buffer pointed to by the ImportVoidPointer.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetDataOrigin">
            <summary>
                <para>Set/Get the origin of the data, i.e. the coordinates (usually in mm) of voxel (0,0,0).  Default: (0.0, 0.0, 0.0). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataOrigin(System.Double[])">
            <summary>
                <para>Set/Get the origin of the data, i.e. the coordinates (usually in mm) of voxel (0,0,0).  Default: (0.0, 0.0, 0.0). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the origin of the data, i.e. the coordinates (usually in mm) of voxel (0,0,0).  Default: (0.0, 0.0, 0.0). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetDataSpacing">
            <summary>
                <para>Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataSpacing(System.Double[])">
            <summary>
                <para>Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataExtentToWholeExtent">
            <summary>
                <para>Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetDataExtent">
            <summary>
                <para>Get/Set the extent of the data buffer.  The dimensions of your data must be equal to (extent[1]-extent[0]+1) * (extent[3]-extent[2]+1) *  (extent[5]-DataExtent[4]+1).  For example, for a 2D image use (0,width-1, 0,height-1, 0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataExtent(System.Int32[])">
            <summary>
                <para>Get/Set the extent of the data buffer.  The dimensions of your data must be equal to (extent[1]-extent[0]+1) * (extent[3]-extent[2]+1) *  (extent[5]-DataExtent[4]+1).  For example, for a 2D image use (0,width-1, 0,height-1, 0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Get/Set the extent of the data buffer.  The dimensions of your data must be equal to (extent[1]-extent[0]+1) * (extent[3]-extent[2]+1) *  (extent[5]-DataExtent[4]+1).  For example, for a 2D image use (0,width-1, 0,height-1, 0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetNumberOfScalarComponents">
            <summary>
                <para>Set/Get the number of scalar components, for RGB images this must be 3. Default: 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetNumberOfScalarComponents(System.Int32)">
            <summary>
                <para>Set/Get the number of scalar components, for RGB images this must be 3. Default: 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetDataScalarTypeAsString">
            <summary>
                <para>Set/Get the number of scalar components, for RGB images this must be 3. Default: 1.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetDataScalarType">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataScalarTypeToUnsignedChar">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataScalarTypeToUnsignedShort">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataScalarTypeToShort">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataScalarTypeToInt">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataScalarTypeToFloat">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataScalarTypeToDouble">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetDataScalarType(System.Int32)">
            <summary>
                <para>Set/Get the data type of pixels in the imported data.  This is used as the scalar type of the Output.  Default: Short.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetImportVoidPointer(System.IntPtr,System.Int32)">
            <summary>
                <para>Set the pointer from which the image data is imported.  Set save to 1  (the default) unless you want VTK to delete the array via C++ delete when the vtkImageImport object is deallocated.  VTK will not make its own copy of the data, it will access the data directly from the supplied array.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.GetImportVoidPointer">
            <summary>
                <para>Set the pointer from which the image data is imported.  VTK will not make its own copy of the data, it will access the data directly from the supplied array.  VTK will not attempt to delete the data nor modify the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.SetImportVoidPointer(System.IntPtr)">
            <summary>
                <para>Set the pointer from which the image data is imported.  VTK will not make its own copy of the data, it will access the data directly from the supplied array.  VTK will not attempt to delete the data nor modify the data.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageImport.CopyImportVoidPointer(System.IntPtr,System.Int32)">
            <summary>
                <para>Import data and make an internal copy of it.  If you do not want VTK to copy the data, then use SetImportVoidPointer instead (do not use both).  Give the size of the data array in bytes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.GetYCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.GetXCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.GetCutOff">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.SetZCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.SetYCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.SetXCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.SetCutOff(System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.SetCutOff(System.Double[])">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIdealLowPass.SetCutOff(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set/Get the cutoff frequency for each axis. The values are specified in the order X, Y, Z, Time. Units: Cycles per world unit (as defined by the data spacing).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDotProduct.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageDotProduct.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageDotProduct.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageDotProduct.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageDotProduct.SetInput1(vtk.vtkDataObject)">
            <summary>
                <para>Set the two inputs to this filter</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageSpatialFilter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialFilter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialFilter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSpatialFilter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSpatialFilter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialFilter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialFilter.GetKernelSize">
            <summary>
                <para>Get the Kernel middle.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.GetErodeValue">
            <summary>
                <para>Set/Get the Dilate and Erode values to be used by this filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.SetErodeValue(System.Double)">
            <summary>
                <para>Set/Get the Dilate and Erode values to be used by this filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.GetDilateValue">
            <summary>
                <para>Set/Get the Dilate and Erode values to be used by this filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.SetDilateValue(System.Double)">
            <summary>
                <para>Set/Get the Dilate and Erode values to be used by this filter.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.SetKernelSize(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>This method sets the size of the neighborhood.  It also sets the  default middle of the neighborhood and computes the elliptical foot print.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.SafeDownCast(vtk.vtkObject)">
            <summary>
                <para>Construct an instance of vtkImageDilateErode3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.NewInstance">
            <summary>
                <para>Construct an instance of vtkImageDilateErode3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.IsA(System.String)">
            <summary>
                <para>Construct an instance of vtkImageDilateErode3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDilateErode3D.GetClassName">
            <summary>
                <para>Construct an instance of vtkImageDilateErode3D filter. By default zero values are dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.GetFilter1">
            <summary>
                <para>Needed for Progress functions</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.GetFilter0">
            <summary>
                <para>Needed for Progress functions</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.GetCloseValue">
            <summary>
                <para>Determines the value that will closed. Close value is first dilated, and then eroded</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.SetCloseValue(System.Double)">
            <summary>
                <para>Determines the value that will closed. Close value is first dilated, and then eroded</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.GetOpenValue">
            <summary>
                <para>Determines the value that will opened.   Open value is first eroded, and then dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.SetOpenValue(System.Double)">
            <summary>
                <para>Determines the value that will opened.   Open value is first eroded, and then dilated.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.SetKernelSize(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Selects the size of gaps or objects removed.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.Modified">
            <summary>
                <para>Pass modified message to sub filters.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.DebugOff">
            <summary>
                <para>Turn debugging output on. (in sub filters also)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.DebugOn">
            <summary>
                <para>Turn debugging output on. (in sub filters also)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.GetMTime">
            <summary>
                <para>This method considers the sub filters MTimes when computing this objects modified time.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.SafeDownCast(vtk.vtkObject)">
            <summary>
                <para>Default open value is 0, and default close value is 255.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.NewInstance">
            <summary>
                <para>Default open value is 0, and default close value is 255.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.IsA(System.String)">
            <summary>
                <para>Default open value is 0, and default close value is 255.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageOpenClose3D.GetClassName">
            <summary>
                <para>Default open value is 0, and default close value is 255.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageVariance3D.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageVariance3D.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageVariance3D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageVariance3D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageVariance3D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageVariance3D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageVariance3D.SetKernelSize(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>This method sets the size of the neighborhood.  It also sets the default middle of the neighborhood and computes the Elliptical foot print.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageHybridMedian2D.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageHybridMedian2D.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageHybridMedian2D.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageHybridMedian2D.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialAlgorithm.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageSpatialAlgorithm.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageSpatialAlgorithm.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialAlgorithm.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageSpatialAlgorithm.GetKernelSize">
            <summary>
                <para>Get the Kernel middle.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageLaplacian.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.GetDimensionality">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.GetDimensionalityMaxValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.GetDimensionalityMinValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageLaplacian.SetDimensionality(System.Int32)">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageMirrorPad.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageMirrorPad.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageMirrorPad.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageMirrorPad.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImagePadFilter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.GetOutputNumberOfScalarComponents">
            <summary>
                <para>Set/Get the number of output scalar components.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.SetOutputNumberOfScalarComponents(System.Int32)">
            <summary>
                <para>Set/Get the number of output scalar components.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.GetOutputWholeExtent">
            <summary>
                <para>Set/Get the number of output scalar components.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.GetOutputWholeExtent(System.Int32[])">
            <summary>
                <para>The image extent of the output has to be set explicitly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.SetOutputWholeExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>The image extent of the output has to be set explicitly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImagePadFilter.SetOutputWholeExtent(System.Int32[])">
            <summary>
                <para>The image extent of the output has to be set explicitly.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageReslice.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageStencilData.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.TriggerAsynchronousUpdate">
            <summary>
                <para>WARNING: INTERNAL METHOD - NOT FOR GENERAL USE.  THIS METHOD IS PART OF THE PIPELINE UPDATE FUNCTIONALITY. Propagate back up the pipeline for ports and trigger the update on the other side of the port to allow for asynchronous parallel processing in the pipeline. This propagation may early terminate based on the PipelineMTime.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.PropagateUpdateExtent">
            <summary>
                <para>WARNING: INTERNAL METHOD - NOT FOR GENERAL USE.  THIS METHOD IS PART OF THE PIPELINE UPDATE FUNCTIONALITY. The update extent for this object is propagated up the pipeline. This propagation may early terminate based on the PipelineMTime.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.UpdateData">
            <summary>
                <para>WARNING: INTERNAL METHOD - NOT FOR GENERAL USE.  THIS METHOD IS PART OF THE PIPELINE UPDATE FUNCTIONALITY. Propagate the update back up the pipeline, and perform the actual  work of updating on the way down. When the propagate arrives at a port, block and wait for the asynchronous update to finish on the other side. This propagation may early terminate based on the PipelineMTime.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.AllocateExtents">
            <summary>
                <para>Allocate space for the sub-extents.  This is called by vtkImageStencilSource.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetOldOrigin">
            <summary>
                <para>Save the previous data origin.  This should be called only by vtkImageStencilSource.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetOldOrigin(System.Double[])">
            <summary>
                <para>Save the previous data origin.  This should be called only by vtkImageStencilSource.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetOldOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Save the previous data origin.  This should be called only by vtkImageStencilSource.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetOldSpacing">
            <summary>
                <para>Save the previous data spacing.  This should be called only by vtkImageStencilSource.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetOldSpacing(System.Double[])">
            <summary>
                <para>Save the previous data spacing.  This should be called only by vtkImageStencilSource.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetOldSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Save the previous data spacing.  This should be called only by vtkImageStencilSource.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetExtent">
            <summary>
                <para>Set the extent of the data.  This is should be called only  by vtkImageStencilSource, as it is part of the basic pipeline functionality.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set the extent of the data.  This is should be called only  by vtkImageStencilSource, as it is part of the basic pipeline functionality.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetExtent(System.Int32[])">
            <summary>
                <para>Set the extent of the data.  This is should be called only  by vtkImageStencilSource, as it is part of the basic pipeline functionality.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetOrigin">
            <summary>
                <para>Set the desired origin for the stencil. This must be called before the stencil is Updated, ideally  in the ExecuteInformation method of the imaging filter that is using the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetOrigin(System.Double[])">
            <summary>
                <para>Set the desired origin for the stencil. This must be called before the stencil is Updated, ideally  in the ExecuteInformation method of the imaging filter that is using the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set the desired origin for the stencil. This must be called before the stencil is Updated, ideally  in the ExecuteInformation method of the imaging filter that is using the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetSpacing">
            <summary>
                <para>Set the desired spacing for the stencil. This must be called before the stencil is Updated, ideally  in the ExecuteInformation method of the imaging filter that is using the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetSpacing(System.Double[])">
            <summary>
                <para>Set the desired spacing for the stencil. This must be called before the stencil is Updated, ideally  in the ExecuteInformation method of the imaging filter that is using the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.SetSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set the desired spacing for the stencil. This must be called before the stencil is Updated, ideally  in the ExecuteInformation method of the imaging filter that is using the stencil.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.InsertNextExtent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>This method is used by vtkImageStencilDataSource to add an x  sub extent [r1,r2] for the x row (yIdx,zIdx).  The specified sub extent must not intersect any other sub extents along the same x row. As well, r1 and r2 must both be within the total x extent [Extent[0],Extent[1]].</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetNextExtent(System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
                <para>Given the total output x extent [xMin,xMax] and the current y, z indices, return each sub-extent [r1,r2] that lies within within the unclipped region in sequence.  A value of '0' is returned if no more sub-extents are available.  The variable 'iter' must be initialized to zero before the first call, unless you want the complementary sub-extents in which case you must initialize 'iter' to -1.  The variable 'iter' is used internally to keep track of which sub-extent should be returned next.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetExtentType">
            <summary>
                <para>The extent type is 3D, just like vtkImageData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageStencilData.GetDataObjectType">
            <summary>
                <para>The extent type is 3D, just like vtkImageData.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageReslice.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageReslice.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetStencil">
            <summary>
                <para>Use a stencil to limit the calculations to a specific region of the output.  Portions of the output that are 'outside' the stencil will be cleared to the background color.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetStencil(vtk.vtkImageStencilData)">
            <summary>
                <para>Use a stencil to limit the calculations to a specific region of the output.  Portions of the output that are 'outside' the stencil will be cleared to the background color.  </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetInterpolate">
            <summary>
                <para>Convenient methods for switching between nearest-neighbor and linear interpolation.   InterpolateOn() is equivalent to SetInterpolationModeToLinear() and InterpolateOff() is equivalent to SetInterpolationModeToNearestNeighbor(). You should not use these methods if you use the SetInterpolationMode methods.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.InterpolateOff">
            <summary>
                <para>Convenient methods for switching between nearest-neighbor and linear interpolation.   InterpolateOn() is equivalent to SetInterpolationModeToLinear() and InterpolateOff() is equivalent to SetInterpolationModeToNearestNeighbor(). You should not use these methods if you use the SetInterpolationMode methods.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.InterpolateOn">
            <summary>
                <para>Convenient methods for switching between nearest-neighbor and linear interpolation.   InterpolateOn() is equivalent to SetInterpolationModeToLinear() and InterpolateOff() is equivalent to SetInterpolationModeToNearestNeighbor(). You should not use these methods if you use the SetInterpolationMode methods.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetInterpolate(System.Int32)">
            <summary>
                <para>Convenient methods for switching between nearest-neighbor and linear interpolation.   InterpolateOn() is equivalent to SetInterpolationModeToLinear() and InterpolateOff() is equivalent to SetInterpolationModeToNearestNeighbor(). You should not use these methods if you use the SetInterpolationMode methods.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetMTime">
            <summary>
                <para>When determining the modified time of the filter,  this check the modified time of the transform and matrix.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetOutputDimensionality">
            <summary>
                <para>Force the dimensionality of the output to either 1, 2, 3 or 0 (default: 3).  If the dimensionality is 2D, then the Z extent of the output is forced to (0,0) and the Z origin of the output is forced to 0.0 (i.e. the output extent is confined to the xy plane).  If the dimensionality is 1D, the output extent is confined to the x axis.   For 0D, the output extent consists of a single voxel at  (0,0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputDimensionality(System.Int32)">
            <summary>
                <para>Force the dimensionality of the output to either 1, 2, 3 or 0 (default: 3).  If the dimensionality is 2D, then the Z extent of the output is forced to (0,0) and the Z origin of the output is forced to 0.0 (i.e. the output extent is confined to the xy plane).  If the dimensionality is 1D, the output extent is confined to the x axis.   For 0D, the output extent consists of a single voxel at  (0,0,0).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputExtentToDefault">
            <summary>
                <para>Set the extent for the output data.  The default output extent is the input extent permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetOutputExtent">
            <summary>
                <para>Set the extent for the output data.  The default output extent is the input extent permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputExtent(System.Int32[])">
            <summary>
                <para>Set the extent for the output data.  The default output extent is the input extent permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputExtent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Set the extent for the output data.  The default output extent is the input extent permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputOriginToDefault">
            <summary>
                <para>Set the origin for the output data.  The default output origin is the input origin permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetOutputOrigin">
            <summary>
                <para>Set the origin for the output data.  The default output origin is the input origin permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputOrigin(System.Double[])">
            <summary>
                <para>Set the origin for the output data.  The default output origin is the input origin permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set the origin for the output data.  The default output origin is the input origin permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputSpacingToDefault">
            <summary>
                <para>Set the voxel spacing for the output data.  The default output spacing is the input spacing permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetOutputSpacing">
            <summary>
                <para>Set the voxel spacing for the output data.  The default output spacing is the input spacing permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputSpacing(System.Double[])">
            <summary>
                <para>Set the voxel spacing for the output data.  The default output spacing is the input spacing permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOutputSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Set the voxel spacing for the output data.  The default output spacing is the input spacing permuted through the ResliceAxes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetBackgroundLevel">
            <summary>
                <para>Set background grey level (for single-component images).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetBackgroundLevel(System.Double)">
            <summary>
                <para>Set background grey level (for single-component images).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetBackgroundColor">
            <summary>
                <para>Set the background color (for multi-component images).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetBackgroundColor(System.Double[])">
            <summary>
                <para>Set the background color (for multi-component images).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetBackgroundColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Set the background color (for multi-component images).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.OptimizationOff">
            <summary>
                <para>Turn on and off optimizations (default on, they should only be turned off for testing purposes). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.OptimizationOn">
            <summary>
                <para>Turn on and off optimizations (default on, they should only be turned off for testing purposes). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetOptimization">
            <summary>
                <para>Turn on and off optimizations (default on, they should only be turned off for testing purposes). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetOptimization(System.Int32)">
            <summary>
                <para>Turn on and off optimizations (default on, they should only be turned off for testing purposes). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetInterpolationModeAsString">
            <summary>
                <para>Set interpolation mode (default: nearest neighbor). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetInterpolationModeToCubic">
            <summary>
                <para>Set interpolation mode (default: nearest neighbor). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetInterpolationModeToLinear">
            <summary>
                <para>Set interpolation mode (default: nearest neighbor). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetInterpolationModeToNearestNeighbor">
            <summary>
                <para>Set interpolation mode (default: nearest neighbor). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetInterpolationMode">
            <summary>
                <para>Set interpolation mode (default: nearest neighbor). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetInterpolationMode(System.Int32)">
            <summary>
                <para>Set interpolation mode (default: nearest neighbor). </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.BorderOff">
            <summary>
                <para>Extend the apparent input border by a half voxel (default: On). This changes how interpolation is handled at the borders of the input image: if the center of an output voxel is beyond the edge of the input image, but is within a half voxel width of the edge (using the input voxel width), then the value of the output voxel is calculated as if the input's edge voxels were duplicated past the edges of the input. This has no effect if Mirror or Wrap are on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.BorderOn">
            <summary>
                <para>Extend the apparent input border by a half voxel (default: On). This changes how interpolation is handled at the borders of the input image: if the center of an output voxel is beyond the edge of the input image, but is within a half voxel width of the edge (using the input voxel width), then the value of the output voxel is calculated as if the input's edge voxels were duplicated past the edges of the input. This has no effect if Mirror or Wrap are on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetBorder">
            <summary>
                <para>Extend the apparent input border by a half voxel (default: On). This changes how interpolation is handled at the borders of the input image: if the center of an output voxel is beyond the edge of the input image, but is within a half voxel width of the edge (using the input voxel width), then the value of the output voxel is calculated as if the input's edge voxels were duplicated past the edges of the input. This has no effect if Mirror or Wrap are on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetBorder(System.Int32)">
            <summary>
                <para>Extend the apparent input border by a half voxel (default: On). This changes how interpolation is handled at the borders of the input image: if the center of an output voxel is beyond the edge of the input image, but is within a half voxel width of the edge (using the input voxel width), then the value of the output voxel is calculated as if the input's edge voxels were duplicated past the edges of the input. This has no effect if Mirror or Wrap are on.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.MirrorOff">
            <summary>
                <para>Turn on mirror-pad feature (default: Off). This will override the wrap-pad. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.MirrorOn">
            <summary>
                <para>Turn on mirror-pad feature (default: Off). This will override the wrap-pad. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetMirror">
            <summary>
                <para>Turn on mirror-pad feature (default: Off). This will override the wrap-pad. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetMirror(System.Int32)">
            <summary>
                <para>Turn on mirror-pad feature (default: Off). This will override the wrap-pad. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.WrapOff">
            <summary>
                <para>Turn on wrap-pad feature (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.WrapOn">
            <summary>
                <para>Turn on wrap-pad feature (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetWrap">
            <summary>
                <para>Turn on wrap-pad feature (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetWrap(System.Int32)">
            <summary>
                <para>Turn on wrap-pad feature (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetAutoCropOutput">
            <summary>
                <para>Turn this on if you want to guarantee that the extent of the output will be large enough to ensure that none of the  data will be cropped (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.AutoCropOutputOff">
            <summary>
                <para>Turn this on if you want to guarantee that the extent of the output will be large enough to ensure that none of the  data will be cropped (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.AutoCropOutputOn">
            <summary>
                <para>Turn this on if you want to guarantee that the extent of the output will be large enough to ensure that none of the  data will be cropped (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetAutoCropOutput(System.Int32)">
            <summary>
                <para>Turn this on if you want to guarantee that the extent of the output will be large enough to ensure that none of the  data will be cropped (default: Off).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetTransformInputSampling">
            <summary>
                <para>Specify whether to transform the spacing, origin and extent of the Input (or the InformationInput) according to the direction cosines and origin of the ResliceAxes before applying them as the default output spacing, origin and extent  (default: On).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.TransformInputSamplingOff">
            <summary>
                <para>Specify whether to transform the spacing, origin and extent of the Input (or the InformationInput) according to the direction cosines and origin of the ResliceAxes before applying them as the default output spacing, origin and extent  (default: On).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.TransformInputSamplingOn">
            <summary>
                <para>Specify whether to transform the spacing, origin and extent of the Input (or the InformationInput) according to the direction cosines and origin of the ResliceAxes before applying them as the default output spacing, origin and extent  (default: On).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetTransformInputSampling(System.Int32)">
            <summary>
                <para>Specify whether to transform the spacing, origin and extent of the Input (or the InformationInput) according to the direction cosines and origin of the ResliceAxes before applying them as the default output spacing, origin and extent  (default: On).</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetInformationInput">
            <summary>
                <para>Set a vtkImageData from which the default Spacing, Origin, and WholeExtent of the output will be copied.  The spacing, origin, and extent will be permuted according to the  ResliceAxes.  Any values set via SetOutputSpacing,  SetOutputOrigin, and SetOutputExtent will override these values.  By default, the Spacing, Origin, and WholeExtent of the Input are used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetInformationInput(vtk.vtkImageData)">
            <summary>
                <para>Set a vtkImageData from which the default Spacing, Origin, and WholeExtent of the output will be copied.  The spacing, origin, and extent will be permuted according to the  ResliceAxes.  Any values set via SetOutputSpacing,  SetOutputOrigin, and SetOutputExtent will override these values.  By default, the Spacing, Origin, and WholeExtent of the Input are used.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetResliceTransform">
            <summary>
                <para>Set a transform to be applied to the resampling grid that has been defined via the ResliceAxes and the output Origin, Spacing and Extent.  Note that applying a transform to the resampling grid (which lies in the output coordinate system) is equivalent to applying the inverse of that transform to the input volume.  Nonlinear transforms such as vtkGridTransform and vtkThinPlateSplineTransform can be used here.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetResliceTransform(vtk.vtkAbstractTransform)">
            <summary>
                <para>Set a transform to be applied to the resampling grid that has been defined via the ResliceAxes and the output Origin, Spacing and Extent.  Note that applying a transform to the resampling grid (which lies in the output coordinate system) is equivalent to applying the inverse of that transform to the input volume.  Nonlinear transforms such as vtkGridTransform and vtkThinPlateSplineTransform can be used here.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetResliceAxesOrigin">
            <summary>
                <para>Specify the origin for the ResliceAxes (i.e. the first three elements of the final column of the ResliceAxes matrix). This will modify the current ResliceAxes matrix, or create new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetResliceAxesOrigin(System.Double[])">
            <summary>
                <para>Specify the origin for the ResliceAxes (i.e. the first three elements of the final column of the ResliceAxes matrix). This will modify the current ResliceAxes matrix, or create new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetResliceAxesOrigin(System.Double[])">
            <summary>
                <para>Specify the origin for the ResliceAxes (i.e. the first three elements of the final column of the ResliceAxes matrix). This will modify the current ResliceAxes matrix, or create new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetResliceAxesOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the origin for the ResliceAxes (i.e. the first three elements of the final column of the ResliceAxes matrix). This will modify the current ResliceAxes matrix, or create new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetResliceAxesDirectionCosines">
            <summary>
                <para>Specify the direction cosines for the ResliceAxes (i.e. the first three elements of each of the first three columns of  the ResliceAxes matrix).  This will modify the current ResliceAxes matrix, or create a new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetResliceAxesDirectionCosines(System.Double[])">
            <summary>
                <para>Specify the direction cosines for the ResliceAxes (i.e. the first three elements of each of the first three columns of  the ResliceAxes matrix).  This will modify the current ResliceAxes matrix, or create a new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetResliceAxesDirectionCosines(System.Double[],System.Double[],System.Double[])">
            <summary>
                <para>Specify the direction cosines for the ResliceAxes (i.e. the first three elements of each of the first three columns of  the ResliceAxes matrix).  This will modify the current ResliceAxes matrix, or create a new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetResliceAxesDirectionCosines(System.Double[])">
            <summary>
                <para>Specify the direction cosines for the ResliceAxes (i.e. the first three elements of each of the first three columns of  the ResliceAxes matrix).  This will modify the current ResliceAxes matrix, or create a new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetResliceAxesDirectionCosines(System.Double[],System.Double[],System.Double[])">
            <summary>
                <para>Specify the direction cosines for the ResliceAxes (i.e. the first three elements of each of the first three columns of  the ResliceAxes matrix).  This will modify the current ResliceAxes matrix, or create a new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetResliceAxesDirectionCosines(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify the direction cosines for the ResliceAxes (i.e. the first three elements of each of the first three columns of  the ResliceAxes matrix).  This will modify the current ResliceAxes matrix, or create a new matrix if none exists.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.GetResliceAxes">
            <summary>
                <para>This method is used to set up the axes for the output voxels. The output Spacing, Origin, and Extent specify the locations of the voxels within the coordinate system defined by the axes. The ResliceAxes are used most often to permute the data, e.g. to extract ZY or XZ slices of a volume as 2D XY images. </para>
                <para>The first column of the matrix specifies the x-axis  vector (the fourth element must be set to zero), the second column specifies the y-axis, and the third column the z-axis.  The fourth column is the origin of the axes (the fourth element must be set to one).   </para>
                <para>An alternative to SetResliceAxes() is to use  SetResliceAxesDirectionCosines() to set the directions of the axes and SetResliceAxesOrigin() to set the origin of the axes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageReslice.SetResliceAxes(vtk.vtkMatrix4x4)">
            <summary>
                <para>This method is used to set up the axes for the output voxels. The output Spacing, Origin, and Extent specify the locations of the voxels within the coordinate system defined by the axes. The ResliceAxes are used most often to permute the data, e.g. to extract ZY or XZ slices of a volume as 2D XY images. </para>
                <para>The first column of the matrix specifies the x-axis  vector (the fourth element must be set to zero), the second column specifies the y-axis, and the third column the z-axis.  The fourth column is the origin of the axes (the fourth element must be set to one).   </para>
                <para>An alternative to SetResliceAxes() is to use  SetResliceAxesDirectionCosines() to set the directions of the axes and SetResliceAxesOrigin() to set the origin of the axes.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetOriginScale">
            <summary>
                <para>Apply a scale to the origin.  The scale is applied before the translation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOriginScale(System.Double[])">
            <summary>
                <para>Apply a scale to the origin.  The scale is applied before the translation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOriginScale(System.Double,System.Double,System.Double)">
            <summary>
                <para>Apply a scale to the origin.  The scale is applied before the translation.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetOriginTranslation">
            <summary>
                <para>Apply a translation to the origin.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOriginTranslation(System.Double[])">
            <summary>
                <para>Apply a translation to the origin.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOriginTranslation(System.Double,System.Double,System.Double)">
            <summary>
                <para>Apply a translation to the origin.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetSpacingScale">
            <summary>
                <para>Apply a scale factor to the spacing. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetSpacingScale(System.Double[])">
            <summary>
                <para>Apply a scale factor to the spacing. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetSpacingScale(System.Double,System.Double,System.Double)">
            <summary>
                <para>Apply a scale factor to the spacing. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetExtentTranslation">
            <summary>
                <para>Apply a translation to the extent.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetExtentTranslation(System.Int32[])">
            <summary>
                <para>Apply a translation to the extent.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetExtentTranslation(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Apply a translation to the extent.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetCenterImage">
            <summary>
                <para>Set the Origin of the output so that image coordinate (0,0,0) lies at the Center of the data set.  This will override  SetOutputOrigin.  This is often a useful operation to apply  before using vtkImageReslice to apply a transformation to an image. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.CenterImageOff">
            <summary>
                <para>Set the Origin of the output so that image coordinate (0,0,0) lies at the Center of the data set.  This will override  SetOutputOrigin.  This is often a useful operation to apply  before using vtkImageReslice to apply a transformation to an image. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.CenterImageOn">
            <summary>
                <para>Set the Origin of the output so that image coordinate (0,0,0) lies at the Center of the data set.  This will override  SetOutputOrigin.  This is often a useful operation to apply  before using vtkImageReslice to apply a transformation to an image. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetCenterImage(System.Int32)">
            <summary>
                <para>Set the Origin of the output so that image coordinate (0,0,0) lies at the Center of the data set.  This will override  SetOutputOrigin.  This is often a useful operation to apply  before using vtkImageReslice to apply a transformation to an image. </para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetOutputOrigin">
            <summary>
                <para>Specify a new data origin explicitly.  The default is to use the origin of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOutputOrigin(System.Double[])">
            <summary>
                <para>Specify a new data origin explicitly.  The default is to use the origin of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOutputOrigin(System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify a new data origin explicitly.  The default is to use the origin of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetOutputSpacing">
            <summary>
                <para>Specify a new data spacing explicitly.  The default is to use the spacing of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOutputSpacing(System.Double[])">
            <summary>
                <para>Specify a new data spacing explicitly.  The default is to use the spacing of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOutputSpacing(System.Double,System.Double,System.Double)">
            <summary>
                <para>Specify a new data spacing explicitly.  The default is to use the spacing of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetOutputExtentStart">
            <summary>
                <para>Specify new starting values for the extent explicitly. These values are used as WholeExtent[0], WholeExtent[2] and WholeExtent[4] of the output.  The default is to the use the extent start of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOutputExtentStart(System.Int32[])">
            <summary>
                <para>Specify new starting values for the extent explicitly. These values are used as WholeExtent[0], WholeExtent[2] and WholeExtent[4] of the output.  The default is to the use the extent start of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetOutputExtentStart(System.Int32,System.Int32,System.Int32)">
            <summary>
                <para>Specify new starting values for the extent explicitly. These values are used as WholeExtent[0], WholeExtent[2] and WholeExtent[4] of the output.  The default is to the use the extent start of the Input, or of the InformationInput if InformationInput is set.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.GetInformationInput">
            <summary>
                <para>Copy the information from another data set.  By default, the information is copied from the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageChangeInformation.SetInformationInput(vtk.vtkImageData)">
            <summary>
                <para>Copy the information from another data set.  By default, the information is copied from the input.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.PermuteExtent(System.Int32[],System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                <para>Private methods kept public for template execute functions.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.PermuteIncrements(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                <para>Private methods kept public for template execute functions.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.GetDimensionality">
            <summary>
                <para>Dimensionality is the number of axes which are considered during execution. To process images dimensionality would be set to 2.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.SetDimensionality(System.Int32)">
            <summary>
                <para>Dimensionality is the number of axes which are considered during execution. To process images dimensionality would be set to 2.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.NewInstance">
            <summary>
                <para>Construct an instance of vtkImageDecomposeFilter filter with default dimensionality 3.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.IsA(System.String)">
            <summary>
                <para>Construct an instance of vtkImageDecomposeFilter filter with default dimensionality 3.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageDecomposeFilter.GetClassName">
            <summary>
                <para>Construct an instance of vtkImageDecomposeFilter filter with default dimensionality 3.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.GetNumberOfIterations">
            <summary>
                <para>Get which iteration is current being performed. Normally the user will not access this method.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageIterateFilter.GetIteration">
            <summary>
                <para>Get which iteration is current being performed. Normally the user will not access this method.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.ToString">
            <summary>
This returns the state of this object as a string. It is equivalent to PrintSelf.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.PrintSelf(System.IO.TextWriter,System.Int32)">
            <summary>
PrintSelf writes the state of this object to a TextWriter.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.Dispose">
            <summary>
This method calls Delete() on the native instance.
Use it to release resources in a timely fashion.
</summary>
            <remarks>
If this method is not called, then the finalizer will 
call Delete on this instance.
</remarks>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.#ctor">
            <summary>
This constructor creates a wrapper class. It is the one to call.  /// </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.#ctor(System.Boolean)">
            <summary>
This constructor is called only by derived classes. It asks base classes not allocate a native instance.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.#ctor(System.IntPtr,System.Boolean)">
            <summary>
This constructor is used to convert native pointers into managed wrapper classes.
</summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.GetDimensionality">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.GetDimensionalityMaxValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.GetDimensionalityMinValue">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.SetDimensionality(System.Int32)">
            <summary>
                <para>Determines how the input is interpreted (set of 2d slices ...)</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.HandleBoundariesOff">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.HandleBoundariesOn">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.GetHandleBoundaries">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
        <member name="M:vtk.vtkImageGradientMagnitude.SetHandleBoundaries(System.Int32)">
            <summary>
                <para>If "HandleBoundariesOn" then boundary pixels are duplicated So central differences can get values.</para>
            </summary>
        </member>
    </members>
</doc>