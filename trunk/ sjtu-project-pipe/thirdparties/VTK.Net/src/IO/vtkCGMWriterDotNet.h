#pragma once

// managed includes
#include "vtkPolyDataWriterDotNet.h"

// native includes

using namespace System;

namespace vtk {


public ref class vtkCGMWriter : public vtkPolyDataWriter
{

public:
// Did not wrap:  static vtkCGMWriter *New ();


  // const char *GetClassName ();
  System::String^ GetClassName();


  // int IsA (const char *name);
  int IsA(System::String^ name);


  // vtkCGMWriter *NewInstance ();
  vtkCGMWriter^ NewInstance();


  // vtkCGMWriter *SafeDownCast (vtkObject* o);
  static vtkCGMWriter^ SafeDownCast(vtkObject^ o);


  void PrintSelf(System::IO::TextWriter^ writer, int indentLevel);

  virtual System::String^ ToString() override;


  // virtual void SetViewport (vtkViewport *);
/// <summary>
/// <para>Specify a vtkViewport object to be used to transform the vtkPolyData points into 2D coordinates. By default (no vtkViewport specified), the  point coordinates are generated by ignoring the z values. If a viewport is defined, then the points are transformed into viewport coordinates.</para>
/// </summary>
  void SetViewport(vtkViewport^ arg0);


  // vtkViewport *GetViewport ();
/// <summary>
/// <para>Specify a vtkViewport object to be used to transform the vtkPolyData points into 2D coordinates. By default (no vtkViewport specified), the  point coordinates are generated by ignoring the z values. If a viewport is defined, then the points are transformed into viewport coordinates.</para>
/// </summary>
  vtkViewport^ GetViewport();


  // void SetSort (int );
/// <summary>
/// <para>Turn on/off the sorting of the cells via depth. If enabled, polygonal cells will be sorted from back to front, i.e., a Painter's algorithm sort.</para>
/// </summary>
  void SetSort(int arg0);


  // int GetSort ();
/// <summary>
/// <para>Turn on/off the sorting of the cells via depth. If enabled, polygonal cells will be sorted from back to front, i.e., a Painter's algorithm sort.</para>
/// </summary>
  int GetSort();


  // void SetResolution (int );
/// <summary>
/// <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
/// </summary>
  void SetResolution(int arg0);


  // int GetResolutionMinValue ();
/// <summary>
/// <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
/// </summary>
  int GetResolutionMinValue();


  // int GetResolutionMaxValue ();
/// <summary>
/// <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
/// </summary>
  int GetResolutionMaxValue();


  // int GetResolution ();
/// <summary>
/// <para>Specify the resolution of the CGM file. This number is used to integerize the maximum coordinate range of the plot file.</para>
/// </summary>
  int GetResolution();


  // void SetColorMode (int );
/// <summary>
/// <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
/// </summary>
  void SetColorMode(int arg0);


  // int GetColorMode ();
/// <summary>
/// <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
/// </summary>
  int GetColorMode();


  // void SetColorModeToDefault ();this SetColorMode VTK_COLOR_MODE_DEFAULT 
/// <summary>
/// <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
/// </summary>
  void SetColorModeToDefault();


  // void SetColorModeToSpecifiedColor ();this SetColorMode VTK_COLOR_MODE_SPECIFIED_COLOR 
/// <summary>
/// <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
/// </summary>
  void SetColorModeToSpecifiedColor();


  // void SetColorModeToRandomColors ();this SetColorMode VTK_COLOR_MODE_RANDOM_COLORS 
/// <summary>
/// <para>Control how output polydata is colored. By default (ColorModeToDefault), if per cell colors are defined (unsigned chars of 1-4 components), then the cells are colored with these values. (If point colors are defined and cell colors are not, you can use vtkPointDataToCellData to convert the point colors to cell colors.) Otherwise, by default, the cells are set to the specified color. If ColorModeToSpecifiedColor is set, then the primitives will all be set to this color. If ColorModeToRandomColors is set, each cell will be randomly assigned a color.</para>
/// </summary>
  void SetColorModeToRandomColors();


  // void SetSpecifiedColor (float , float , float );
/// <summary>
/// <para>Set/Get the specified color to color the polydata cells. This color is only used when the color mode is set to  ColorModeToSpecifiedColor, or ColorModeToDefault is set and no cell colors are specified. The specified color is specified as RGB  values ranging from (0,1). (Note: CGM will map this color to the closest color it supports.)</para>
/// </summary>
  void SetSpecifiedColor(float arg0, float arg1, float arg2);


  // void SetSpecifiedColor (float  a[3]);
/// <summary>
/// <para>Set/Get the specified color to color the polydata cells. This color is only used when the color mode is set to  ColorModeToSpecifiedColor, or ColorModeToDefault is set and no cell colors are specified. The specified color is specified as RGB  values ranging from (0,1). (Note: CGM will map this color to the closest color it supports.)</para>
/// </summary>
  void SetSpecifiedColor(array<float>^ a);


  // float  *GetSpecifiedColor ();
/// <summary>
/// <para>Set/Get the specified color to color the polydata cells. This color is only used when the color mode is set to  ColorModeToSpecifiedColor, or ColorModeToDefault is set and no cell colors are specified. The specified color is specified as RGB  values ranging from (0,1). (Note: CGM will map this color to the closest color it supports.)</para>
/// </summary>
  array<float>^ GetSpecifiedColor();


// Did not wrap:  vtkCGMWriter ();


// Did not wrap:  ~vtkCGMWriter ();


// Did not wrap:  void WriteData ();


// Did not wrap:  vtkCGMWriter (const vtkCGMWriter &);


// Did not wrap:  void vtkCGMWriter 


  /// <summary>
  /// This constructor is used to convert native pointers into managed wrapper classes.
  /// </summary>
  vtkCGMWriter(System::IntPtr native, bool bConst);

  /// <summary>
  /// This constructor is called only by derived classes. It asks base classes not allocate a native instance.
  /// </summary>
  vtkCGMWriter(bool donothing);

  /// <summary>
  /// This constructor creates a wrapper class. It is the one to call.  /// </summary>
  vtkCGMWriter();

  /// <summary>
  /// This method calls Delete() on the native instance.
  /// Use it to release resources in a timely fashion.
  /// </summary>
  /// <remarks>
  /// If this method is not called, then the finalizer will 
  /// call Delete on this instance.
  /// </remarks>
  virtual ~vtkCGMWriter();


};

} // end vtkIO
