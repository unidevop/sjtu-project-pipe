// -*- c++ -*-

//DO NOT EDIT!
//This file was created with ..\bin\MinSizeRel\vtkParseOGLExt.exe
//from C:/dev/out/t2/build/Rendering M:/dev/cur/vtkdotnet/branch/50/Utilities/ParseOGLExt/headers/glext.h M:/dev/cur/vtkdotnet/branch/50/Utilities/ParseOGLExt/headers/glxext.h M:/dev/cur/vtkdotnet/branch/50/Utilities/ParseOGLExt/headers/wglext.h

/*
 * Copyright 2003 Sandia Corporation.
 * Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
 * license for use of this work by or on behalf of the
 * U.S. Government. Redistribution and use in source and binary forms, with
 * or without modification, are permitted provided that this Notice and any
 * statement of authorship are reproduced on all copies.
 */

#ifndef _vtkgl_h
#define _vtkgl_h

#include "vtkToolkits.h"
#include "vtkSystemIncludes.h"
#include "vtkWindows.h"
#include "vtkOpenGL.h"
#include <stddef.h>

//#ifdef __APPLE__
//#include <OpenGL/glu.h>
//#else
//#include <GL/glu.h>
//#endif

#ifdef VTK_USE_X
#include <GL/glx.h>
#endif

class vtkOpenGLExtensionManager;

#ifndef APIENTRY
#define APIENTRY
#define VTKGL_APIENTRY_DEFINED
#endif

#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#define VTKGL_APIENTRYP_DEFINED
#endif

/* Undefine all constants to avoid name conflicts.  They should be defined  */
/* with GL_, GLX_, or WGL_ preprended to them anyway, but sometimes you run */
/* into a header file that gets it wrong.                                   */
#ifdef SAMPLE_BUFFERS_3DFX
#undef SAMPLE_BUFFERS_3DFX
#endif
#ifdef SAMPLES_3DFX
#undef SAMPLES_3DFX
#endif
#ifdef RGBA_FLOAT_TYPE_ARB
#undef RGBA_FLOAT_TYPE_ARB
#endif
#ifdef RGBA_FLOAT_BIT_ARB
#undef RGBA_FLOAT_BIT_ARB
#endif
#ifdef SAMPLE_BUFFERS_ARB
#undef SAMPLE_BUFFERS_ARB
#endif
#ifdef SAMPLES_ARB
#undef SAMPLES_ARB
#endif
#ifdef SHARE_CONTEXT_EXT
#undef SHARE_CONTEXT_EXT
#endif
#ifdef VISUAL_ID_EXT
#undef VISUAL_ID_EXT
#endif
#ifdef SCREEN_EXT
#undef SCREEN_EXT
#endif
#ifdef X_VISUAL_TYPE_EXT
#undef X_VISUAL_TYPE_EXT
#endif
#ifdef TRANSPARENT_TYPE_EXT
#undef TRANSPARENT_TYPE_EXT
#endif
#ifdef TRANSPARENT_INDEX_VALUE_EXT
#undef TRANSPARENT_INDEX_VALUE_EXT
#endif
#ifdef TRANSPARENT_RED_VALUE_EXT
#undef TRANSPARENT_RED_VALUE_EXT
#endif
#ifdef TRANSPARENT_GREEN_VALUE_EXT
#undef TRANSPARENT_GREEN_VALUE_EXT
#endif
#ifdef TRANSPARENT_BLUE_VALUE_EXT
#undef TRANSPARENT_BLUE_VALUE_EXT
#endif
#ifdef TRANSPARENT_ALPHA_VALUE_EXT
#undef TRANSPARENT_ALPHA_VALUE_EXT
#endif
#ifdef NONE_EXT
#undef NONE_EXT
#endif
#ifdef TRUE_COLOR_EXT
#undef TRUE_COLOR_EXT
#endif
#ifdef DIRECT_COLOR_EXT
#undef DIRECT_COLOR_EXT
#endif
#ifdef PSEUDO_COLOR_EXT
#undef PSEUDO_COLOR_EXT
#endif
#ifdef STATIC_COLOR_EXT
#undef STATIC_COLOR_EXT
#endif
#ifdef GRAY_SCALE_EXT
#undef GRAY_SCALE_EXT
#endif
#ifdef STATIC_GRAY_EXT
#undef STATIC_GRAY_EXT
#endif
#ifdef TRANSPARENT_RGB_EXT
#undef TRANSPARENT_RGB_EXT
#endif
#ifdef TRANSPARENT_INDEX_EXT
#undef TRANSPARENT_INDEX_EXT
#endif
#ifdef VISUAL_CAVEAT_EXT
#undef VISUAL_CAVEAT_EXT
#endif
#ifdef SLOW_VISUAL_EXT
#undef SLOW_VISUAL_EXT
#endif
#ifdef NON_CONFORMANT_VISUAL_EXT
#undef NON_CONFORMANT_VISUAL_EXT
#endif
#ifdef _3DFX_WINDOW_MODE_MESA
#undef _3DFX_WINDOW_MODE_MESA
#endif
#ifdef _3DFX_FULLSCREEN_MODE_MESA
#undef _3DFX_FULLSCREEN_MODE_MESA
#endif
#ifdef FLOAT_COMPONENTS_NV
#undef FLOAT_COMPONENTS_NV
#endif
#ifdef SWAP_METHOD_OML
#undef SWAP_METHOD_OML
#endif
#ifdef SWAP_EXCHANGE_OML
#undef SWAP_EXCHANGE_OML
#endif
#ifdef SWAP_COPY_OML
#undef SWAP_COPY_OML
#endif
#ifdef SWAP_UNDEFINED_OML
#undef SWAP_UNDEFINED_OML
#endif
#ifdef BLENDED_RGBA_SGIS
#undef BLENDED_RGBA_SGIS
#endif
#ifdef SAMPLE_BUFFERS_SGIS
#undef SAMPLE_BUFFERS_SGIS
#endif
#ifdef SAMPLES_SGIS
#undef SAMPLES_SGIS
#endif
#ifdef MULTISAMPLE_SUB_RECT_WIDTH_SGIS
#undef MULTISAMPLE_SUB_RECT_WIDTH_SGIS
#endif
#ifdef MULTISAMPLE_SUB_RECT_HEIGHT_SGIS
#undef MULTISAMPLE_SUB_RECT_HEIGHT_SGIS
#endif
#ifdef WINDOW_BIT_SGIX
#undef WINDOW_BIT_SGIX
#endif
#ifdef PIXMAP_BIT_SGIX
#undef PIXMAP_BIT_SGIX
#endif
#ifdef RGBA_BIT_SGIX
#undef RGBA_BIT_SGIX
#endif
#ifdef COLOR_INDEX_BIT_SGIX
#undef COLOR_INDEX_BIT_SGIX
#endif
#ifdef DRAWABLE_TYPE_SGIX
#undef DRAWABLE_TYPE_SGIX
#endif
#ifdef RENDER_TYPE_SGIX
#undef RENDER_TYPE_SGIX
#endif
#ifdef X_RENDERABLE_SGIX
#undef X_RENDERABLE_SGIX
#endif
#ifdef FBCONFIG_ID_SGIX
#undef FBCONFIG_ID_SGIX
#endif
#ifdef RGBA_TYPE_SGIX
#undef RGBA_TYPE_SGIX
#endif
#ifdef COLOR_INDEX_TYPE_SGIX
#undef COLOR_INDEX_TYPE_SGIX
#endif
#ifdef PBUFFER_BIT_SGIX
#undef PBUFFER_BIT_SGIX
#endif
#ifdef BUFFER_CLOBBER_MASK_SGIX
#undef BUFFER_CLOBBER_MASK_SGIX
#endif
#ifdef FRONT_LEFT_BUFFER_BIT_SGIX
#undef FRONT_LEFT_BUFFER_BIT_SGIX
#endif
#ifdef FRONT_RIGHT_BUFFER_BIT_SGIX
#undef FRONT_RIGHT_BUFFER_BIT_SGIX
#endif
#ifdef BACK_LEFT_BUFFER_BIT_SGIX
#undef BACK_LEFT_BUFFER_BIT_SGIX
#endif
#ifdef BACK_RIGHT_BUFFER_BIT_SGIX
#undef BACK_RIGHT_BUFFER_BIT_SGIX
#endif
#ifdef AUX_BUFFERS_BIT_SGIX
#undef AUX_BUFFERS_BIT_SGIX
#endif
#ifdef DEPTH_BUFFER_BIT_SGIX
#undef DEPTH_BUFFER_BIT_SGIX
#endif
#ifdef STENCIL_BUFFER_BIT_SGIX
#undef STENCIL_BUFFER_BIT_SGIX
#endif
#ifdef ACCUM_BUFFER_BIT_SGIX
#undef ACCUM_BUFFER_BIT_SGIX
#endif
#ifdef SAMPLE_BUFFERS_BIT_SGIX
#undef SAMPLE_BUFFERS_BIT_SGIX
#endif
#ifdef MAX_PBUFFER_WIDTH_SGIX
#undef MAX_PBUFFER_WIDTH_SGIX
#endif
#ifdef MAX_PBUFFER_HEIGHT_SGIX
#undef MAX_PBUFFER_HEIGHT_SGIX
#endif
#ifdef MAX_PBUFFER_PIXELS_SGIX
#undef MAX_PBUFFER_PIXELS_SGIX
#endif
#ifdef OPTIMAL_PBUFFER_WIDTH_SGIX
#undef OPTIMAL_PBUFFER_WIDTH_SGIX
#endif
#ifdef OPTIMAL_PBUFFER_HEIGHT_SGIX
#undef OPTIMAL_PBUFFER_HEIGHT_SGIX
#endif
#ifdef PRESERVED_CONTENTS_SGIX
#undef PRESERVED_CONTENTS_SGIX
#endif
#ifdef LARGEST_PBUFFER_SGIX
#undef LARGEST_PBUFFER_SGIX
#endif
#ifdef WIDTH_SGIX
#undef WIDTH_SGIX
#endif
#ifdef HEIGHT_SGIX
#undef HEIGHT_SGIX
#endif
#ifdef EVENT_MASK_SGIX
#undef EVENT_MASK_SGIX
#endif
#ifdef DAMAGED_SGIX
#undef DAMAGED_SGIX
#endif
#ifdef SAVED_SGIX
#undef SAVED_SGIX
#endif
#ifdef WINDOW_SGIX
#undef WINDOW_SGIX
#endif
#ifdef PBUFFER_SGIX
#undef PBUFFER_SGIX
#endif
#ifdef SYNC_FRAME_SGIX
#undef SYNC_FRAME_SGIX
#endif
#ifdef SYNC_SWAP_SGIX
#undef SYNC_SWAP_SGIX
#endif
#ifdef VISUAL_SELECT_GROUP_SGIX
#undef VISUAL_SELECT_GROUP_SGIX
#endif
#ifdef WINDOW_BIT
#undef WINDOW_BIT
#endif
#ifdef PIXMAP_BIT
#undef PIXMAP_BIT
#endif
#ifdef PBUFFER_BIT
#undef PBUFFER_BIT
#endif
#ifdef RGBA_BIT
#undef RGBA_BIT
#endif
#ifdef COLOR_INDEX_BIT
#undef COLOR_INDEX_BIT
#endif
#ifdef PBUFFER_CLOBBER_MASK
#undef PBUFFER_CLOBBER_MASK
#endif
#ifdef FRONT_LEFT_BUFFER_BIT
#undef FRONT_LEFT_BUFFER_BIT
#endif
#ifdef FRONT_RIGHT_BUFFER_BIT
#undef FRONT_RIGHT_BUFFER_BIT
#endif
#ifdef BACK_LEFT_BUFFER_BIT
#undef BACK_LEFT_BUFFER_BIT
#endif
#ifdef BACK_RIGHT_BUFFER_BIT
#undef BACK_RIGHT_BUFFER_BIT
#endif
#ifdef AUX_BUFFERS_BIT
#undef AUX_BUFFERS_BIT
#endif
#ifdef DEPTH_BUFFER_BIT
#undef DEPTH_BUFFER_BIT
#endif
#ifdef STENCIL_BUFFER_BIT
#undef STENCIL_BUFFER_BIT
#endif
#ifdef ACCUM_BUFFER_BIT
#undef ACCUM_BUFFER_BIT
#endif
#ifdef CONFIG_CAVEAT
#undef CONFIG_CAVEAT
#endif
#ifdef X_VISUAL_TYPE
#undef X_VISUAL_TYPE
#endif
#ifdef TRANSPARENT_TYPE
#undef TRANSPARENT_TYPE
#endif
#ifdef TRANSPARENT_INDEX_VALUE
#undef TRANSPARENT_INDEX_VALUE
#endif
#ifdef TRANSPARENT_RED_VALUE
#undef TRANSPARENT_RED_VALUE
#endif
#ifdef TRANSPARENT_GREEN_VALUE
#undef TRANSPARENT_GREEN_VALUE
#endif
#ifdef TRANSPARENT_BLUE_VALUE
#undef TRANSPARENT_BLUE_VALUE
#endif
#ifdef TRANSPARENT_ALPHA_VALUE
#undef TRANSPARENT_ALPHA_VALUE
#endif
#ifdef DONT_CARE
#undef DONT_CARE
#endif
#ifdef NONE
#undef NONE
#endif
#ifdef SLOW_CONFIG
#undef SLOW_CONFIG
#endif
#ifdef TRUE_COLOR
#undef TRUE_COLOR
#endif
#ifdef DIRECT_COLOR
#undef DIRECT_COLOR
#endif
#ifdef PSEUDO_COLOR
#undef PSEUDO_COLOR
#endif
#ifdef STATIC_COLOR
#undef STATIC_COLOR
#endif
#ifdef GRAY_SCALE
#undef GRAY_SCALE
#endif
#ifdef STATIC_GRAY
#undef STATIC_GRAY
#endif
#ifdef TRANSPARENT_RGB
#undef TRANSPARENT_RGB
#endif
#ifdef TRANSPARENT_INDEX
#undef TRANSPARENT_INDEX
#endif
#ifdef VISUAL_ID
#undef VISUAL_ID
#endif
#ifdef SCREEN
#undef SCREEN
#endif
#ifdef NON_CONFORMANT_CONFIG
#undef NON_CONFORMANT_CONFIG
#endif
#ifdef DRAWABLE_TYPE
#undef DRAWABLE_TYPE
#endif
#ifdef RENDER_TYPE
#undef RENDER_TYPE
#endif
#ifdef X_RENDERABLE
#undef X_RENDERABLE
#endif
#ifdef FBCONFIG_ID
#undef FBCONFIG_ID
#endif
#ifdef RGBA_TYPE
#undef RGBA_TYPE
#endif
#ifdef COLOR_INDEX_TYPE
#undef COLOR_INDEX_TYPE
#endif
#ifdef MAX_PBUFFER_WIDTH
#undef MAX_PBUFFER_WIDTH
#endif
#ifdef MAX_PBUFFER_HEIGHT
#undef MAX_PBUFFER_HEIGHT
#endif
#ifdef MAX_PBUFFER_PIXELS
#undef MAX_PBUFFER_PIXELS
#endif
#ifdef PRESERVED_CONTENTS
#undef PRESERVED_CONTENTS
#endif
#ifdef LARGEST_PBUFFER
#undef LARGEST_PBUFFER
#endif
#ifdef WIDTH
#undef WIDTH
#endif
#ifdef HEIGHT
#undef HEIGHT
#endif
#ifdef EVENT_MASK
#undef EVENT_MASK
#endif
#ifdef DAMAGED
#undef DAMAGED
#endif
#ifdef SAVED
#undef SAVED
#endif
#ifdef WINDOW
#undef WINDOW
#endif
#ifdef PBUFFER
#undef PBUFFER
#endif
#ifdef PBUFFER_HEIGHT
#undef PBUFFER_HEIGHT
#endif
#ifdef PBUFFER_WIDTH
#undef PBUFFER_WIDTH
#endif
#ifdef SAMPLE_BUFFERS
#undef SAMPLE_BUFFERS
#endif
#ifdef SAMPLES
#undef SAMPLES
#endif
#ifdef MULTISAMPLE_3DFX
#undef MULTISAMPLE_3DFX
#endif
#ifdef SAMPLE_BUFFERS_3DFX
#undef SAMPLE_BUFFERS_3DFX
#endif
#ifdef SAMPLES_3DFX
#undef SAMPLES_3DFX
#endif
#ifdef MULTISAMPLE_BIT_3DFX
#undef MULTISAMPLE_BIT_3DFX
#endif
#ifdef COMPRESSED_RGB_FXT1_3DFX
#undef COMPRESSED_RGB_FXT1_3DFX
#endif
#ifdef COMPRESSED_RGBA_FXT1_3DFX
#undef COMPRESSED_RGBA_FXT1_3DFX
#endif
#ifdef UNPACK_CLIENT_STORAGE_APPLE
#undef UNPACK_CLIENT_STORAGE_APPLE
#endif
#ifdef ELEMENT_ARRAY_APPLE
#undef ELEMENT_ARRAY_APPLE
#endif
#ifdef ELEMENT_ARRAY_TYPE_APPLE
#undef ELEMENT_ARRAY_TYPE_APPLE
#endif
#ifdef ELEMENT_ARRAY_POINTER_APPLE
#undef ELEMENT_ARRAY_POINTER_APPLE
#endif
#ifdef DRAW_PIXELS_APPLE
#undef DRAW_PIXELS_APPLE
#endif
#ifdef FENCE_APPLE
#undef FENCE_APPLE
#endif
#ifdef LIGHT_MODEL_SPECULAR_VECTOR_APPLE
#undef LIGHT_MODEL_SPECULAR_VECTOR_APPLE
#endif
#ifdef TRANSFORM_HINT_APPLE
#undef TRANSFORM_HINT_APPLE
#endif
#ifdef VERTEX_ARRAY_BINDING_APPLE
#undef VERTEX_ARRAY_BINDING_APPLE
#endif
#ifdef VERTEX_ARRAY_RANGE_APPLE
#undef VERTEX_ARRAY_RANGE_APPLE
#endif
#ifdef VERTEX_ARRAY_RANGE_LENGTH_APPLE
#undef VERTEX_ARRAY_RANGE_LENGTH_APPLE
#endif
#ifdef VERTEX_ARRAY_STORAGE_HINT_APPLE
#undef VERTEX_ARRAY_STORAGE_HINT_APPLE
#endif
#ifdef VERTEX_ARRAY_RANGE_POINTER_APPLE
#undef VERTEX_ARRAY_RANGE_POINTER_APPLE
#endif
#ifdef STORAGE_CACHED_APPLE
#undef STORAGE_CACHED_APPLE
#endif
#ifdef STORAGE_SHARED_APPLE
#undef STORAGE_SHARED_APPLE
#endif
#ifdef YCBCR_422_APPLE
#undef YCBCR_422_APPLE
#endif
#ifdef UNSIGNED_SHORT_8_8_APPLE
#undef UNSIGNED_SHORT_8_8_APPLE
#endif
#ifdef UNSIGNED_SHORT_8_8_REV_APPLE
#undef UNSIGNED_SHORT_8_8_REV_APPLE
#endif
#ifdef RGBA_FLOAT_MODE_ARB
#undef RGBA_FLOAT_MODE_ARB
#endif
#ifdef CLAMP_VERTEX_COLOR_ARB
#undef CLAMP_VERTEX_COLOR_ARB
#endif
#ifdef CLAMP_FRAGMENT_COLOR_ARB
#undef CLAMP_FRAGMENT_COLOR_ARB
#endif
#ifdef CLAMP_READ_COLOR_ARB
#undef CLAMP_READ_COLOR_ARB
#endif
#ifdef FIXED_ONLY_ARB
#undef FIXED_ONLY_ARB
#endif
#ifdef DEPTH_COMPONENT16_ARB
#undef DEPTH_COMPONENT16_ARB
#endif
#ifdef DEPTH_COMPONENT24_ARB
#undef DEPTH_COMPONENT24_ARB
#endif
#ifdef DEPTH_COMPONENT32_ARB
#undef DEPTH_COMPONENT32_ARB
#endif
#ifdef TEXTURE_DEPTH_SIZE_ARB
#undef TEXTURE_DEPTH_SIZE_ARB
#endif
#ifdef DEPTH_TEXTURE_MODE_ARB
#undef DEPTH_TEXTURE_MODE_ARB
#endif
#ifdef MAX_DRAW_BUFFERS_ARB
#undef MAX_DRAW_BUFFERS_ARB
#endif
#ifdef DRAW_BUFFER0_ARB
#undef DRAW_BUFFER0_ARB
#endif
#ifdef DRAW_BUFFER1_ARB
#undef DRAW_BUFFER1_ARB
#endif
#ifdef DRAW_BUFFER2_ARB
#undef DRAW_BUFFER2_ARB
#endif
#ifdef DRAW_BUFFER3_ARB
#undef DRAW_BUFFER3_ARB
#endif
#ifdef DRAW_BUFFER4_ARB
#undef DRAW_BUFFER4_ARB
#endif
#ifdef DRAW_BUFFER5_ARB
#undef DRAW_BUFFER5_ARB
#endif
#ifdef DRAW_BUFFER6_ARB
#undef DRAW_BUFFER6_ARB
#endif
#ifdef DRAW_BUFFER7_ARB
#undef DRAW_BUFFER7_ARB
#endif
#ifdef DRAW_BUFFER8_ARB
#undef DRAW_BUFFER8_ARB
#endif
#ifdef DRAW_BUFFER9_ARB
#undef DRAW_BUFFER9_ARB
#endif
#ifdef DRAW_BUFFER10_ARB
#undef DRAW_BUFFER10_ARB
#endif
#ifdef DRAW_BUFFER11_ARB
#undef DRAW_BUFFER11_ARB
#endif
#ifdef DRAW_BUFFER12_ARB
#undef DRAW_BUFFER12_ARB
#endif
#ifdef DRAW_BUFFER13_ARB
#undef DRAW_BUFFER13_ARB
#endif
#ifdef DRAW_BUFFER14_ARB
#undef DRAW_BUFFER14_ARB
#endif
#ifdef DRAW_BUFFER15_ARB
#undef DRAW_BUFFER15_ARB
#endif
#ifdef FRAGMENT_PROGRAM_ARB
#undef FRAGMENT_PROGRAM_ARB
#endif
#ifdef PROGRAM_ALU_INSTRUCTIONS_ARB
#undef PROGRAM_ALU_INSTRUCTIONS_ARB
#endif
#ifdef PROGRAM_TEX_INSTRUCTIONS_ARB
#undef PROGRAM_TEX_INSTRUCTIONS_ARB
#endif
#ifdef PROGRAM_TEX_INDIRECTIONS_ARB
#undef PROGRAM_TEX_INDIRECTIONS_ARB
#endif
#ifdef PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#undef PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#endif
#ifdef PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#undef PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#endif
#ifdef PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#undef PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#endif
#ifdef MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
#undef MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
#endif
#ifdef MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
#undef MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
#endif
#ifdef MAX_PROGRAM_TEX_INDIRECTIONS_ARB
#undef MAX_PROGRAM_TEX_INDIRECTIONS_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#undef MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#undef MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#undef MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
#endif
#ifdef MAX_TEXTURE_COORDS_ARB
#undef MAX_TEXTURE_COORDS_ARB
#endif
#ifdef MAX_TEXTURE_IMAGE_UNITS_ARB
#undef MAX_TEXTURE_IMAGE_UNITS_ARB
#endif
#ifdef FRAGMENT_SHADER_ARB
#undef FRAGMENT_SHADER_ARB
#endif
#ifdef MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
#undef MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
#endif
#ifdef FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
#undef FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
#endif
#ifdef HALF_FLOAT_ARB
#undef HALF_FLOAT_ARB
#endif
#ifdef CONSTANT_COLOR
#undef CONSTANT_COLOR
#endif
#ifdef ONE_MINUS_CONSTANT_COLOR
#undef ONE_MINUS_CONSTANT_COLOR
#endif
#ifdef CONSTANT_ALPHA
#undef CONSTANT_ALPHA
#endif
#ifdef ONE_MINUS_CONSTANT_ALPHA
#undef ONE_MINUS_CONSTANT_ALPHA
#endif
#ifdef BLEND_COLOR
#undef BLEND_COLOR
#endif
#ifdef FUNC_ADD
#undef FUNC_ADD
#endif
#ifdef MIN
#undef MIN
#endif
#ifdef MAX
#undef MAX
#endif
#ifdef BLEND_EQUATION
#undef BLEND_EQUATION
#endif
#ifdef FUNC_SUBTRACT
#undef FUNC_SUBTRACT
#endif
#ifdef FUNC_REVERSE_SUBTRACT
#undef FUNC_REVERSE_SUBTRACT
#endif
#ifdef CONVOLUTION_1D
#undef CONVOLUTION_1D
#endif
#ifdef CONVOLUTION_2D
#undef CONVOLUTION_2D
#endif
#ifdef SEPARABLE_2D
#undef SEPARABLE_2D
#endif
#ifdef CONVOLUTION_BORDER_MODE
#undef CONVOLUTION_BORDER_MODE
#endif
#ifdef CONVOLUTION_FILTER_SCALE
#undef CONVOLUTION_FILTER_SCALE
#endif
#ifdef CONVOLUTION_FILTER_BIAS
#undef CONVOLUTION_FILTER_BIAS
#endif
#ifdef REDUCE
#undef REDUCE
#endif
#ifdef CONVOLUTION_FORMAT
#undef CONVOLUTION_FORMAT
#endif
#ifdef CONVOLUTION_WIDTH
#undef CONVOLUTION_WIDTH
#endif
#ifdef CONVOLUTION_HEIGHT
#undef CONVOLUTION_HEIGHT
#endif
#ifdef MAX_CONVOLUTION_WIDTH
#undef MAX_CONVOLUTION_WIDTH
#endif
#ifdef MAX_CONVOLUTION_HEIGHT
#undef MAX_CONVOLUTION_HEIGHT
#endif
#ifdef POST_CONVOLUTION_RED_SCALE
#undef POST_CONVOLUTION_RED_SCALE
#endif
#ifdef POST_CONVOLUTION_GREEN_SCALE
#undef POST_CONVOLUTION_GREEN_SCALE
#endif
#ifdef POST_CONVOLUTION_BLUE_SCALE
#undef POST_CONVOLUTION_BLUE_SCALE
#endif
#ifdef POST_CONVOLUTION_ALPHA_SCALE
#undef POST_CONVOLUTION_ALPHA_SCALE
#endif
#ifdef POST_CONVOLUTION_RED_BIAS
#undef POST_CONVOLUTION_RED_BIAS
#endif
#ifdef POST_CONVOLUTION_GREEN_BIAS
#undef POST_CONVOLUTION_GREEN_BIAS
#endif
#ifdef POST_CONVOLUTION_BLUE_BIAS
#undef POST_CONVOLUTION_BLUE_BIAS
#endif
#ifdef POST_CONVOLUTION_ALPHA_BIAS
#undef POST_CONVOLUTION_ALPHA_BIAS
#endif
#ifdef HISTOGRAM
#undef HISTOGRAM
#endif
#ifdef PROXY_HISTOGRAM
#undef PROXY_HISTOGRAM
#endif
#ifdef HISTOGRAM_WIDTH
#undef HISTOGRAM_WIDTH
#endif
#ifdef HISTOGRAM_FORMAT
#undef HISTOGRAM_FORMAT
#endif
#ifdef HISTOGRAM_RED_SIZE
#undef HISTOGRAM_RED_SIZE
#endif
#ifdef HISTOGRAM_GREEN_SIZE
#undef HISTOGRAM_GREEN_SIZE
#endif
#ifdef HISTOGRAM_BLUE_SIZE
#undef HISTOGRAM_BLUE_SIZE
#endif
#ifdef HISTOGRAM_ALPHA_SIZE
#undef HISTOGRAM_ALPHA_SIZE
#endif
#ifdef HISTOGRAM_LUMINANCE_SIZE
#undef HISTOGRAM_LUMINANCE_SIZE
#endif
#ifdef HISTOGRAM_SINK
#undef HISTOGRAM_SINK
#endif
#ifdef MINMAX
#undef MINMAX
#endif
#ifdef MINMAX_FORMAT
#undef MINMAX_FORMAT
#endif
#ifdef MINMAX_SINK
#undef MINMAX_SINK
#endif
#ifdef TABLE_TOO_LARGE
#undef TABLE_TOO_LARGE
#endif
#ifdef COLOR_MATRIX
#undef COLOR_MATRIX
#endif
#ifdef COLOR_MATRIX_STACK_DEPTH
#undef COLOR_MATRIX_STACK_DEPTH
#endif
#ifdef MAX_COLOR_MATRIX_STACK_DEPTH
#undef MAX_COLOR_MATRIX_STACK_DEPTH
#endif
#ifdef POST_COLOR_MATRIX_RED_SCALE
#undef POST_COLOR_MATRIX_RED_SCALE
#endif
#ifdef POST_COLOR_MATRIX_GREEN_SCALE
#undef POST_COLOR_MATRIX_GREEN_SCALE
#endif
#ifdef POST_COLOR_MATRIX_BLUE_SCALE
#undef POST_COLOR_MATRIX_BLUE_SCALE
#endif
#ifdef POST_COLOR_MATRIX_ALPHA_SCALE
#undef POST_COLOR_MATRIX_ALPHA_SCALE
#endif
#ifdef POST_COLOR_MATRIX_RED_BIAS
#undef POST_COLOR_MATRIX_RED_BIAS
#endif
#ifdef POST_COLOR_MATRIX_GREEN_BIAS
#undef POST_COLOR_MATRIX_GREEN_BIAS
#endif
#ifdef POST_COLOR_MATRIX_BLUE_BIAS
#undef POST_COLOR_MATRIX_BLUE_BIAS
#endif
#ifdef POST_COLOR_MATRIX_ALPHA_BIAS
#undef POST_COLOR_MATRIX_ALPHA_BIAS
#endif
#ifdef COLOR_TABLE
#undef COLOR_TABLE
#endif
#ifdef POST_CONVOLUTION_COLOR_TABLE
#undef POST_CONVOLUTION_COLOR_TABLE
#endif
#ifdef POST_COLOR_MATRIX_COLOR_TABLE
#undef POST_COLOR_MATRIX_COLOR_TABLE
#endif
#ifdef PROXY_COLOR_TABLE
#undef PROXY_COLOR_TABLE
#endif
#ifdef PROXY_POST_CONVOLUTION_COLOR_TABLE
#undef PROXY_POST_CONVOLUTION_COLOR_TABLE
#endif
#ifdef PROXY_POST_COLOR_MATRIX_COLOR_TABLE
#undef PROXY_POST_COLOR_MATRIX_COLOR_TABLE
#endif
#ifdef COLOR_TABLE_SCALE
#undef COLOR_TABLE_SCALE
#endif
#ifdef COLOR_TABLE_BIAS
#undef COLOR_TABLE_BIAS
#endif
#ifdef COLOR_TABLE_FORMAT
#undef COLOR_TABLE_FORMAT
#endif
#ifdef COLOR_TABLE_WIDTH
#undef COLOR_TABLE_WIDTH
#endif
#ifdef COLOR_TABLE_RED_SIZE
#undef COLOR_TABLE_RED_SIZE
#endif
#ifdef COLOR_TABLE_GREEN_SIZE
#undef COLOR_TABLE_GREEN_SIZE
#endif
#ifdef COLOR_TABLE_BLUE_SIZE
#undef COLOR_TABLE_BLUE_SIZE
#endif
#ifdef COLOR_TABLE_ALPHA_SIZE
#undef COLOR_TABLE_ALPHA_SIZE
#endif
#ifdef COLOR_TABLE_LUMINANCE_SIZE
#undef COLOR_TABLE_LUMINANCE_SIZE
#endif
#ifdef COLOR_TABLE_INTENSITY_SIZE
#undef COLOR_TABLE_INTENSITY_SIZE
#endif
#ifdef CONSTANT_BORDER
#undef CONSTANT_BORDER
#endif
#ifdef REPLICATE_BORDER
#undef REPLICATE_BORDER
#endif
#ifdef CONVOLUTION_BORDER_COLOR
#undef CONVOLUTION_BORDER_COLOR
#endif
#ifdef MATRIX_PALETTE_ARB
#undef MATRIX_PALETTE_ARB
#endif
#ifdef MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
#undef MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
#endif
#ifdef MAX_PALETTE_MATRICES_ARB
#undef MAX_PALETTE_MATRICES_ARB
#endif
#ifdef CURRENT_PALETTE_MATRIX_ARB
#undef CURRENT_PALETTE_MATRIX_ARB
#endif
#ifdef MATRIX_INDEX_ARRAY_ARB
#undef MATRIX_INDEX_ARRAY_ARB
#endif
#ifdef CURRENT_MATRIX_INDEX_ARB
#undef CURRENT_MATRIX_INDEX_ARB
#endif
#ifdef MATRIX_INDEX_ARRAY_SIZE_ARB
#undef MATRIX_INDEX_ARRAY_SIZE_ARB
#endif
#ifdef MATRIX_INDEX_ARRAY_TYPE_ARB
#undef MATRIX_INDEX_ARRAY_TYPE_ARB
#endif
#ifdef MATRIX_INDEX_ARRAY_STRIDE_ARB
#undef MATRIX_INDEX_ARRAY_STRIDE_ARB
#endif
#ifdef MATRIX_INDEX_ARRAY_POINTER_ARB
#undef MATRIX_INDEX_ARRAY_POINTER_ARB
#endif
#ifdef MULTISAMPLE_ARB
#undef MULTISAMPLE_ARB
#endif
#ifdef SAMPLE_ALPHA_TO_COVERAGE_ARB
#undef SAMPLE_ALPHA_TO_COVERAGE_ARB
#endif
#ifdef SAMPLE_ALPHA_TO_ONE_ARB
#undef SAMPLE_ALPHA_TO_ONE_ARB
#endif
#ifdef SAMPLE_COVERAGE_ARB
#undef SAMPLE_COVERAGE_ARB
#endif
#ifdef SAMPLE_BUFFERS_ARB
#undef SAMPLE_BUFFERS_ARB
#endif
#ifdef SAMPLES_ARB
#undef SAMPLES_ARB
#endif
#ifdef SAMPLE_COVERAGE_VALUE_ARB
#undef SAMPLE_COVERAGE_VALUE_ARB
#endif
#ifdef SAMPLE_COVERAGE_INVERT_ARB
#undef SAMPLE_COVERAGE_INVERT_ARB
#endif
#ifdef MULTISAMPLE_BIT_ARB
#undef MULTISAMPLE_BIT_ARB
#endif
#ifdef TEXTURE0_ARB
#undef TEXTURE0_ARB
#endif
#ifdef TEXTURE1_ARB
#undef TEXTURE1_ARB
#endif
#ifdef TEXTURE2_ARB
#undef TEXTURE2_ARB
#endif
#ifdef TEXTURE3_ARB
#undef TEXTURE3_ARB
#endif
#ifdef TEXTURE4_ARB
#undef TEXTURE4_ARB
#endif
#ifdef TEXTURE5_ARB
#undef TEXTURE5_ARB
#endif
#ifdef TEXTURE6_ARB
#undef TEXTURE6_ARB
#endif
#ifdef TEXTURE7_ARB
#undef TEXTURE7_ARB
#endif
#ifdef TEXTURE8_ARB
#undef TEXTURE8_ARB
#endif
#ifdef TEXTURE9_ARB
#undef TEXTURE9_ARB
#endif
#ifdef TEXTURE10_ARB
#undef TEXTURE10_ARB
#endif
#ifdef TEXTURE11_ARB
#undef TEXTURE11_ARB
#endif
#ifdef TEXTURE12_ARB
#undef TEXTURE12_ARB
#endif
#ifdef TEXTURE13_ARB
#undef TEXTURE13_ARB
#endif
#ifdef TEXTURE14_ARB
#undef TEXTURE14_ARB
#endif
#ifdef TEXTURE15_ARB
#undef TEXTURE15_ARB
#endif
#ifdef TEXTURE16_ARB
#undef TEXTURE16_ARB
#endif
#ifdef TEXTURE17_ARB
#undef TEXTURE17_ARB
#endif
#ifdef TEXTURE18_ARB
#undef TEXTURE18_ARB
#endif
#ifdef TEXTURE19_ARB
#undef TEXTURE19_ARB
#endif
#ifdef TEXTURE20_ARB
#undef TEXTURE20_ARB
#endif
#ifdef TEXTURE21_ARB
#undef TEXTURE21_ARB
#endif
#ifdef TEXTURE22_ARB
#undef TEXTURE22_ARB
#endif
#ifdef TEXTURE23_ARB
#undef TEXTURE23_ARB
#endif
#ifdef TEXTURE24_ARB
#undef TEXTURE24_ARB
#endif
#ifdef TEXTURE25_ARB
#undef TEXTURE25_ARB
#endif
#ifdef TEXTURE26_ARB
#undef TEXTURE26_ARB
#endif
#ifdef TEXTURE27_ARB
#undef TEXTURE27_ARB
#endif
#ifdef TEXTURE28_ARB
#undef TEXTURE28_ARB
#endif
#ifdef TEXTURE29_ARB
#undef TEXTURE29_ARB
#endif
#ifdef TEXTURE30_ARB
#undef TEXTURE30_ARB
#endif
#ifdef TEXTURE31_ARB
#undef TEXTURE31_ARB
#endif
#ifdef ACTIVE_TEXTURE_ARB
#undef ACTIVE_TEXTURE_ARB
#endif
#ifdef CLIENT_ACTIVE_TEXTURE_ARB
#undef CLIENT_ACTIVE_TEXTURE_ARB
#endif
#ifdef MAX_TEXTURE_UNITS_ARB
#undef MAX_TEXTURE_UNITS_ARB
#endif
#ifdef QUERY_COUNTER_BITS_ARB
#undef QUERY_COUNTER_BITS_ARB
#endif
#ifdef CURRENT_QUERY_ARB
#undef CURRENT_QUERY_ARB
#endif
#ifdef QUERY_RESULT_ARB
#undef QUERY_RESULT_ARB
#endif
#ifdef QUERY_RESULT_AVAILABLE_ARB
#undef QUERY_RESULT_AVAILABLE_ARB
#endif
#ifdef SAMPLES_PASSED_ARB
#undef SAMPLES_PASSED_ARB
#endif
#ifdef PIXEL_PACK_BUFFER_ARB
#undef PIXEL_PACK_BUFFER_ARB
#endif
#ifdef PIXEL_UNPACK_BUFFER_ARB
#undef PIXEL_UNPACK_BUFFER_ARB
#endif
#ifdef PIXEL_PACK_BUFFER_BINDING_ARB
#undef PIXEL_PACK_BUFFER_BINDING_ARB
#endif
#ifdef PIXEL_UNPACK_BUFFER_BINDING_ARB
#undef PIXEL_UNPACK_BUFFER_BINDING_ARB
#endif
#ifdef POINT_SIZE_MIN_ARB
#undef POINT_SIZE_MIN_ARB
#endif
#ifdef POINT_SIZE_MAX_ARB
#undef POINT_SIZE_MAX_ARB
#endif
#ifdef POINT_FADE_THRESHOLD_SIZE_ARB
#undef POINT_FADE_THRESHOLD_SIZE_ARB
#endif
#ifdef POINT_DISTANCE_ATTENUATION_ARB
#undef POINT_DISTANCE_ATTENUATION_ARB
#endif
#ifdef POINT_SPRITE_ARB
#undef POINT_SPRITE_ARB
#endif
#ifdef COORD_REPLACE_ARB
#undef COORD_REPLACE_ARB
#endif
#ifdef PROGRAM_OBJECT_ARB
#undef PROGRAM_OBJECT_ARB
#endif
#ifdef SHADER_OBJECT_ARB
#undef SHADER_OBJECT_ARB
#endif
#ifdef OBJECT_TYPE_ARB
#undef OBJECT_TYPE_ARB
#endif
#ifdef OBJECT_SUBTYPE_ARB
#undef OBJECT_SUBTYPE_ARB
#endif
#ifdef FLOAT_VEC2_ARB
#undef FLOAT_VEC2_ARB
#endif
#ifdef FLOAT_VEC3_ARB
#undef FLOAT_VEC3_ARB
#endif
#ifdef FLOAT_VEC4_ARB
#undef FLOAT_VEC4_ARB
#endif
#ifdef INT_VEC2_ARB
#undef INT_VEC2_ARB
#endif
#ifdef INT_VEC3_ARB
#undef INT_VEC3_ARB
#endif
#ifdef INT_VEC4_ARB
#undef INT_VEC4_ARB
#endif
#ifdef BOOL_ARB
#undef BOOL_ARB
#endif
#ifdef BOOL_VEC2_ARB
#undef BOOL_VEC2_ARB
#endif
#ifdef BOOL_VEC3_ARB
#undef BOOL_VEC3_ARB
#endif
#ifdef BOOL_VEC4_ARB
#undef BOOL_VEC4_ARB
#endif
#ifdef FLOAT_MAT2_ARB
#undef FLOAT_MAT2_ARB
#endif
#ifdef FLOAT_MAT3_ARB
#undef FLOAT_MAT3_ARB
#endif
#ifdef FLOAT_MAT4_ARB
#undef FLOAT_MAT4_ARB
#endif
#ifdef SAMPLER_1D_ARB
#undef SAMPLER_1D_ARB
#endif
#ifdef SAMPLER_2D_ARB
#undef SAMPLER_2D_ARB
#endif
#ifdef SAMPLER_3D_ARB
#undef SAMPLER_3D_ARB
#endif
#ifdef SAMPLER_CUBE_ARB
#undef SAMPLER_CUBE_ARB
#endif
#ifdef SAMPLER_1D_SHADOW_ARB
#undef SAMPLER_1D_SHADOW_ARB
#endif
#ifdef SAMPLER_2D_SHADOW_ARB
#undef SAMPLER_2D_SHADOW_ARB
#endif
#ifdef SAMPLER_2D_RECT_ARB
#undef SAMPLER_2D_RECT_ARB
#endif
#ifdef SAMPLER_2D_RECT_SHADOW_ARB
#undef SAMPLER_2D_RECT_SHADOW_ARB
#endif
#ifdef OBJECT_DELETE_STATUS_ARB
#undef OBJECT_DELETE_STATUS_ARB
#endif
#ifdef OBJECT_COMPILE_STATUS_ARB
#undef OBJECT_COMPILE_STATUS_ARB
#endif
#ifdef OBJECT_LINK_STATUS_ARB
#undef OBJECT_LINK_STATUS_ARB
#endif
#ifdef OBJECT_VALIDATE_STATUS_ARB
#undef OBJECT_VALIDATE_STATUS_ARB
#endif
#ifdef OBJECT_INFO_LOG_LENGTH_ARB
#undef OBJECT_INFO_LOG_LENGTH_ARB
#endif
#ifdef OBJECT_ATTACHED_OBJECTS_ARB
#undef OBJECT_ATTACHED_OBJECTS_ARB
#endif
#ifdef OBJECT_ACTIVE_UNIFORMS_ARB
#undef OBJECT_ACTIVE_UNIFORMS_ARB
#endif
#ifdef OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#undef OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
#endif
#ifdef OBJECT_SHADER_SOURCE_LENGTH_ARB
#undef OBJECT_SHADER_SOURCE_LENGTH_ARB
#endif
#ifdef SHADING_LANGUAGE_VERSION_ARB
#undef SHADING_LANGUAGE_VERSION_ARB
#endif
#ifdef TEXTURE_COMPARE_MODE_ARB
#undef TEXTURE_COMPARE_MODE_ARB
#endif
#ifdef TEXTURE_COMPARE_FUNC_ARB
#undef TEXTURE_COMPARE_FUNC_ARB
#endif
#ifdef COMPARE_R_TO_TEXTURE_ARB
#undef COMPARE_R_TO_TEXTURE_ARB
#endif
#ifdef TEXTURE_COMPARE_FAIL_VALUE_ARB
#undef TEXTURE_COMPARE_FAIL_VALUE_ARB
#endif
#ifdef CLAMP_TO_BORDER_ARB
#undef CLAMP_TO_BORDER_ARB
#endif
#ifdef COMPRESSED_ALPHA_ARB
#undef COMPRESSED_ALPHA_ARB
#endif
#ifdef COMPRESSED_LUMINANCE_ARB
#undef COMPRESSED_LUMINANCE_ARB
#endif
#ifdef COMPRESSED_LUMINANCE_ALPHA_ARB
#undef COMPRESSED_LUMINANCE_ALPHA_ARB
#endif
#ifdef COMPRESSED_INTENSITY_ARB
#undef COMPRESSED_INTENSITY_ARB
#endif
#ifdef COMPRESSED_RGB_ARB
#undef COMPRESSED_RGB_ARB
#endif
#ifdef COMPRESSED_RGBA_ARB
#undef COMPRESSED_RGBA_ARB
#endif
#ifdef TEXTURE_COMPRESSION_HINT_ARB
#undef TEXTURE_COMPRESSION_HINT_ARB
#endif
#ifdef TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
#undef TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
#endif
#ifdef TEXTURE_COMPRESSED_ARB
#undef TEXTURE_COMPRESSED_ARB
#endif
#ifdef NUM_COMPRESSED_TEXTURE_FORMATS_ARB
#undef NUM_COMPRESSED_TEXTURE_FORMATS_ARB
#endif
#ifdef COMPRESSED_TEXTURE_FORMATS_ARB
#undef COMPRESSED_TEXTURE_FORMATS_ARB
#endif
#ifdef NORMAL_MAP_ARB
#undef NORMAL_MAP_ARB
#endif
#ifdef REFLECTION_MAP_ARB
#undef REFLECTION_MAP_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_ARB
#undef TEXTURE_CUBE_MAP_ARB
#endif
#ifdef TEXTURE_BINDING_CUBE_MAP_ARB
#undef TEXTURE_BINDING_CUBE_MAP_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#undef TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#undef TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#undef TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#undef TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#undef TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#undef TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#endif
#ifdef PROXY_TEXTURE_CUBE_MAP_ARB
#undef PROXY_TEXTURE_CUBE_MAP_ARB
#endif
#ifdef MAX_CUBE_MAP_TEXTURE_SIZE_ARB
#undef MAX_CUBE_MAP_TEXTURE_SIZE_ARB
#endif
#ifdef COMBINE_ARB
#undef COMBINE_ARB
#endif
#ifdef COMBINE_RGB_ARB
#undef COMBINE_RGB_ARB
#endif
#ifdef COMBINE_ALPHA_ARB
#undef COMBINE_ALPHA_ARB
#endif
#ifdef SOURCE0_RGB_ARB
#undef SOURCE0_RGB_ARB
#endif
#ifdef SOURCE1_RGB_ARB
#undef SOURCE1_RGB_ARB
#endif
#ifdef SOURCE2_RGB_ARB
#undef SOURCE2_RGB_ARB
#endif
#ifdef SOURCE0_ALPHA_ARB
#undef SOURCE0_ALPHA_ARB
#endif
#ifdef SOURCE1_ALPHA_ARB
#undef SOURCE1_ALPHA_ARB
#endif
#ifdef SOURCE2_ALPHA_ARB
#undef SOURCE2_ALPHA_ARB
#endif
#ifdef OPERAND0_RGB_ARB
#undef OPERAND0_RGB_ARB
#endif
#ifdef OPERAND1_RGB_ARB
#undef OPERAND1_RGB_ARB
#endif
#ifdef OPERAND2_RGB_ARB
#undef OPERAND2_RGB_ARB
#endif
#ifdef OPERAND0_ALPHA_ARB
#undef OPERAND0_ALPHA_ARB
#endif
#ifdef OPERAND1_ALPHA_ARB
#undef OPERAND1_ALPHA_ARB
#endif
#ifdef OPERAND2_ALPHA_ARB
#undef OPERAND2_ALPHA_ARB
#endif
#ifdef RGB_SCALE_ARB
#undef RGB_SCALE_ARB
#endif
#ifdef ADD_SIGNED_ARB
#undef ADD_SIGNED_ARB
#endif
#ifdef INTERPOLATE_ARB
#undef INTERPOLATE_ARB
#endif
#ifdef SUBTRACT_ARB
#undef SUBTRACT_ARB
#endif
#ifdef CONSTANT_ARB
#undef CONSTANT_ARB
#endif
#ifdef PRIMARY_COLOR_ARB
#undef PRIMARY_COLOR_ARB
#endif
#ifdef PREVIOUS_ARB
#undef PREVIOUS_ARB
#endif
#ifdef DOT3_RGB_ARB
#undef DOT3_RGB_ARB
#endif
#ifdef DOT3_RGBA_ARB
#undef DOT3_RGBA_ARB
#endif
#ifdef TEXTURE_RED_TYPE_ARB
#undef TEXTURE_RED_TYPE_ARB
#endif
#ifdef TEXTURE_GREEN_TYPE_ARB
#undef TEXTURE_GREEN_TYPE_ARB
#endif
#ifdef TEXTURE_BLUE_TYPE_ARB
#undef TEXTURE_BLUE_TYPE_ARB
#endif
#ifdef TEXTURE_ALPHA_TYPE_ARB
#undef TEXTURE_ALPHA_TYPE_ARB
#endif
#ifdef TEXTURE_LUMINANCE_TYPE_ARB
#undef TEXTURE_LUMINANCE_TYPE_ARB
#endif
#ifdef TEXTURE_INTENSITY_TYPE_ARB
#undef TEXTURE_INTENSITY_TYPE_ARB
#endif
#ifdef TEXTURE_DEPTH_TYPE_ARB
#undef TEXTURE_DEPTH_TYPE_ARB
#endif
#ifdef UNSIGNED_NORMALIZED_ARB
#undef UNSIGNED_NORMALIZED_ARB
#endif
#ifdef RGBA32F_ARB
#undef RGBA32F_ARB
#endif
#ifdef RGB32F_ARB
#undef RGB32F_ARB
#endif
#ifdef ALPHA32F_ARB
#undef ALPHA32F_ARB
#endif
#ifdef INTENSITY32F_ARB
#undef INTENSITY32F_ARB
#endif
#ifdef LUMINANCE32F_ARB
#undef LUMINANCE32F_ARB
#endif
#ifdef LUMINANCE_ALPHA32F_ARB
#undef LUMINANCE_ALPHA32F_ARB
#endif
#ifdef RGBA16F_ARB
#undef RGBA16F_ARB
#endif
#ifdef RGB16F_ARB
#undef RGB16F_ARB
#endif
#ifdef ALPHA16F_ARB
#undef ALPHA16F_ARB
#endif
#ifdef INTENSITY16F_ARB
#undef INTENSITY16F_ARB
#endif
#ifdef LUMINANCE16F_ARB
#undef LUMINANCE16F_ARB
#endif
#ifdef LUMINANCE_ALPHA16F_ARB
#undef LUMINANCE_ALPHA16F_ARB
#endif
#ifdef MIRRORED_REPEAT_ARB
#undef MIRRORED_REPEAT_ARB
#endif
#ifdef TEXTURE_RECTANGLE_ARB
#undef TEXTURE_RECTANGLE_ARB
#endif
#ifdef TEXTURE_BINDING_RECTANGLE_ARB
#undef TEXTURE_BINDING_RECTANGLE_ARB
#endif
#ifdef PROXY_TEXTURE_RECTANGLE_ARB
#undef PROXY_TEXTURE_RECTANGLE_ARB
#endif
#ifdef MAX_RECTANGLE_TEXTURE_SIZE_ARB
#undef MAX_RECTANGLE_TEXTURE_SIZE_ARB
#endif
#ifdef TRANSPOSE_MODELVIEW_MATRIX_ARB
#undef TRANSPOSE_MODELVIEW_MATRIX_ARB
#endif
#ifdef TRANSPOSE_PROJECTION_MATRIX_ARB
#undef TRANSPOSE_PROJECTION_MATRIX_ARB
#endif
#ifdef TRANSPOSE_TEXTURE_MATRIX_ARB
#undef TRANSPOSE_TEXTURE_MATRIX_ARB
#endif
#ifdef TRANSPOSE_COLOR_MATRIX_ARB
#undef TRANSPOSE_COLOR_MATRIX_ARB
#endif
#ifdef MAX_VERTEX_UNITS_ARB
#undef MAX_VERTEX_UNITS_ARB
#endif
#ifdef ACTIVE_VERTEX_UNITS_ARB
#undef ACTIVE_VERTEX_UNITS_ARB
#endif
#ifdef WEIGHT_SUM_UNITY_ARB
#undef WEIGHT_SUM_UNITY_ARB
#endif
#ifdef VERTEX_BLEND_ARB
#undef VERTEX_BLEND_ARB
#endif
#ifdef CURRENT_WEIGHT_ARB
#undef CURRENT_WEIGHT_ARB
#endif
#ifdef WEIGHT_ARRAY_TYPE_ARB
#undef WEIGHT_ARRAY_TYPE_ARB
#endif
#ifdef WEIGHT_ARRAY_STRIDE_ARB
#undef WEIGHT_ARRAY_STRIDE_ARB
#endif
#ifdef WEIGHT_ARRAY_SIZE_ARB
#undef WEIGHT_ARRAY_SIZE_ARB
#endif
#ifdef WEIGHT_ARRAY_POINTER_ARB
#undef WEIGHT_ARRAY_POINTER_ARB
#endif
#ifdef WEIGHT_ARRAY_ARB
#undef WEIGHT_ARRAY_ARB
#endif
#ifdef MODELVIEW0_ARB
#undef MODELVIEW0_ARB
#endif
#ifdef MODELVIEW1_ARB
#undef MODELVIEW1_ARB
#endif
#ifdef MODELVIEW2_ARB
#undef MODELVIEW2_ARB
#endif
#ifdef MODELVIEW3_ARB
#undef MODELVIEW3_ARB
#endif
#ifdef MODELVIEW4_ARB
#undef MODELVIEW4_ARB
#endif
#ifdef MODELVIEW5_ARB
#undef MODELVIEW5_ARB
#endif
#ifdef MODELVIEW6_ARB
#undef MODELVIEW6_ARB
#endif
#ifdef MODELVIEW7_ARB
#undef MODELVIEW7_ARB
#endif
#ifdef MODELVIEW8_ARB
#undef MODELVIEW8_ARB
#endif
#ifdef MODELVIEW9_ARB
#undef MODELVIEW9_ARB
#endif
#ifdef MODELVIEW10_ARB
#undef MODELVIEW10_ARB
#endif
#ifdef MODELVIEW11_ARB
#undef MODELVIEW11_ARB
#endif
#ifdef MODELVIEW12_ARB
#undef MODELVIEW12_ARB
#endif
#ifdef MODELVIEW13_ARB
#undef MODELVIEW13_ARB
#endif
#ifdef MODELVIEW14_ARB
#undef MODELVIEW14_ARB
#endif
#ifdef MODELVIEW15_ARB
#undef MODELVIEW15_ARB
#endif
#ifdef MODELVIEW16_ARB
#undef MODELVIEW16_ARB
#endif
#ifdef MODELVIEW17_ARB
#undef MODELVIEW17_ARB
#endif
#ifdef MODELVIEW18_ARB
#undef MODELVIEW18_ARB
#endif
#ifdef MODELVIEW19_ARB
#undef MODELVIEW19_ARB
#endif
#ifdef MODELVIEW20_ARB
#undef MODELVIEW20_ARB
#endif
#ifdef MODELVIEW21_ARB
#undef MODELVIEW21_ARB
#endif
#ifdef MODELVIEW22_ARB
#undef MODELVIEW22_ARB
#endif
#ifdef MODELVIEW23_ARB
#undef MODELVIEW23_ARB
#endif
#ifdef MODELVIEW24_ARB
#undef MODELVIEW24_ARB
#endif
#ifdef MODELVIEW25_ARB
#undef MODELVIEW25_ARB
#endif
#ifdef MODELVIEW26_ARB
#undef MODELVIEW26_ARB
#endif
#ifdef MODELVIEW27_ARB
#undef MODELVIEW27_ARB
#endif
#ifdef MODELVIEW28_ARB
#undef MODELVIEW28_ARB
#endif
#ifdef MODELVIEW29_ARB
#undef MODELVIEW29_ARB
#endif
#ifdef MODELVIEW30_ARB
#undef MODELVIEW30_ARB
#endif
#ifdef MODELVIEW31_ARB
#undef MODELVIEW31_ARB
#endif
#ifdef BUFFER_SIZE_ARB
#undef BUFFER_SIZE_ARB
#endif
#ifdef BUFFER_USAGE_ARB
#undef BUFFER_USAGE_ARB
#endif
#ifdef ARRAY_BUFFER_ARB
#undef ARRAY_BUFFER_ARB
#endif
#ifdef ELEMENT_ARRAY_BUFFER_ARB
#undef ELEMENT_ARRAY_BUFFER_ARB
#endif
#ifdef ARRAY_BUFFER_BINDING_ARB
#undef ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef ELEMENT_ARRAY_BUFFER_BINDING_ARB
#undef ELEMENT_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef VERTEX_ARRAY_BUFFER_BINDING_ARB
#undef VERTEX_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef NORMAL_ARRAY_BUFFER_BINDING_ARB
#undef NORMAL_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef COLOR_ARRAY_BUFFER_BINDING_ARB
#undef COLOR_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef INDEX_ARRAY_BUFFER_BINDING_ARB
#undef INDEX_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
#undef TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
#undef EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
#undef SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
#undef FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef WEIGHT_ARRAY_BUFFER_BINDING_ARB
#undef WEIGHT_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
#undef VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
#endif
#ifdef READ_ONLY_ARB
#undef READ_ONLY_ARB
#endif
#ifdef WRITE_ONLY_ARB
#undef WRITE_ONLY_ARB
#endif
#ifdef READ_WRITE_ARB
#undef READ_WRITE_ARB
#endif
#ifdef BUFFER_ACCESS_ARB
#undef BUFFER_ACCESS_ARB
#endif
#ifdef BUFFER_MAPPED_ARB
#undef BUFFER_MAPPED_ARB
#endif
#ifdef BUFFER_MAP_POINTER_ARB
#undef BUFFER_MAP_POINTER_ARB
#endif
#ifdef STREAM_DRAW_ARB
#undef STREAM_DRAW_ARB
#endif
#ifdef STREAM_READ_ARB
#undef STREAM_READ_ARB
#endif
#ifdef STREAM_COPY_ARB
#undef STREAM_COPY_ARB
#endif
#ifdef STATIC_DRAW_ARB
#undef STATIC_DRAW_ARB
#endif
#ifdef STATIC_READ_ARB
#undef STATIC_READ_ARB
#endif
#ifdef STATIC_COPY_ARB
#undef STATIC_COPY_ARB
#endif
#ifdef DYNAMIC_DRAW_ARB
#undef DYNAMIC_DRAW_ARB
#endif
#ifdef DYNAMIC_READ_ARB
#undef DYNAMIC_READ_ARB
#endif
#ifdef DYNAMIC_COPY_ARB
#undef DYNAMIC_COPY_ARB
#endif
#ifdef COLOR_SUM_ARB
#undef COLOR_SUM_ARB
#endif
#ifdef VERTEX_PROGRAM_ARB
#undef VERTEX_PROGRAM_ARB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#undef VERTEX_ATTRIB_ARRAY_ENABLED_ARB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_SIZE_ARB
#undef VERTEX_ATTRIB_ARRAY_SIZE_ARB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#undef VERTEX_ATTRIB_ARRAY_STRIDE_ARB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_TYPE_ARB
#undef VERTEX_ATTRIB_ARRAY_TYPE_ARB
#endif
#ifdef CURRENT_VERTEX_ATTRIB_ARB
#undef CURRENT_VERTEX_ATTRIB_ARB
#endif
#ifdef PROGRAM_LENGTH_ARB
#undef PROGRAM_LENGTH_ARB
#endif
#ifdef PROGRAM_STRING_ARB
#undef PROGRAM_STRING_ARB
#endif
#ifdef MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#undef MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
#endif
#ifdef MAX_PROGRAM_MATRICES_ARB
#undef MAX_PROGRAM_MATRICES_ARB
#endif
#ifdef CURRENT_MATRIX_STACK_DEPTH_ARB
#undef CURRENT_MATRIX_STACK_DEPTH_ARB
#endif
#ifdef CURRENT_MATRIX_ARB
#undef CURRENT_MATRIX_ARB
#endif
#ifdef VERTEX_PROGRAM_POINT_SIZE_ARB
#undef VERTEX_PROGRAM_POINT_SIZE_ARB
#endif
#ifdef VERTEX_PROGRAM_TWO_SIDE_ARB
#undef VERTEX_PROGRAM_TWO_SIDE_ARB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_POINTER_ARB
#undef VERTEX_ATTRIB_ARRAY_POINTER_ARB
#endif
#ifdef PROGRAM_ERROR_POSITION_ARB
#undef PROGRAM_ERROR_POSITION_ARB
#endif
#ifdef PROGRAM_BINDING_ARB
#undef PROGRAM_BINDING_ARB
#endif
#ifdef MAX_VERTEX_ATTRIBS_ARB
#undef MAX_VERTEX_ATTRIBS_ARB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#undef VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
#endif
#ifdef PROGRAM_ERROR_STRING_ARB
#undef PROGRAM_ERROR_STRING_ARB
#endif
#ifdef PROGRAM_FORMAT_ASCII_ARB
#undef PROGRAM_FORMAT_ASCII_ARB
#endif
#ifdef PROGRAM_FORMAT_ARB
#undef PROGRAM_FORMAT_ARB
#endif
#ifdef PROGRAM_INSTRUCTIONS_ARB
#undef PROGRAM_INSTRUCTIONS_ARB
#endif
#ifdef MAX_PROGRAM_INSTRUCTIONS_ARB
#undef MAX_PROGRAM_INSTRUCTIONS_ARB
#endif
#ifdef PROGRAM_NATIVE_INSTRUCTIONS_ARB
#undef PROGRAM_NATIVE_INSTRUCTIONS_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#undef MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
#endif
#ifdef PROGRAM_TEMPORARIES_ARB
#undef PROGRAM_TEMPORARIES_ARB
#endif
#ifdef MAX_PROGRAM_TEMPORARIES_ARB
#undef MAX_PROGRAM_TEMPORARIES_ARB
#endif
#ifdef PROGRAM_NATIVE_TEMPORARIES_ARB
#undef PROGRAM_NATIVE_TEMPORARIES_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#undef MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
#endif
#ifdef PROGRAM_PARAMETERS_ARB
#undef PROGRAM_PARAMETERS_ARB
#endif
#ifdef MAX_PROGRAM_PARAMETERS_ARB
#undef MAX_PROGRAM_PARAMETERS_ARB
#endif
#ifdef PROGRAM_NATIVE_PARAMETERS_ARB
#undef PROGRAM_NATIVE_PARAMETERS_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#undef MAX_PROGRAM_NATIVE_PARAMETERS_ARB
#endif
#ifdef PROGRAM_ATTRIBS_ARB
#undef PROGRAM_ATTRIBS_ARB
#endif
#ifdef MAX_PROGRAM_ATTRIBS_ARB
#undef MAX_PROGRAM_ATTRIBS_ARB
#endif
#ifdef PROGRAM_NATIVE_ATTRIBS_ARB
#undef PROGRAM_NATIVE_ATTRIBS_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#undef MAX_PROGRAM_NATIVE_ATTRIBS_ARB
#endif
#ifdef PROGRAM_ADDRESS_REGISTERS_ARB
#undef PROGRAM_ADDRESS_REGISTERS_ARB
#endif
#ifdef MAX_PROGRAM_ADDRESS_REGISTERS_ARB
#undef MAX_PROGRAM_ADDRESS_REGISTERS_ARB
#endif
#ifdef PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#undef PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#endif
#ifdef MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#undef MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
#endif
#ifdef MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#undef MAX_PROGRAM_LOCAL_PARAMETERS_ARB
#endif
#ifdef MAX_PROGRAM_ENV_PARAMETERS_ARB
#undef MAX_PROGRAM_ENV_PARAMETERS_ARB
#endif
#ifdef PROGRAM_UNDER_NATIVE_LIMITS_ARB
#undef PROGRAM_UNDER_NATIVE_LIMITS_ARB
#endif
#ifdef TRANSPOSE_CURRENT_MATRIX_ARB
#undef TRANSPOSE_CURRENT_MATRIX_ARB
#endif
#ifdef MATRIX0_ARB
#undef MATRIX0_ARB
#endif
#ifdef MATRIX1_ARB
#undef MATRIX1_ARB
#endif
#ifdef MATRIX2_ARB
#undef MATRIX2_ARB
#endif
#ifdef MATRIX3_ARB
#undef MATRIX3_ARB
#endif
#ifdef MATRIX4_ARB
#undef MATRIX4_ARB
#endif
#ifdef MATRIX5_ARB
#undef MATRIX5_ARB
#endif
#ifdef MATRIX6_ARB
#undef MATRIX6_ARB
#endif
#ifdef MATRIX7_ARB
#undef MATRIX7_ARB
#endif
#ifdef MATRIX8_ARB
#undef MATRIX8_ARB
#endif
#ifdef MATRIX9_ARB
#undef MATRIX9_ARB
#endif
#ifdef MATRIX10_ARB
#undef MATRIX10_ARB
#endif
#ifdef MATRIX11_ARB
#undef MATRIX11_ARB
#endif
#ifdef MATRIX12_ARB
#undef MATRIX12_ARB
#endif
#ifdef MATRIX13_ARB
#undef MATRIX13_ARB
#endif
#ifdef MATRIX14_ARB
#undef MATRIX14_ARB
#endif
#ifdef MATRIX15_ARB
#undef MATRIX15_ARB
#endif
#ifdef MATRIX16_ARB
#undef MATRIX16_ARB
#endif
#ifdef MATRIX17_ARB
#undef MATRIX17_ARB
#endif
#ifdef MATRIX18_ARB
#undef MATRIX18_ARB
#endif
#ifdef MATRIX19_ARB
#undef MATRIX19_ARB
#endif
#ifdef MATRIX20_ARB
#undef MATRIX20_ARB
#endif
#ifdef MATRIX21_ARB
#undef MATRIX21_ARB
#endif
#ifdef MATRIX22_ARB
#undef MATRIX22_ARB
#endif
#ifdef MATRIX23_ARB
#undef MATRIX23_ARB
#endif
#ifdef MATRIX24_ARB
#undef MATRIX24_ARB
#endif
#ifdef MATRIX25_ARB
#undef MATRIX25_ARB
#endif
#ifdef MATRIX26_ARB
#undef MATRIX26_ARB
#endif
#ifdef MATRIX27_ARB
#undef MATRIX27_ARB
#endif
#ifdef MATRIX28_ARB
#undef MATRIX28_ARB
#endif
#ifdef MATRIX29_ARB
#undef MATRIX29_ARB
#endif
#ifdef MATRIX30_ARB
#undef MATRIX30_ARB
#endif
#ifdef MATRIX31_ARB
#undef MATRIX31_ARB
#endif
#ifdef VERTEX_SHADER_ARB
#undef VERTEX_SHADER_ARB
#endif
#ifdef MAX_VERTEX_UNIFORM_COMPONENTS_ARB
#undef MAX_VERTEX_UNIFORM_COMPONENTS_ARB
#endif
#ifdef MAX_VARYING_FLOATS_ARB
#undef MAX_VARYING_FLOATS_ARB
#endif
#ifdef MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#undef MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
#endif
#ifdef MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
#undef MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
#endif
#ifdef OBJECT_ACTIVE_ATTRIBUTES_ARB
#undef OBJECT_ACTIVE_ATTRIBUTES_ARB
#endif
#ifdef OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
#undef OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
#endif
#ifdef MAX_DRAW_BUFFERS_ATI
#undef MAX_DRAW_BUFFERS_ATI
#endif
#ifdef DRAW_BUFFER0_ATI
#undef DRAW_BUFFER0_ATI
#endif
#ifdef DRAW_BUFFER1_ATI
#undef DRAW_BUFFER1_ATI
#endif
#ifdef DRAW_BUFFER2_ATI
#undef DRAW_BUFFER2_ATI
#endif
#ifdef DRAW_BUFFER3_ATI
#undef DRAW_BUFFER3_ATI
#endif
#ifdef DRAW_BUFFER4_ATI
#undef DRAW_BUFFER4_ATI
#endif
#ifdef DRAW_BUFFER5_ATI
#undef DRAW_BUFFER5_ATI
#endif
#ifdef DRAW_BUFFER6_ATI
#undef DRAW_BUFFER6_ATI
#endif
#ifdef DRAW_BUFFER7_ATI
#undef DRAW_BUFFER7_ATI
#endif
#ifdef DRAW_BUFFER8_ATI
#undef DRAW_BUFFER8_ATI
#endif
#ifdef DRAW_BUFFER9_ATI
#undef DRAW_BUFFER9_ATI
#endif
#ifdef DRAW_BUFFER10_ATI
#undef DRAW_BUFFER10_ATI
#endif
#ifdef DRAW_BUFFER11_ATI
#undef DRAW_BUFFER11_ATI
#endif
#ifdef DRAW_BUFFER12_ATI
#undef DRAW_BUFFER12_ATI
#endif
#ifdef DRAW_BUFFER13_ATI
#undef DRAW_BUFFER13_ATI
#endif
#ifdef DRAW_BUFFER14_ATI
#undef DRAW_BUFFER14_ATI
#endif
#ifdef DRAW_BUFFER15_ATI
#undef DRAW_BUFFER15_ATI
#endif
#ifdef ELEMENT_ARRAY_ATI
#undef ELEMENT_ARRAY_ATI
#endif
#ifdef ELEMENT_ARRAY_TYPE_ATI
#undef ELEMENT_ARRAY_TYPE_ATI
#endif
#ifdef ELEMENT_ARRAY_POINTER_ATI
#undef ELEMENT_ARRAY_POINTER_ATI
#endif
#ifdef BUMP_ROT_MATRIX_ATI
#undef BUMP_ROT_MATRIX_ATI
#endif
#ifdef BUMP_ROT_MATRIX_SIZE_ATI
#undef BUMP_ROT_MATRIX_SIZE_ATI
#endif
#ifdef BUMP_NUM_TEX_UNITS_ATI
#undef BUMP_NUM_TEX_UNITS_ATI
#endif
#ifdef BUMP_TEX_UNITS_ATI
#undef BUMP_TEX_UNITS_ATI
#endif
#ifdef DUDV_ATI
#undef DUDV_ATI
#endif
#ifdef DU8DV8_ATI
#undef DU8DV8_ATI
#endif
#ifdef BUMP_ENVMAP_ATI
#undef BUMP_ENVMAP_ATI
#endif
#ifdef BUMP_TARGET_ATI
#undef BUMP_TARGET_ATI
#endif
#ifdef FRAGMENT_SHADER_ATI
#undef FRAGMENT_SHADER_ATI
#endif
#ifdef REG_0_ATI
#undef REG_0_ATI
#endif
#ifdef REG_1_ATI
#undef REG_1_ATI
#endif
#ifdef REG_2_ATI
#undef REG_2_ATI
#endif
#ifdef REG_3_ATI
#undef REG_3_ATI
#endif
#ifdef REG_4_ATI
#undef REG_4_ATI
#endif
#ifdef REG_5_ATI
#undef REG_5_ATI
#endif
#ifdef REG_6_ATI
#undef REG_6_ATI
#endif
#ifdef REG_7_ATI
#undef REG_7_ATI
#endif
#ifdef REG_8_ATI
#undef REG_8_ATI
#endif
#ifdef REG_9_ATI
#undef REG_9_ATI
#endif
#ifdef REG_10_ATI
#undef REG_10_ATI
#endif
#ifdef REG_11_ATI
#undef REG_11_ATI
#endif
#ifdef REG_12_ATI
#undef REG_12_ATI
#endif
#ifdef REG_13_ATI
#undef REG_13_ATI
#endif
#ifdef REG_14_ATI
#undef REG_14_ATI
#endif
#ifdef REG_15_ATI
#undef REG_15_ATI
#endif
#ifdef REG_16_ATI
#undef REG_16_ATI
#endif
#ifdef REG_17_ATI
#undef REG_17_ATI
#endif
#ifdef REG_18_ATI
#undef REG_18_ATI
#endif
#ifdef REG_19_ATI
#undef REG_19_ATI
#endif
#ifdef REG_20_ATI
#undef REG_20_ATI
#endif
#ifdef REG_21_ATI
#undef REG_21_ATI
#endif
#ifdef REG_22_ATI
#undef REG_22_ATI
#endif
#ifdef REG_23_ATI
#undef REG_23_ATI
#endif
#ifdef REG_24_ATI
#undef REG_24_ATI
#endif
#ifdef REG_25_ATI
#undef REG_25_ATI
#endif
#ifdef REG_26_ATI
#undef REG_26_ATI
#endif
#ifdef REG_27_ATI
#undef REG_27_ATI
#endif
#ifdef REG_28_ATI
#undef REG_28_ATI
#endif
#ifdef REG_29_ATI
#undef REG_29_ATI
#endif
#ifdef REG_30_ATI
#undef REG_30_ATI
#endif
#ifdef REG_31_ATI
#undef REG_31_ATI
#endif
#ifdef CON_0_ATI
#undef CON_0_ATI
#endif
#ifdef CON_1_ATI
#undef CON_1_ATI
#endif
#ifdef CON_2_ATI
#undef CON_2_ATI
#endif
#ifdef CON_3_ATI
#undef CON_3_ATI
#endif
#ifdef CON_4_ATI
#undef CON_4_ATI
#endif
#ifdef CON_5_ATI
#undef CON_5_ATI
#endif
#ifdef CON_6_ATI
#undef CON_6_ATI
#endif
#ifdef CON_7_ATI
#undef CON_7_ATI
#endif
#ifdef CON_8_ATI
#undef CON_8_ATI
#endif
#ifdef CON_9_ATI
#undef CON_9_ATI
#endif
#ifdef CON_10_ATI
#undef CON_10_ATI
#endif
#ifdef CON_11_ATI
#undef CON_11_ATI
#endif
#ifdef CON_12_ATI
#undef CON_12_ATI
#endif
#ifdef CON_13_ATI
#undef CON_13_ATI
#endif
#ifdef CON_14_ATI
#undef CON_14_ATI
#endif
#ifdef CON_15_ATI
#undef CON_15_ATI
#endif
#ifdef CON_16_ATI
#undef CON_16_ATI
#endif
#ifdef CON_17_ATI
#undef CON_17_ATI
#endif
#ifdef CON_18_ATI
#undef CON_18_ATI
#endif
#ifdef CON_19_ATI
#undef CON_19_ATI
#endif
#ifdef CON_20_ATI
#undef CON_20_ATI
#endif
#ifdef CON_21_ATI
#undef CON_21_ATI
#endif
#ifdef CON_22_ATI
#undef CON_22_ATI
#endif
#ifdef CON_23_ATI
#undef CON_23_ATI
#endif
#ifdef CON_24_ATI
#undef CON_24_ATI
#endif
#ifdef CON_25_ATI
#undef CON_25_ATI
#endif
#ifdef CON_26_ATI
#undef CON_26_ATI
#endif
#ifdef CON_27_ATI
#undef CON_27_ATI
#endif
#ifdef CON_28_ATI
#undef CON_28_ATI
#endif
#ifdef CON_29_ATI
#undef CON_29_ATI
#endif
#ifdef CON_30_ATI
#undef CON_30_ATI
#endif
#ifdef CON_31_ATI
#undef CON_31_ATI
#endif
#ifdef MOV_ATI
#undef MOV_ATI
#endif
#ifdef ADD_ATI
#undef ADD_ATI
#endif
#ifdef MUL_ATI
#undef MUL_ATI
#endif
#ifdef SUB_ATI
#undef SUB_ATI
#endif
#ifdef DOT3_ATI
#undef DOT3_ATI
#endif
#ifdef DOT4_ATI
#undef DOT4_ATI
#endif
#ifdef MAD_ATI
#undef MAD_ATI
#endif
#ifdef LERP_ATI
#undef LERP_ATI
#endif
#ifdef CND_ATI
#undef CND_ATI
#endif
#ifdef CND0_ATI
#undef CND0_ATI
#endif
#ifdef DOT2_ADD_ATI
#undef DOT2_ADD_ATI
#endif
#ifdef SECONDARY_INTERPOLATOR_ATI
#undef SECONDARY_INTERPOLATOR_ATI
#endif
#ifdef NUM_FRAGMENT_REGISTERS_ATI
#undef NUM_FRAGMENT_REGISTERS_ATI
#endif
#ifdef NUM_FRAGMENT_CONSTANTS_ATI
#undef NUM_FRAGMENT_CONSTANTS_ATI
#endif
#ifdef NUM_PASSES_ATI
#undef NUM_PASSES_ATI
#endif
#ifdef NUM_INSTRUCTIONS_PER_PASS_ATI
#undef NUM_INSTRUCTIONS_PER_PASS_ATI
#endif
#ifdef NUM_INSTRUCTIONS_TOTAL_ATI
#undef NUM_INSTRUCTIONS_TOTAL_ATI
#endif
#ifdef NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
#undef NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
#endif
#ifdef NUM_LOOPBACK_COMPONENTS_ATI
#undef NUM_LOOPBACK_COMPONENTS_ATI
#endif
#ifdef COLOR_ALPHA_PAIRING_ATI
#undef COLOR_ALPHA_PAIRING_ATI
#endif
#ifdef SWIZZLE_STR_ATI
#undef SWIZZLE_STR_ATI
#endif
#ifdef SWIZZLE_STQ_ATI
#undef SWIZZLE_STQ_ATI
#endif
#ifdef SWIZZLE_STR_DR_ATI
#undef SWIZZLE_STR_DR_ATI
#endif
#ifdef SWIZZLE_STQ_DQ_ATI
#undef SWIZZLE_STQ_DQ_ATI
#endif
#ifdef SWIZZLE_STRQ_ATI
#undef SWIZZLE_STRQ_ATI
#endif
#ifdef SWIZZLE_STRQ_DQ_ATI
#undef SWIZZLE_STRQ_DQ_ATI
#endif
#ifdef RED_BIT_ATI
#undef RED_BIT_ATI
#endif
#ifdef GREEN_BIT_ATI
#undef GREEN_BIT_ATI
#endif
#ifdef BLUE_BIT_ATI
#undef BLUE_BIT_ATI
#endif
#ifdef _2X_BIT_ATI
#undef _2X_BIT_ATI
#endif
#ifdef _4X_BIT_ATI
#undef _4X_BIT_ATI
#endif
#ifdef _8X_BIT_ATI
#undef _8X_BIT_ATI
#endif
#ifdef HALF_BIT_ATI
#undef HALF_BIT_ATI
#endif
#ifdef QUARTER_BIT_ATI
#undef QUARTER_BIT_ATI
#endif
#ifdef EIGHTH_BIT_ATI
#undef EIGHTH_BIT_ATI
#endif
#ifdef SATURATE_BIT_ATI
#undef SATURATE_BIT_ATI
#endif
#ifdef COMP_BIT_ATI
#undef COMP_BIT_ATI
#endif
#ifdef NEGATE_BIT_ATI
#undef NEGATE_BIT_ATI
#endif
#ifdef BIAS_BIT_ATI
#undef BIAS_BIT_ATI
#endif
#ifdef TYPE_RGBA_FLOAT_ATI
#undef TYPE_RGBA_FLOAT_ATI
#endif
#ifdef COLOR_CLEAR_UNCLAMPED_VALUE_ATI
#undef COLOR_CLEAR_UNCLAMPED_VALUE_ATI
#endif
#ifdef PN_TRIANGLES_ATI
#undef PN_TRIANGLES_ATI
#endif
#ifdef MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#undef MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
#endif
#ifdef PN_TRIANGLES_POINT_MODE_ATI
#undef PN_TRIANGLES_POINT_MODE_ATI
#endif
#ifdef PN_TRIANGLES_NORMAL_MODE_ATI
#undef PN_TRIANGLES_NORMAL_MODE_ATI
#endif
#ifdef PN_TRIANGLES_TESSELATION_LEVEL_ATI
#undef PN_TRIANGLES_TESSELATION_LEVEL_ATI
#endif
#ifdef PN_TRIANGLES_POINT_MODE_LINEAR_ATI
#undef PN_TRIANGLES_POINT_MODE_LINEAR_ATI
#endif
#ifdef PN_TRIANGLES_POINT_MODE_CUBIC_ATI
#undef PN_TRIANGLES_POINT_MODE_CUBIC_ATI
#endif
#ifdef PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
#undef PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
#endif
#ifdef PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
#undef PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
#endif
#ifdef STENCIL_BACK_FUNC_ATI
#undef STENCIL_BACK_FUNC_ATI
#endif
#ifdef STENCIL_BACK_FAIL_ATI
#undef STENCIL_BACK_FAIL_ATI
#endif
#ifdef STENCIL_BACK_PASS_DEPTH_FAIL_ATI
#undef STENCIL_BACK_PASS_DEPTH_FAIL_ATI
#endif
#ifdef STENCIL_BACK_PASS_DEPTH_PASS_ATI
#undef STENCIL_BACK_PASS_DEPTH_PASS_ATI
#endif
#ifdef TEXT_FRAGMENT_SHADER_ATI
#undef TEXT_FRAGMENT_SHADER_ATI
#endif
#ifdef MODULATE_ADD_ATI
#undef MODULATE_ADD_ATI
#endif
#ifdef MODULATE_SIGNED_ADD_ATI
#undef MODULATE_SIGNED_ADD_ATI
#endif
#ifdef MODULATE_SUBTRACT_ATI
#undef MODULATE_SUBTRACT_ATI
#endif
#ifdef RGBA_FLOAT32_ATI
#undef RGBA_FLOAT32_ATI
#endif
#ifdef RGB_FLOAT32_ATI
#undef RGB_FLOAT32_ATI
#endif
#ifdef ALPHA_FLOAT32_ATI
#undef ALPHA_FLOAT32_ATI
#endif
#ifdef INTENSITY_FLOAT32_ATI
#undef INTENSITY_FLOAT32_ATI
#endif
#ifdef LUMINANCE_FLOAT32_ATI
#undef LUMINANCE_FLOAT32_ATI
#endif
#ifdef LUMINANCE_ALPHA_FLOAT32_ATI
#undef LUMINANCE_ALPHA_FLOAT32_ATI
#endif
#ifdef RGBA_FLOAT16_ATI
#undef RGBA_FLOAT16_ATI
#endif
#ifdef RGB_FLOAT16_ATI
#undef RGB_FLOAT16_ATI
#endif
#ifdef ALPHA_FLOAT16_ATI
#undef ALPHA_FLOAT16_ATI
#endif
#ifdef INTENSITY_FLOAT16_ATI
#undef INTENSITY_FLOAT16_ATI
#endif
#ifdef LUMINANCE_FLOAT16_ATI
#undef LUMINANCE_FLOAT16_ATI
#endif
#ifdef LUMINANCE_ALPHA_FLOAT16_ATI
#undef LUMINANCE_ALPHA_FLOAT16_ATI
#endif
#ifdef MIRROR_CLAMP_ATI
#undef MIRROR_CLAMP_ATI
#endif
#ifdef MIRROR_CLAMP_TO_EDGE_ATI
#undef MIRROR_CLAMP_TO_EDGE_ATI
#endif
#ifdef STATIC_ATI
#undef STATIC_ATI
#endif
#ifdef DYNAMIC_ATI
#undef DYNAMIC_ATI
#endif
#ifdef PRESERVE_ATI
#undef PRESERVE_ATI
#endif
#ifdef DISCARD_ATI
#undef DISCARD_ATI
#endif
#ifdef OBJECT_BUFFER_SIZE_ATI
#undef OBJECT_BUFFER_SIZE_ATI
#endif
#ifdef OBJECT_BUFFER_USAGE_ATI
#undef OBJECT_BUFFER_USAGE_ATI
#endif
#ifdef ARRAY_OBJECT_BUFFER_ATI
#undef ARRAY_OBJECT_BUFFER_ATI
#endif
#ifdef ARRAY_OBJECT_OFFSET_ATI
#undef ARRAY_OBJECT_OFFSET_ATI
#endif
#ifdef MAX_VERTEX_STREAMS_ATI
#undef MAX_VERTEX_STREAMS_ATI
#endif
#ifdef VERTEX_STREAM0_ATI
#undef VERTEX_STREAM0_ATI
#endif
#ifdef VERTEX_STREAM1_ATI
#undef VERTEX_STREAM1_ATI
#endif
#ifdef VERTEX_STREAM2_ATI
#undef VERTEX_STREAM2_ATI
#endif
#ifdef VERTEX_STREAM3_ATI
#undef VERTEX_STREAM3_ATI
#endif
#ifdef VERTEX_STREAM4_ATI
#undef VERTEX_STREAM4_ATI
#endif
#ifdef VERTEX_STREAM5_ATI
#undef VERTEX_STREAM5_ATI
#endif
#ifdef VERTEX_STREAM6_ATI
#undef VERTEX_STREAM6_ATI
#endif
#ifdef VERTEX_STREAM7_ATI
#undef VERTEX_STREAM7_ATI
#endif
#ifdef VERTEX_SOURCE_ATI
#undef VERTEX_SOURCE_ATI
#endif
#ifdef _422_EXT
#undef _422_EXT
#endif
#ifdef _422_REV_EXT
#undef _422_REV_EXT
#endif
#ifdef _422_AVERAGE_EXT
#undef _422_AVERAGE_EXT
#endif
#ifdef _422_REV_AVERAGE_EXT
#undef _422_REV_AVERAGE_EXT
#endif
#ifdef ABGR_EXT
#undef ABGR_EXT
#endif
#ifdef BGR_EXT
#undef BGR_EXT
#endif
#ifdef BGRA_EXT
#undef BGRA_EXT
#endif
#ifdef CONSTANT_COLOR_EXT
#undef CONSTANT_COLOR_EXT
#endif
#ifdef ONE_MINUS_CONSTANT_COLOR_EXT
#undef ONE_MINUS_CONSTANT_COLOR_EXT
#endif
#ifdef CONSTANT_ALPHA_EXT
#undef CONSTANT_ALPHA_EXT
#endif
#ifdef ONE_MINUS_CONSTANT_ALPHA_EXT
#undef ONE_MINUS_CONSTANT_ALPHA_EXT
#endif
#ifdef BLEND_COLOR_EXT
#undef BLEND_COLOR_EXT
#endif
#ifdef BLEND_EQUATION_RGB_EXT
#undef BLEND_EQUATION_RGB_EXT
#endif
#ifdef BLEND_EQUATION_ALPHA_EXT
#undef BLEND_EQUATION_ALPHA_EXT
#endif
#ifdef BLEND_DST_RGB_EXT
#undef BLEND_DST_RGB_EXT
#endif
#ifdef BLEND_SRC_RGB_EXT
#undef BLEND_SRC_RGB_EXT
#endif
#ifdef BLEND_DST_ALPHA_EXT
#undef BLEND_DST_ALPHA_EXT
#endif
#ifdef BLEND_SRC_ALPHA_EXT
#undef BLEND_SRC_ALPHA_EXT
#endif
#ifdef FUNC_ADD_EXT
#undef FUNC_ADD_EXT
#endif
#ifdef MIN_EXT
#undef MIN_EXT
#endif
#ifdef MAX_EXT
#undef MAX_EXT
#endif
#ifdef BLEND_EQUATION_EXT
#undef BLEND_EQUATION_EXT
#endif
#ifdef FUNC_SUBTRACT_EXT
#undef FUNC_SUBTRACT_EXT
#endif
#ifdef FUNC_REVERSE_SUBTRACT_EXT
#undef FUNC_REVERSE_SUBTRACT_EXT
#endif
#ifdef CLIP_VOLUME_CLIPPING_HINT_EXT
#undef CLIP_VOLUME_CLIPPING_HINT_EXT
#endif
#ifdef CMYK_EXT
#undef CMYK_EXT
#endif
#ifdef CMYKA_EXT
#undef CMYKA_EXT
#endif
#ifdef PACK_CMYK_HINT_EXT
#undef PACK_CMYK_HINT_EXT
#endif
#ifdef UNPACK_CMYK_HINT_EXT
#undef UNPACK_CMYK_HINT_EXT
#endif
#ifdef ARRAY_ELEMENT_LOCK_FIRST_EXT
#undef ARRAY_ELEMENT_LOCK_FIRST_EXT
#endif
#ifdef ARRAY_ELEMENT_LOCK_COUNT_EXT
#undef ARRAY_ELEMENT_LOCK_COUNT_EXT
#endif
#ifdef CONVOLUTION_1D_EXT
#undef CONVOLUTION_1D_EXT
#endif
#ifdef CONVOLUTION_2D_EXT
#undef CONVOLUTION_2D_EXT
#endif
#ifdef SEPARABLE_2D_EXT
#undef SEPARABLE_2D_EXT
#endif
#ifdef CONVOLUTION_BORDER_MODE_EXT
#undef CONVOLUTION_BORDER_MODE_EXT
#endif
#ifdef CONVOLUTION_FILTER_SCALE_EXT
#undef CONVOLUTION_FILTER_SCALE_EXT
#endif
#ifdef CONVOLUTION_FILTER_BIAS_EXT
#undef CONVOLUTION_FILTER_BIAS_EXT
#endif
#ifdef REDUCE_EXT
#undef REDUCE_EXT
#endif
#ifdef CONVOLUTION_FORMAT_EXT
#undef CONVOLUTION_FORMAT_EXT
#endif
#ifdef CONVOLUTION_WIDTH_EXT
#undef CONVOLUTION_WIDTH_EXT
#endif
#ifdef CONVOLUTION_HEIGHT_EXT
#undef CONVOLUTION_HEIGHT_EXT
#endif
#ifdef MAX_CONVOLUTION_WIDTH_EXT
#undef MAX_CONVOLUTION_WIDTH_EXT
#endif
#ifdef MAX_CONVOLUTION_HEIGHT_EXT
#undef MAX_CONVOLUTION_HEIGHT_EXT
#endif
#ifdef POST_CONVOLUTION_RED_SCALE_EXT
#undef POST_CONVOLUTION_RED_SCALE_EXT
#endif
#ifdef POST_CONVOLUTION_GREEN_SCALE_EXT
#undef POST_CONVOLUTION_GREEN_SCALE_EXT
#endif
#ifdef POST_CONVOLUTION_BLUE_SCALE_EXT
#undef POST_CONVOLUTION_BLUE_SCALE_EXT
#endif
#ifdef POST_CONVOLUTION_ALPHA_SCALE_EXT
#undef POST_CONVOLUTION_ALPHA_SCALE_EXT
#endif
#ifdef POST_CONVOLUTION_RED_BIAS_EXT
#undef POST_CONVOLUTION_RED_BIAS_EXT
#endif
#ifdef POST_CONVOLUTION_GREEN_BIAS_EXT
#undef POST_CONVOLUTION_GREEN_BIAS_EXT
#endif
#ifdef POST_CONVOLUTION_BLUE_BIAS_EXT
#undef POST_CONVOLUTION_BLUE_BIAS_EXT
#endif
#ifdef POST_CONVOLUTION_ALPHA_BIAS_EXT
#undef POST_CONVOLUTION_ALPHA_BIAS_EXT
#endif
#ifdef TANGENT_ARRAY_EXT
#undef TANGENT_ARRAY_EXT
#endif
#ifdef BINORMAL_ARRAY_EXT
#undef BINORMAL_ARRAY_EXT
#endif
#ifdef CURRENT_TANGENT_EXT
#undef CURRENT_TANGENT_EXT
#endif
#ifdef CURRENT_BINORMAL_EXT
#undef CURRENT_BINORMAL_EXT
#endif
#ifdef TANGENT_ARRAY_TYPE_EXT
#undef TANGENT_ARRAY_TYPE_EXT
#endif
#ifdef TANGENT_ARRAY_STRIDE_EXT
#undef TANGENT_ARRAY_STRIDE_EXT
#endif
#ifdef BINORMAL_ARRAY_TYPE_EXT
#undef BINORMAL_ARRAY_TYPE_EXT
#endif
#ifdef BINORMAL_ARRAY_STRIDE_EXT
#undef BINORMAL_ARRAY_STRIDE_EXT
#endif
#ifdef TANGENT_ARRAY_POINTER_EXT
#undef TANGENT_ARRAY_POINTER_EXT
#endif
#ifdef BINORMAL_ARRAY_POINTER_EXT
#undef BINORMAL_ARRAY_POINTER_EXT
#endif
#ifdef MAP1_TANGENT_EXT
#undef MAP1_TANGENT_EXT
#endif
#ifdef MAP2_TANGENT_EXT
#undef MAP2_TANGENT_EXT
#endif
#ifdef MAP1_BINORMAL_EXT
#undef MAP1_BINORMAL_EXT
#endif
#ifdef MAP2_BINORMAL_EXT
#undef MAP2_BINORMAL_EXT
#endif
#ifdef CULL_VERTEX_EXT
#undef CULL_VERTEX_EXT
#endif
#ifdef CULL_VERTEX_EYE_POSITION_EXT
#undef CULL_VERTEX_EYE_POSITION_EXT
#endif
#ifdef CULL_VERTEX_OBJECT_POSITION_EXT
#undef CULL_VERTEX_OBJECT_POSITION_EXT
#endif
#ifdef DEPTH_BOUNDS_TEST_EXT
#undef DEPTH_BOUNDS_TEST_EXT
#endif
#ifdef DEPTH_BOUNDS_EXT
#undef DEPTH_BOUNDS_EXT
#endif
#ifdef MAX_ELEMENTS_VERTICES_EXT
#undef MAX_ELEMENTS_VERTICES_EXT
#endif
#ifdef MAX_ELEMENTS_INDICES_EXT
#undef MAX_ELEMENTS_INDICES_EXT
#endif
#ifdef FOG_COORDINATE_SOURCE_EXT
#undef FOG_COORDINATE_SOURCE_EXT
#endif
#ifdef FOG_COORDINATE_EXT
#undef FOG_COORDINATE_EXT
#endif
#ifdef FRAGMENT_DEPTH_EXT
#undef FRAGMENT_DEPTH_EXT
#endif
#ifdef CURRENT_FOG_COORDINATE_EXT
#undef CURRENT_FOG_COORDINATE_EXT
#endif
#ifdef FOG_COORDINATE_ARRAY_TYPE_EXT
#undef FOG_COORDINATE_ARRAY_TYPE_EXT
#endif
#ifdef FOG_COORDINATE_ARRAY_STRIDE_EXT
#undef FOG_COORDINATE_ARRAY_STRIDE_EXT
#endif
#ifdef FOG_COORDINATE_ARRAY_POINTER_EXT
#undef FOG_COORDINATE_ARRAY_POINTER_EXT
#endif
#ifdef FOG_COORDINATE_ARRAY_EXT
#undef FOG_COORDINATE_ARRAY_EXT
#endif
#ifdef HISTOGRAM_EXT
#undef HISTOGRAM_EXT
#endif
#ifdef PROXY_HISTOGRAM_EXT
#undef PROXY_HISTOGRAM_EXT
#endif
#ifdef HISTOGRAM_WIDTH_EXT
#undef HISTOGRAM_WIDTH_EXT
#endif
#ifdef HISTOGRAM_FORMAT_EXT
#undef HISTOGRAM_FORMAT_EXT
#endif
#ifdef HISTOGRAM_RED_SIZE_EXT
#undef HISTOGRAM_RED_SIZE_EXT
#endif
#ifdef HISTOGRAM_GREEN_SIZE_EXT
#undef HISTOGRAM_GREEN_SIZE_EXT
#endif
#ifdef HISTOGRAM_BLUE_SIZE_EXT
#undef HISTOGRAM_BLUE_SIZE_EXT
#endif
#ifdef HISTOGRAM_ALPHA_SIZE_EXT
#undef HISTOGRAM_ALPHA_SIZE_EXT
#endif
#ifdef HISTOGRAM_LUMINANCE_SIZE_EXT
#undef HISTOGRAM_LUMINANCE_SIZE_EXT
#endif
#ifdef HISTOGRAM_SINK_EXT
#undef HISTOGRAM_SINK_EXT
#endif
#ifdef MINMAX_EXT
#undef MINMAX_EXT
#endif
#ifdef MINMAX_FORMAT_EXT
#undef MINMAX_FORMAT_EXT
#endif
#ifdef MINMAX_SINK_EXT
#undef MINMAX_SINK_EXT
#endif
#ifdef TABLE_TOO_LARGE_EXT
#undef TABLE_TOO_LARGE_EXT
#endif
#ifdef IUI_V2F_EXT
#undef IUI_V2F_EXT
#endif
#ifdef IUI_V3F_EXT
#undef IUI_V3F_EXT
#endif
#ifdef IUI_N3F_V2F_EXT
#undef IUI_N3F_V2F_EXT
#endif
#ifdef IUI_N3F_V3F_EXT
#undef IUI_N3F_V3F_EXT
#endif
#ifdef T2F_IUI_V2F_EXT
#undef T2F_IUI_V2F_EXT
#endif
#ifdef T2F_IUI_V3F_EXT
#undef T2F_IUI_V3F_EXT
#endif
#ifdef T2F_IUI_N3F_V2F_EXT
#undef T2F_IUI_N3F_V2F_EXT
#endif
#ifdef T2F_IUI_N3F_V3F_EXT
#undef T2F_IUI_N3F_V3F_EXT
#endif
#ifdef INDEX_TEST_EXT
#undef INDEX_TEST_EXT
#endif
#ifdef INDEX_TEST_FUNC_EXT
#undef INDEX_TEST_FUNC_EXT
#endif
#ifdef INDEX_TEST_REF_EXT
#undef INDEX_TEST_REF_EXT
#endif
#ifdef INDEX_MATERIAL_EXT
#undef INDEX_MATERIAL_EXT
#endif
#ifdef INDEX_MATERIAL_PARAMETER_EXT
#undef INDEX_MATERIAL_PARAMETER_EXT
#endif
#ifdef INDEX_MATERIAL_FACE_EXT
#undef INDEX_MATERIAL_FACE_EXT
#endif
#ifdef FRAGMENT_MATERIAL_EXT
#undef FRAGMENT_MATERIAL_EXT
#endif
#ifdef FRAGMENT_NORMAL_EXT
#undef FRAGMENT_NORMAL_EXT
#endif
#ifdef FRAGMENT_COLOR_EXT
#undef FRAGMENT_COLOR_EXT
#endif
#ifdef ATTENUATION_EXT
#undef ATTENUATION_EXT
#endif
#ifdef SHADOW_ATTENUATION_EXT
#undef SHADOW_ATTENUATION_EXT
#endif
#ifdef TEXTURE_APPLICATION_MODE_EXT
#undef TEXTURE_APPLICATION_MODE_EXT
#endif
#ifdef TEXTURE_LIGHT_EXT
#undef TEXTURE_LIGHT_EXT
#endif
#ifdef TEXTURE_MATERIAL_FACE_EXT
#undef TEXTURE_MATERIAL_FACE_EXT
#endif
#ifdef TEXTURE_MATERIAL_PARAMETER_EXT
#undef TEXTURE_MATERIAL_PARAMETER_EXT
#endif
#ifdef MULTISAMPLE_EXT
#undef MULTISAMPLE_EXT
#endif
#ifdef SAMPLE_ALPHA_TO_MASK_EXT
#undef SAMPLE_ALPHA_TO_MASK_EXT
#endif
#ifdef SAMPLE_ALPHA_TO_ONE_EXT
#undef SAMPLE_ALPHA_TO_ONE_EXT
#endif
#ifdef SAMPLE_MASK_EXT
#undef SAMPLE_MASK_EXT
#endif
#ifdef _1PASS_EXT
#undef _1PASS_EXT
#endif
#ifdef _2PASS_0_EXT
#undef _2PASS_0_EXT
#endif
#ifdef _2PASS_1_EXT
#undef _2PASS_1_EXT
#endif
#ifdef _4PASS_0_EXT
#undef _4PASS_0_EXT
#endif
#ifdef _4PASS_1_EXT
#undef _4PASS_1_EXT
#endif
#ifdef _4PASS_2_EXT
#undef _4PASS_2_EXT
#endif
#ifdef _4PASS_3_EXT
#undef _4PASS_3_EXT
#endif
#ifdef SAMPLE_BUFFERS_EXT
#undef SAMPLE_BUFFERS_EXT
#endif
#ifdef SAMPLES_EXT
#undef SAMPLES_EXT
#endif
#ifdef SAMPLE_MASK_VALUE_EXT
#undef SAMPLE_MASK_VALUE_EXT
#endif
#ifdef SAMPLE_MASK_INVERT_EXT
#undef SAMPLE_MASK_INVERT_EXT
#endif
#ifdef SAMPLE_PATTERN_EXT
#undef SAMPLE_PATTERN_EXT
#endif
#ifdef MULTISAMPLE_BIT_EXT
#undef MULTISAMPLE_BIT_EXT
#endif
#ifdef UNSIGNED_BYTE_3_3_2_EXT
#undef UNSIGNED_BYTE_3_3_2_EXT
#endif
#ifdef UNSIGNED_SHORT_4_4_4_4_EXT
#undef UNSIGNED_SHORT_4_4_4_4_EXT
#endif
#ifdef UNSIGNED_SHORT_5_5_5_1_EXT
#undef UNSIGNED_SHORT_5_5_5_1_EXT
#endif
#ifdef UNSIGNED_INT_8_8_8_8_EXT
#undef UNSIGNED_INT_8_8_8_8_EXT
#endif
#ifdef UNSIGNED_INT_10_10_10_2_EXT
#undef UNSIGNED_INT_10_10_10_2_EXT
#endif
#ifdef COLOR_INDEX1_EXT
#undef COLOR_INDEX1_EXT
#endif
#ifdef COLOR_INDEX2_EXT
#undef COLOR_INDEX2_EXT
#endif
#ifdef COLOR_INDEX4_EXT
#undef COLOR_INDEX4_EXT
#endif
#ifdef COLOR_INDEX8_EXT
#undef COLOR_INDEX8_EXT
#endif
#ifdef COLOR_INDEX12_EXT
#undef COLOR_INDEX12_EXT
#endif
#ifdef COLOR_INDEX16_EXT
#undef COLOR_INDEX16_EXT
#endif
#ifdef TEXTURE_INDEX_SIZE_EXT
#undef TEXTURE_INDEX_SIZE_EXT
#endif
#ifdef PIXEL_PACK_BUFFER_EXT
#undef PIXEL_PACK_BUFFER_EXT
#endif
#ifdef PIXEL_UNPACK_BUFFER_EXT
#undef PIXEL_UNPACK_BUFFER_EXT
#endif
#ifdef PIXEL_PACK_BUFFER_BINDING_EXT
#undef PIXEL_PACK_BUFFER_BINDING_EXT
#endif
#ifdef PIXEL_UNPACK_BUFFER_BINDING_EXT
#undef PIXEL_UNPACK_BUFFER_BINDING_EXT
#endif
#ifdef PIXEL_TRANSFORM_2D_EXT
#undef PIXEL_TRANSFORM_2D_EXT
#endif
#ifdef PIXEL_MAG_FILTER_EXT
#undef PIXEL_MAG_FILTER_EXT
#endif
#ifdef PIXEL_MIN_FILTER_EXT
#undef PIXEL_MIN_FILTER_EXT
#endif
#ifdef PIXEL_CUBIC_WEIGHT_EXT
#undef PIXEL_CUBIC_WEIGHT_EXT
#endif
#ifdef CUBIC_EXT
#undef CUBIC_EXT
#endif
#ifdef AVERAGE_EXT
#undef AVERAGE_EXT
#endif
#ifdef PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#undef PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#endif
#ifdef MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#undef MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
#endif
#ifdef PIXEL_TRANSFORM_2D_MATRIX_EXT
#undef PIXEL_TRANSFORM_2D_MATRIX_EXT
#endif
#ifdef POINT_SIZE_MIN_EXT
#undef POINT_SIZE_MIN_EXT
#endif
#ifdef POINT_SIZE_MAX_EXT
#undef POINT_SIZE_MAX_EXT
#endif
#ifdef POINT_FADE_THRESHOLD_SIZE_EXT
#undef POINT_FADE_THRESHOLD_SIZE_EXT
#endif
#ifdef DISTANCE_ATTENUATION_EXT
#undef DISTANCE_ATTENUATION_EXT
#endif
#ifdef POLYGON_OFFSET_EXT
#undef POLYGON_OFFSET_EXT
#endif
#ifdef POLYGON_OFFSET_FACTOR_EXT
#undef POLYGON_OFFSET_FACTOR_EXT
#endif
#ifdef POLYGON_OFFSET_BIAS_EXT
#undef POLYGON_OFFSET_BIAS_EXT
#endif
#ifdef RESCALE_NORMAL_EXT
#undef RESCALE_NORMAL_EXT
#endif
#ifdef COLOR_SUM_EXT
#undef COLOR_SUM_EXT
#endif
#ifdef CURRENT_SECONDARY_COLOR_EXT
#undef CURRENT_SECONDARY_COLOR_EXT
#endif
#ifdef SECONDARY_COLOR_ARRAY_SIZE_EXT
#undef SECONDARY_COLOR_ARRAY_SIZE_EXT
#endif
#ifdef SECONDARY_COLOR_ARRAY_TYPE_EXT
#undef SECONDARY_COLOR_ARRAY_TYPE_EXT
#endif
#ifdef SECONDARY_COLOR_ARRAY_STRIDE_EXT
#undef SECONDARY_COLOR_ARRAY_STRIDE_EXT
#endif
#ifdef SECONDARY_COLOR_ARRAY_POINTER_EXT
#undef SECONDARY_COLOR_ARRAY_POINTER_EXT
#endif
#ifdef SECONDARY_COLOR_ARRAY_EXT
#undef SECONDARY_COLOR_ARRAY_EXT
#endif
#ifdef LIGHT_MODEL_COLOR_CONTROL_EXT
#undef LIGHT_MODEL_COLOR_CONTROL_EXT
#endif
#ifdef SINGLE_COLOR_EXT
#undef SINGLE_COLOR_EXT
#endif
#ifdef SEPARATE_SPECULAR_COLOR_EXT
#undef SEPARATE_SPECULAR_COLOR_EXT
#endif
#ifdef SHARED_TEXTURE_PALETTE_EXT
#undef SHARED_TEXTURE_PALETTE_EXT
#endif
#ifdef STENCIL_TEST_TWO_SIDE_EXT
#undef STENCIL_TEST_TWO_SIDE_EXT
#endif
#ifdef ACTIVE_STENCIL_FACE_EXT
#undef ACTIVE_STENCIL_FACE_EXT
#endif
#ifdef INCR_WRAP_EXT
#undef INCR_WRAP_EXT
#endif
#ifdef DECR_WRAP_EXT
#undef DECR_WRAP_EXT
#endif
#ifdef ALPHA4_EXT
#undef ALPHA4_EXT
#endif
#ifdef ALPHA8_EXT
#undef ALPHA8_EXT
#endif
#ifdef ALPHA12_EXT
#undef ALPHA12_EXT
#endif
#ifdef ALPHA16_EXT
#undef ALPHA16_EXT
#endif
#ifdef LUMINANCE4_EXT
#undef LUMINANCE4_EXT
#endif
#ifdef LUMINANCE8_EXT
#undef LUMINANCE8_EXT
#endif
#ifdef LUMINANCE12_EXT
#undef LUMINANCE12_EXT
#endif
#ifdef LUMINANCE16_EXT
#undef LUMINANCE16_EXT
#endif
#ifdef LUMINANCE4_ALPHA4_EXT
#undef LUMINANCE4_ALPHA4_EXT
#endif
#ifdef LUMINANCE6_ALPHA2_EXT
#undef LUMINANCE6_ALPHA2_EXT
#endif
#ifdef LUMINANCE8_ALPHA8_EXT
#undef LUMINANCE8_ALPHA8_EXT
#endif
#ifdef LUMINANCE12_ALPHA4_EXT
#undef LUMINANCE12_ALPHA4_EXT
#endif
#ifdef LUMINANCE12_ALPHA12_EXT
#undef LUMINANCE12_ALPHA12_EXT
#endif
#ifdef LUMINANCE16_ALPHA16_EXT
#undef LUMINANCE16_ALPHA16_EXT
#endif
#ifdef INTENSITY_EXT
#undef INTENSITY_EXT
#endif
#ifdef INTENSITY4_EXT
#undef INTENSITY4_EXT
#endif
#ifdef INTENSITY8_EXT
#undef INTENSITY8_EXT
#endif
#ifdef INTENSITY12_EXT
#undef INTENSITY12_EXT
#endif
#ifdef INTENSITY16_EXT
#undef INTENSITY16_EXT
#endif
#ifdef RGB2_EXT
#undef RGB2_EXT
#endif
#ifdef RGB4_EXT
#undef RGB4_EXT
#endif
#ifdef RGB5_EXT
#undef RGB5_EXT
#endif
#ifdef RGB8_EXT
#undef RGB8_EXT
#endif
#ifdef RGB10_EXT
#undef RGB10_EXT
#endif
#ifdef RGB12_EXT
#undef RGB12_EXT
#endif
#ifdef RGB16_EXT
#undef RGB16_EXT
#endif
#ifdef RGBA2_EXT
#undef RGBA2_EXT
#endif
#ifdef RGBA4_EXT
#undef RGBA4_EXT
#endif
#ifdef RGB5_A1_EXT
#undef RGB5_A1_EXT
#endif
#ifdef RGBA8_EXT
#undef RGBA8_EXT
#endif
#ifdef RGB10_A2_EXT
#undef RGB10_A2_EXT
#endif
#ifdef RGBA12_EXT
#undef RGBA12_EXT
#endif
#ifdef RGBA16_EXT
#undef RGBA16_EXT
#endif
#ifdef TEXTURE_RED_SIZE_EXT
#undef TEXTURE_RED_SIZE_EXT
#endif
#ifdef TEXTURE_GREEN_SIZE_EXT
#undef TEXTURE_GREEN_SIZE_EXT
#endif
#ifdef TEXTURE_BLUE_SIZE_EXT
#undef TEXTURE_BLUE_SIZE_EXT
#endif
#ifdef TEXTURE_ALPHA_SIZE_EXT
#undef TEXTURE_ALPHA_SIZE_EXT
#endif
#ifdef TEXTURE_LUMINANCE_SIZE_EXT
#undef TEXTURE_LUMINANCE_SIZE_EXT
#endif
#ifdef TEXTURE_INTENSITY_SIZE_EXT
#undef TEXTURE_INTENSITY_SIZE_EXT
#endif
#ifdef REPLACE_EXT
#undef REPLACE_EXT
#endif
#ifdef PROXY_TEXTURE_1D_EXT
#undef PROXY_TEXTURE_1D_EXT
#endif
#ifdef PROXY_TEXTURE_2D_EXT
#undef PROXY_TEXTURE_2D_EXT
#endif
#ifdef TEXTURE_TOO_LARGE_EXT
#undef TEXTURE_TOO_LARGE_EXT
#endif
#ifdef PACK_SKIP_IMAGES_EXT
#undef PACK_SKIP_IMAGES_EXT
#endif
#ifdef PACK_IMAGE_HEIGHT_EXT
#undef PACK_IMAGE_HEIGHT_EXT
#endif
#ifdef UNPACK_SKIP_IMAGES_EXT
#undef UNPACK_SKIP_IMAGES_EXT
#endif
#ifdef UNPACK_IMAGE_HEIGHT_EXT
#undef UNPACK_IMAGE_HEIGHT_EXT
#endif
#ifdef TEXTURE_3D_EXT
#undef TEXTURE_3D_EXT
#endif
#ifdef PROXY_TEXTURE_3D_EXT
#undef PROXY_TEXTURE_3D_EXT
#endif
#ifdef TEXTURE_DEPTH_EXT
#undef TEXTURE_DEPTH_EXT
#endif
#ifdef TEXTURE_WRAP_R_EXT
#undef TEXTURE_WRAP_R_EXT
#endif
#ifdef MAX_3D_TEXTURE_SIZE_EXT
#undef MAX_3D_TEXTURE_SIZE_EXT
#endif
#ifdef COMPRESSED_RGB_S3TC_DXT1_EXT
#undef COMPRESSED_RGB_S3TC_DXT1_EXT
#endif
#ifdef COMPRESSED_RGBA_S3TC_DXT1_EXT
#undef COMPRESSED_RGBA_S3TC_DXT1_EXT
#endif
#ifdef COMPRESSED_RGBA_S3TC_DXT3_EXT
#undef COMPRESSED_RGBA_S3TC_DXT3_EXT
#endif
#ifdef COMPRESSED_RGBA_S3TC_DXT5_EXT
#undef COMPRESSED_RGBA_S3TC_DXT5_EXT
#endif
#ifdef NORMAL_MAP_EXT
#undef NORMAL_MAP_EXT
#endif
#ifdef REFLECTION_MAP_EXT
#undef REFLECTION_MAP_EXT
#endif
#ifdef TEXTURE_CUBE_MAP_EXT
#undef TEXTURE_CUBE_MAP_EXT
#endif
#ifdef TEXTURE_BINDING_CUBE_MAP_EXT
#undef TEXTURE_BINDING_CUBE_MAP_EXT
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_X_EXT
#undef TEXTURE_CUBE_MAP_POSITIVE_X_EXT
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
#undef TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
#undef TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
#undef TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
#undef TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
#undef TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
#endif
#ifdef PROXY_TEXTURE_CUBE_MAP_EXT
#undef PROXY_TEXTURE_CUBE_MAP_EXT
#endif
#ifdef MAX_CUBE_MAP_TEXTURE_SIZE_EXT
#undef MAX_CUBE_MAP_TEXTURE_SIZE_EXT
#endif
#ifdef COMBINE_EXT
#undef COMBINE_EXT
#endif
#ifdef COMBINE_RGB_EXT
#undef COMBINE_RGB_EXT
#endif
#ifdef COMBINE_ALPHA_EXT
#undef COMBINE_ALPHA_EXT
#endif
#ifdef RGB_SCALE_EXT
#undef RGB_SCALE_EXT
#endif
#ifdef ADD_SIGNED_EXT
#undef ADD_SIGNED_EXT
#endif
#ifdef INTERPOLATE_EXT
#undef INTERPOLATE_EXT
#endif
#ifdef CONSTANT_EXT
#undef CONSTANT_EXT
#endif
#ifdef PRIMARY_COLOR_EXT
#undef PRIMARY_COLOR_EXT
#endif
#ifdef PREVIOUS_EXT
#undef PREVIOUS_EXT
#endif
#ifdef SOURCE0_RGB_EXT
#undef SOURCE0_RGB_EXT
#endif
#ifdef SOURCE1_RGB_EXT
#undef SOURCE1_RGB_EXT
#endif
#ifdef SOURCE2_RGB_EXT
#undef SOURCE2_RGB_EXT
#endif
#ifdef SOURCE0_ALPHA_EXT
#undef SOURCE0_ALPHA_EXT
#endif
#ifdef SOURCE1_ALPHA_EXT
#undef SOURCE1_ALPHA_EXT
#endif
#ifdef SOURCE2_ALPHA_EXT
#undef SOURCE2_ALPHA_EXT
#endif
#ifdef OPERAND0_RGB_EXT
#undef OPERAND0_RGB_EXT
#endif
#ifdef OPERAND1_RGB_EXT
#undef OPERAND1_RGB_EXT
#endif
#ifdef OPERAND2_RGB_EXT
#undef OPERAND2_RGB_EXT
#endif
#ifdef OPERAND0_ALPHA_EXT
#undef OPERAND0_ALPHA_EXT
#endif
#ifdef OPERAND1_ALPHA_EXT
#undef OPERAND1_ALPHA_EXT
#endif
#ifdef OPERAND2_ALPHA_EXT
#undef OPERAND2_ALPHA_EXT
#endif
#ifdef DOT3_RGB_EXT
#undef DOT3_RGB_EXT
#endif
#ifdef DOT3_RGBA_EXT
#undef DOT3_RGBA_EXT
#endif
#ifdef TEXTURE_MAX_ANISOTROPY_EXT
#undef TEXTURE_MAX_ANISOTROPY_EXT
#endif
#ifdef MAX_TEXTURE_MAX_ANISOTROPY_EXT
#undef MAX_TEXTURE_MAX_ANISOTROPY_EXT
#endif
#ifdef MAX_TEXTURE_LOD_BIAS_EXT
#undef MAX_TEXTURE_LOD_BIAS_EXT
#endif
#ifdef TEXTURE_FILTER_CONTROL_EXT
#undef TEXTURE_FILTER_CONTROL_EXT
#endif
#ifdef TEXTURE_LOD_BIAS_EXT
#undef TEXTURE_LOD_BIAS_EXT
#endif
#ifdef MIRROR_CLAMP_EXT
#undef MIRROR_CLAMP_EXT
#endif
#ifdef MIRROR_CLAMP_TO_EDGE_EXT
#undef MIRROR_CLAMP_TO_EDGE_EXT
#endif
#ifdef MIRROR_CLAMP_TO_BORDER_EXT
#undef MIRROR_CLAMP_TO_BORDER_EXT
#endif
#ifdef TEXTURE_PRIORITY_EXT
#undef TEXTURE_PRIORITY_EXT
#endif
#ifdef TEXTURE_RESIDENT_EXT
#undef TEXTURE_RESIDENT_EXT
#endif
#ifdef TEXTURE_1D_BINDING_EXT
#undef TEXTURE_1D_BINDING_EXT
#endif
#ifdef TEXTURE_2D_BINDING_EXT
#undef TEXTURE_2D_BINDING_EXT
#endif
#ifdef TEXTURE_3D_BINDING_EXT
#undef TEXTURE_3D_BINDING_EXT
#endif
#ifdef PERTURB_EXT
#undef PERTURB_EXT
#endif
#ifdef TEXTURE_NORMAL_EXT
#undef TEXTURE_NORMAL_EXT
#endif
#ifdef VERTEX_ARRAY_EXT
#undef VERTEX_ARRAY_EXT
#endif
#ifdef NORMAL_ARRAY_EXT
#undef NORMAL_ARRAY_EXT
#endif
#ifdef COLOR_ARRAY_EXT
#undef COLOR_ARRAY_EXT
#endif
#ifdef INDEX_ARRAY_EXT
#undef INDEX_ARRAY_EXT
#endif
#ifdef TEXTURE_COORD_ARRAY_EXT
#undef TEXTURE_COORD_ARRAY_EXT
#endif
#ifdef EDGE_FLAG_ARRAY_EXT
#undef EDGE_FLAG_ARRAY_EXT
#endif
#ifdef VERTEX_ARRAY_SIZE_EXT
#undef VERTEX_ARRAY_SIZE_EXT
#endif
#ifdef VERTEX_ARRAY_TYPE_EXT
#undef VERTEX_ARRAY_TYPE_EXT
#endif
#ifdef VERTEX_ARRAY_STRIDE_EXT
#undef VERTEX_ARRAY_STRIDE_EXT
#endif
#ifdef VERTEX_ARRAY_COUNT_EXT
#undef VERTEX_ARRAY_COUNT_EXT
#endif
#ifdef NORMAL_ARRAY_TYPE_EXT
#undef NORMAL_ARRAY_TYPE_EXT
#endif
#ifdef NORMAL_ARRAY_STRIDE_EXT
#undef NORMAL_ARRAY_STRIDE_EXT
#endif
#ifdef NORMAL_ARRAY_COUNT_EXT
#undef NORMAL_ARRAY_COUNT_EXT
#endif
#ifdef COLOR_ARRAY_SIZE_EXT
#undef COLOR_ARRAY_SIZE_EXT
#endif
#ifdef COLOR_ARRAY_TYPE_EXT
#undef COLOR_ARRAY_TYPE_EXT
#endif
#ifdef COLOR_ARRAY_STRIDE_EXT
#undef COLOR_ARRAY_STRIDE_EXT
#endif
#ifdef COLOR_ARRAY_COUNT_EXT
#undef COLOR_ARRAY_COUNT_EXT
#endif
#ifdef INDEX_ARRAY_TYPE_EXT
#undef INDEX_ARRAY_TYPE_EXT
#endif
#ifdef INDEX_ARRAY_STRIDE_EXT
#undef INDEX_ARRAY_STRIDE_EXT
#endif
#ifdef INDEX_ARRAY_COUNT_EXT
#undef INDEX_ARRAY_COUNT_EXT
#endif
#ifdef TEXTURE_COORD_ARRAY_SIZE_EXT
#undef TEXTURE_COORD_ARRAY_SIZE_EXT
#endif
#ifdef TEXTURE_COORD_ARRAY_TYPE_EXT
#undef TEXTURE_COORD_ARRAY_TYPE_EXT
#endif
#ifdef TEXTURE_COORD_ARRAY_STRIDE_EXT
#undef TEXTURE_COORD_ARRAY_STRIDE_EXT
#endif
#ifdef TEXTURE_COORD_ARRAY_COUNT_EXT
#undef TEXTURE_COORD_ARRAY_COUNT_EXT
#endif
#ifdef EDGE_FLAG_ARRAY_STRIDE_EXT
#undef EDGE_FLAG_ARRAY_STRIDE_EXT
#endif
#ifdef EDGE_FLAG_ARRAY_COUNT_EXT
#undef EDGE_FLAG_ARRAY_COUNT_EXT
#endif
#ifdef VERTEX_ARRAY_POINTER_EXT
#undef VERTEX_ARRAY_POINTER_EXT
#endif
#ifdef NORMAL_ARRAY_POINTER_EXT
#undef NORMAL_ARRAY_POINTER_EXT
#endif
#ifdef COLOR_ARRAY_POINTER_EXT
#undef COLOR_ARRAY_POINTER_EXT
#endif
#ifdef INDEX_ARRAY_POINTER_EXT
#undef INDEX_ARRAY_POINTER_EXT
#endif
#ifdef TEXTURE_COORD_ARRAY_POINTER_EXT
#undef TEXTURE_COORD_ARRAY_POINTER_EXT
#endif
#ifdef EDGE_FLAG_ARRAY_POINTER_EXT
#undef EDGE_FLAG_ARRAY_POINTER_EXT
#endif
#ifdef VERTEX_SHADER_EXT
#undef VERTEX_SHADER_EXT
#endif
#ifdef VERTEX_SHADER_BINDING_EXT
#undef VERTEX_SHADER_BINDING_EXT
#endif
#ifdef OP_INDEX_EXT
#undef OP_INDEX_EXT
#endif
#ifdef OP_NEGATE_EXT
#undef OP_NEGATE_EXT
#endif
#ifdef OP_DOT3_EXT
#undef OP_DOT3_EXT
#endif
#ifdef OP_DOT4_EXT
#undef OP_DOT4_EXT
#endif
#ifdef OP_MUL_EXT
#undef OP_MUL_EXT
#endif
#ifdef OP_ADD_EXT
#undef OP_ADD_EXT
#endif
#ifdef OP_MADD_EXT
#undef OP_MADD_EXT
#endif
#ifdef OP_FRAC_EXT
#undef OP_FRAC_EXT
#endif
#ifdef OP_MAX_EXT
#undef OP_MAX_EXT
#endif
#ifdef OP_MIN_EXT
#undef OP_MIN_EXT
#endif
#ifdef OP_SET_GE_EXT
#undef OP_SET_GE_EXT
#endif
#ifdef OP_SET_LT_EXT
#undef OP_SET_LT_EXT
#endif
#ifdef OP_CLAMP_EXT
#undef OP_CLAMP_EXT
#endif
#ifdef OP_FLOOR_EXT
#undef OP_FLOOR_EXT
#endif
#ifdef OP_ROUND_EXT
#undef OP_ROUND_EXT
#endif
#ifdef OP_EXP_BASE_2_EXT
#undef OP_EXP_BASE_2_EXT
#endif
#ifdef OP_LOG_BASE_2_EXT
#undef OP_LOG_BASE_2_EXT
#endif
#ifdef OP_POWER_EXT
#undef OP_POWER_EXT
#endif
#ifdef OP_RECIP_EXT
#undef OP_RECIP_EXT
#endif
#ifdef OP_RECIP_SQRT_EXT
#undef OP_RECIP_SQRT_EXT
#endif
#ifdef OP_SUB_EXT
#undef OP_SUB_EXT
#endif
#ifdef OP_CROSS_PRODUCT_EXT
#undef OP_CROSS_PRODUCT_EXT
#endif
#ifdef OP_MULTIPLY_MATRIX_EXT
#undef OP_MULTIPLY_MATRIX_EXT
#endif
#ifdef OP_MOV_EXT
#undef OP_MOV_EXT
#endif
#ifdef OUTPUT_VERTEX_EXT
#undef OUTPUT_VERTEX_EXT
#endif
#ifdef OUTPUT_COLOR0_EXT
#undef OUTPUT_COLOR0_EXT
#endif
#ifdef OUTPUT_COLOR1_EXT
#undef OUTPUT_COLOR1_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD0_EXT
#undef OUTPUT_TEXTURE_COORD0_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD1_EXT
#undef OUTPUT_TEXTURE_COORD1_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD2_EXT
#undef OUTPUT_TEXTURE_COORD2_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD3_EXT
#undef OUTPUT_TEXTURE_COORD3_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD4_EXT
#undef OUTPUT_TEXTURE_COORD4_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD5_EXT
#undef OUTPUT_TEXTURE_COORD5_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD6_EXT
#undef OUTPUT_TEXTURE_COORD6_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD7_EXT
#undef OUTPUT_TEXTURE_COORD7_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD8_EXT
#undef OUTPUT_TEXTURE_COORD8_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD9_EXT
#undef OUTPUT_TEXTURE_COORD9_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD10_EXT
#undef OUTPUT_TEXTURE_COORD10_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD11_EXT
#undef OUTPUT_TEXTURE_COORD11_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD12_EXT
#undef OUTPUT_TEXTURE_COORD12_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD13_EXT
#undef OUTPUT_TEXTURE_COORD13_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD14_EXT
#undef OUTPUT_TEXTURE_COORD14_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD15_EXT
#undef OUTPUT_TEXTURE_COORD15_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD16_EXT
#undef OUTPUT_TEXTURE_COORD16_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD17_EXT
#undef OUTPUT_TEXTURE_COORD17_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD18_EXT
#undef OUTPUT_TEXTURE_COORD18_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD19_EXT
#undef OUTPUT_TEXTURE_COORD19_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD20_EXT
#undef OUTPUT_TEXTURE_COORD20_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD21_EXT
#undef OUTPUT_TEXTURE_COORD21_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD22_EXT
#undef OUTPUT_TEXTURE_COORD22_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD23_EXT
#undef OUTPUT_TEXTURE_COORD23_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD24_EXT
#undef OUTPUT_TEXTURE_COORD24_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD25_EXT
#undef OUTPUT_TEXTURE_COORD25_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD26_EXT
#undef OUTPUT_TEXTURE_COORD26_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD27_EXT
#undef OUTPUT_TEXTURE_COORD27_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD28_EXT
#undef OUTPUT_TEXTURE_COORD28_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD29_EXT
#undef OUTPUT_TEXTURE_COORD29_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD30_EXT
#undef OUTPUT_TEXTURE_COORD30_EXT
#endif
#ifdef OUTPUT_TEXTURE_COORD31_EXT
#undef OUTPUT_TEXTURE_COORD31_EXT
#endif
#ifdef OUTPUT_FOG_EXT
#undef OUTPUT_FOG_EXT
#endif
#ifdef SCALAR_EXT
#undef SCALAR_EXT
#endif
#ifdef VECTOR_EXT
#undef VECTOR_EXT
#endif
#ifdef MATRIX_EXT
#undef MATRIX_EXT
#endif
#ifdef VARIANT_EXT
#undef VARIANT_EXT
#endif
#ifdef INVARIANT_EXT
#undef INVARIANT_EXT
#endif
#ifdef LOCAL_CONSTANT_EXT
#undef LOCAL_CONSTANT_EXT
#endif
#ifdef LOCAL_EXT
#undef LOCAL_EXT
#endif
#ifdef MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
#endif
#ifdef MAX_VERTEX_SHADER_VARIANTS_EXT
#undef MAX_VERTEX_SHADER_VARIANTS_EXT
#endif
#ifdef MAX_VERTEX_SHADER_INVARIANTS_EXT
#undef MAX_VERTEX_SHADER_INVARIANTS_EXT
#endif
#ifdef MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#endif
#ifdef MAX_VERTEX_SHADER_LOCALS_EXT
#undef MAX_VERTEX_SHADER_LOCALS_EXT
#endif
#ifdef MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
#undef MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
#endif
#ifdef MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
#undef MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
#endif
#ifdef MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#endif
#ifdef MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
#undef MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
#endif
#ifdef MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
#undef MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
#endif
#ifdef VERTEX_SHADER_INSTRUCTIONS_EXT
#undef VERTEX_SHADER_INSTRUCTIONS_EXT
#endif
#ifdef VERTEX_SHADER_VARIANTS_EXT
#undef VERTEX_SHADER_VARIANTS_EXT
#endif
#ifdef VERTEX_SHADER_INVARIANTS_EXT
#undef VERTEX_SHADER_INVARIANTS_EXT
#endif
#ifdef VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#undef VERTEX_SHADER_LOCAL_CONSTANTS_EXT
#endif
#ifdef VERTEX_SHADER_LOCALS_EXT
#undef VERTEX_SHADER_LOCALS_EXT
#endif
#ifdef VERTEX_SHADER_OPTIMIZED_EXT
#undef VERTEX_SHADER_OPTIMIZED_EXT
#endif
#ifdef X_EXT
#undef X_EXT
#endif
#ifdef Y_EXT
#undef Y_EXT
#endif
#ifdef Z_EXT
#undef Z_EXT
#endif
#ifdef W_EXT
#undef W_EXT
#endif
#ifdef NEGATIVE_X_EXT
#undef NEGATIVE_X_EXT
#endif
#ifdef NEGATIVE_Y_EXT
#undef NEGATIVE_Y_EXT
#endif
#ifdef NEGATIVE_Z_EXT
#undef NEGATIVE_Z_EXT
#endif
#ifdef NEGATIVE_W_EXT
#undef NEGATIVE_W_EXT
#endif
#ifdef ZERO_EXT
#undef ZERO_EXT
#endif
#ifdef ONE_EXT
#undef ONE_EXT
#endif
#ifdef NEGATIVE_ONE_EXT
#undef NEGATIVE_ONE_EXT
#endif
#ifdef NORMALIZED_RANGE_EXT
#undef NORMALIZED_RANGE_EXT
#endif
#ifdef FULL_RANGE_EXT
#undef FULL_RANGE_EXT
#endif
#ifdef CURRENT_VERTEX_EXT
#undef CURRENT_VERTEX_EXT
#endif
#ifdef MVP_MATRIX_EXT
#undef MVP_MATRIX_EXT
#endif
#ifdef VARIANT_VALUE_EXT
#undef VARIANT_VALUE_EXT
#endif
#ifdef VARIANT_DATATYPE_EXT
#undef VARIANT_DATATYPE_EXT
#endif
#ifdef VARIANT_ARRAY_STRIDE_EXT
#undef VARIANT_ARRAY_STRIDE_EXT
#endif
#ifdef VARIANT_ARRAY_TYPE_EXT
#undef VARIANT_ARRAY_TYPE_EXT
#endif
#ifdef VARIANT_ARRAY_EXT
#undef VARIANT_ARRAY_EXT
#endif
#ifdef VARIANT_ARRAY_POINTER_EXT
#undef VARIANT_ARRAY_POINTER_EXT
#endif
#ifdef INVARIANT_VALUE_EXT
#undef INVARIANT_VALUE_EXT
#endif
#ifdef INVARIANT_DATATYPE_EXT
#undef INVARIANT_DATATYPE_EXT
#endif
#ifdef LOCAL_CONSTANT_VALUE_EXT
#undef LOCAL_CONSTANT_VALUE_EXT
#endif
#ifdef LOCAL_CONSTANT_DATATYPE_EXT
#undef LOCAL_CONSTANT_DATATYPE_EXT
#endif
#ifdef MODELVIEW0_STACK_DEPTH_EXT
#undef MODELVIEW0_STACK_DEPTH_EXT
#endif
#ifdef MODELVIEW1_STACK_DEPTH_EXT
#undef MODELVIEW1_STACK_DEPTH_EXT
#endif
#ifdef MODELVIEW0_MATRIX_EXT
#undef MODELVIEW0_MATRIX_EXT
#endif
#ifdef MODELVIEW1_MATRIX_EXT
#undef MODELVIEW1_MATRIX_EXT
#endif
#ifdef VERTEX_WEIGHTING_EXT
#undef VERTEX_WEIGHTING_EXT
#endif
#ifdef MODELVIEW0_EXT
#undef MODELVIEW0_EXT
#endif
#ifdef MODELVIEW1_EXT
#undef MODELVIEW1_EXT
#endif
#ifdef CURRENT_VERTEX_WEIGHT_EXT
#undef CURRENT_VERTEX_WEIGHT_EXT
#endif
#ifdef VERTEX_WEIGHT_ARRAY_EXT
#undef VERTEX_WEIGHT_ARRAY_EXT
#endif
#ifdef VERTEX_WEIGHT_ARRAY_SIZE_EXT
#undef VERTEX_WEIGHT_ARRAY_SIZE_EXT
#endif
#ifdef VERTEX_WEIGHT_ARRAY_TYPE_EXT
#undef VERTEX_WEIGHT_ARRAY_TYPE_EXT
#endif
#ifdef VERTEX_WEIGHT_ARRAY_STRIDE_EXT
#undef VERTEX_WEIGHT_ARRAY_STRIDE_EXT
#endif
#ifdef VERTEX_WEIGHT_ARRAY_POINTER_EXT
#undef VERTEX_WEIGHT_ARRAY_POINTER_EXT
#endif
#ifdef TEXTURE_DEFORMATION_BIT_SGIX
#undef TEXTURE_DEFORMATION_BIT_SGIX
#endif
#ifdef GEOMETRY_DEFORMATION_BIT_SGIX
#undef GEOMETRY_DEFORMATION_BIT_SGIX
#endif
#ifdef IGNORE_BORDER_HP
#undef IGNORE_BORDER_HP
#endif
#ifdef CONSTANT_BORDER_HP
#undef CONSTANT_BORDER_HP
#endif
#ifdef REPLICATE_BORDER_HP
#undef REPLICATE_BORDER_HP
#endif
#ifdef CONVOLUTION_BORDER_COLOR_HP
#undef CONVOLUTION_BORDER_COLOR_HP
#endif
#ifdef IMAGE_SCALE_X_HP
#undef IMAGE_SCALE_X_HP
#endif
#ifdef IMAGE_SCALE_Y_HP
#undef IMAGE_SCALE_Y_HP
#endif
#ifdef IMAGE_TRANSLATE_X_HP
#undef IMAGE_TRANSLATE_X_HP
#endif
#ifdef IMAGE_TRANSLATE_Y_HP
#undef IMAGE_TRANSLATE_Y_HP
#endif
#ifdef IMAGE_ROTATE_ANGLE_HP
#undef IMAGE_ROTATE_ANGLE_HP
#endif
#ifdef IMAGE_ROTATE_ORIGIN_X_HP
#undef IMAGE_ROTATE_ORIGIN_X_HP
#endif
#ifdef IMAGE_ROTATE_ORIGIN_Y_HP
#undef IMAGE_ROTATE_ORIGIN_Y_HP
#endif
#ifdef IMAGE_MAG_FILTER_HP
#undef IMAGE_MAG_FILTER_HP
#endif
#ifdef IMAGE_MIN_FILTER_HP
#undef IMAGE_MIN_FILTER_HP
#endif
#ifdef IMAGE_CUBIC_WEIGHT_HP
#undef IMAGE_CUBIC_WEIGHT_HP
#endif
#ifdef CUBIC_HP
#undef CUBIC_HP
#endif
#ifdef AVERAGE_HP
#undef AVERAGE_HP
#endif
#ifdef IMAGE_TRANSFORM_2D_HP
#undef IMAGE_TRANSFORM_2D_HP
#endif
#ifdef POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#undef POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#endif
#ifdef PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#undef PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
#endif
#ifdef OCCLUSION_TEST_HP
#undef OCCLUSION_TEST_HP
#endif
#ifdef OCCLUSION_TEST_RESULT_HP
#undef OCCLUSION_TEST_RESULT_HP
#endif
#ifdef TEXTURE_LIGHTING_MODE_HP
#undef TEXTURE_LIGHTING_MODE_HP
#endif
#ifdef TEXTURE_POST_SPECULAR_HP
#undef TEXTURE_POST_SPECULAR_HP
#endif
#ifdef TEXTURE_PRE_SPECULAR_HP
#undef TEXTURE_PRE_SPECULAR_HP
#endif
#ifdef CULL_VERTEX_IBM
#undef CULL_VERTEX_IBM
#endif
#ifdef RASTER_POSITION_UNCLIPPED_IBM
#undef RASTER_POSITION_UNCLIPPED_IBM
#endif
#ifdef MIRRORED_REPEAT_IBM
#undef MIRRORED_REPEAT_IBM
#endif
#ifdef VERTEX_ARRAY_LIST_IBM
#undef VERTEX_ARRAY_LIST_IBM
#endif
#ifdef NORMAL_ARRAY_LIST_IBM
#undef NORMAL_ARRAY_LIST_IBM
#endif
#ifdef COLOR_ARRAY_LIST_IBM
#undef COLOR_ARRAY_LIST_IBM
#endif
#ifdef INDEX_ARRAY_LIST_IBM
#undef INDEX_ARRAY_LIST_IBM
#endif
#ifdef TEXTURE_COORD_ARRAY_LIST_IBM
#undef TEXTURE_COORD_ARRAY_LIST_IBM
#endif
#ifdef EDGE_FLAG_ARRAY_LIST_IBM
#undef EDGE_FLAG_ARRAY_LIST_IBM
#endif
#ifdef FOG_COORDINATE_ARRAY_LIST_IBM
#undef FOG_COORDINATE_ARRAY_LIST_IBM
#endif
#ifdef SECONDARY_COLOR_ARRAY_LIST_IBM
#undef SECONDARY_COLOR_ARRAY_LIST_IBM
#endif
#ifdef VERTEX_ARRAY_LIST_STRIDE_IBM
#undef VERTEX_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef NORMAL_ARRAY_LIST_STRIDE_IBM
#undef NORMAL_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef COLOR_ARRAY_LIST_STRIDE_IBM
#undef COLOR_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef INDEX_ARRAY_LIST_STRIDE_IBM
#undef INDEX_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
#undef TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
#undef EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
#undef FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
#undef SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
#endif
#ifdef RED_MIN_CLAMP_INGR
#undef RED_MIN_CLAMP_INGR
#endif
#ifdef GREEN_MIN_CLAMP_INGR
#undef GREEN_MIN_CLAMP_INGR
#endif
#ifdef BLUE_MIN_CLAMP_INGR
#undef BLUE_MIN_CLAMP_INGR
#endif
#ifdef ALPHA_MIN_CLAMP_INGR
#undef ALPHA_MIN_CLAMP_INGR
#endif
#ifdef RED_MAX_CLAMP_INGR
#undef RED_MAX_CLAMP_INGR
#endif
#ifdef GREEN_MAX_CLAMP_INGR
#undef GREEN_MAX_CLAMP_INGR
#endif
#ifdef BLUE_MAX_CLAMP_INGR
#undef BLUE_MAX_CLAMP_INGR
#endif
#ifdef ALPHA_MAX_CLAMP_INGR
#undef ALPHA_MAX_CLAMP_INGR
#endif
#ifdef INTERLACE_READ_INGR
#undef INTERLACE_READ_INGR
#endif
#ifdef PARALLEL_ARRAYS_INTEL
#undef PARALLEL_ARRAYS_INTEL
#endif
#ifdef VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
#undef VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
#endif
#ifdef NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
#undef NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
#endif
#ifdef COLOR_ARRAY_PARALLEL_POINTERS_INTEL
#undef COLOR_ARRAY_PARALLEL_POINTERS_INTEL
#endif
#ifdef TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
#undef TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
#endif
#ifdef PACK_INVERT_MESA
#undef PACK_INVERT_MESA
#endif
#ifdef UNSIGNED_SHORT_8_8_MESA
#undef UNSIGNED_SHORT_8_8_MESA
#endif
#ifdef UNSIGNED_SHORT_8_8_REV_MESA
#undef UNSIGNED_SHORT_8_8_REV_MESA
#endif
#ifdef YCBCR_MESA
#undef YCBCR_MESA
#endif
#ifdef DEPTH_STENCIL_TO_RGBA_NV
#undef DEPTH_STENCIL_TO_RGBA_NV
#endif
#ifdef DEPTH_STENCIL_TO_BGRA_NV
#undef DEPTH_STENCIL_TO_BGRA_NV
#endif
#ifdef DEPTH_CLAMP_NV
#undef DEPTH_CLAMP_NV
#endif
#ifdef EVAL_2D_NV
#undef EVAL_2D_NV
#endif
#ifdef EVAL_TRIANGULAR_2D_NV
#undef EVAL_TRIANGULAR_2D_NV
#endif
#ifdef MAP_TESSELLATION_NV
#undef MAP_TESSELLATION_NV
#endif
#ifdef MAP_ATTRIB_U_ORDER_NV
#undef MAP_ATTRIB_U_ORDER_NV
#endif
#ifdef MAP_ATTRIB_V_ORDER_NV
#undef MAP_ATTRIB_V_ORDER_NV
#endif
#ifdef EVAL_FRACTIONAL_TESSELLATION_NV
#undef EVAL_FRACTIONAL_TESSELLATION_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB0_NV
#undef EVAL_VERTEX_ATTRIB0_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB1_NV
#undef EVAL_VERTEX_ATTRIB1_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB2_NV
#undef EVAL_VERTEX_ATTRIB2_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB3_NV
#undef EVAL_VERTEX_ATTRIB3_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB4_NV
#undef EVAL_VERTEX_ATTRIB4_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB5_NV
#undef EVAL_VERTEX_ATTRIB5_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB6_NV
#undef EVAL_VERTEX_ATTRIB6_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB7_NV
#undef EVAL_VERTEX_ATTRIB7_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB8_NV
#undef EVAL_VERTEX_ATTRIB8_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB9_NV
#undef EVAL_VERTEX_ATTRIB9_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB10_NV
#undef EVAL_VERTEX_ATTRIB10_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB11_NV
#undef EVAL_VERTEX_ATTRIB11_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB12_NV
#undef EVAL_VERTEX_ATTRIB12_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB13_NV
#undef EVAL_VERTEX_ATTRIB13_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB14_NV
#undef EVAL_VERTEX_ATTRIB14_NV
#endif
#ifdef EVAL_VERTEX_ATTRIB15_NV
#undef EVAL_VERTEX_ATTRIB15_NV
#endif
#ifdef MAX_MAP_TESSELLATION_NV
#undef MAX_MAP_TESSELLATION_NV
#endif
#ifdef MAX_RATIONAL_EVAL_ORDER_NV
#undef MAX_RATIONAL_EVAL_ORDER_NV
#endif
#ifdef ALL_COMPLETED_NV
#undef ALL_COMPLETED_NV
#endif
#ifdef FENCE_STATUS_NV
#undef FENCE_STATUS_NV
#endif
#ifdef FENCE_CONDITION_NV
#undef FENCE_CONDITION_NV
#endif
#ifdef FLOAT_R_NV
#undef FLOAT_R_NV
#endif
#ifdef FLOAT_RG_NV
#undef FLOAT_RG_NV
#endif
#ifdef FLOAT_RGB_NV
#undef FLOAT_RGB_NV
#endif
#ifdef FLOAT_RGBA_NV
#undef FLOAT_RGBA_NV
#endif
#ifdef FLOAT_R16_NV
#undef FLOAT_R16_NV
#endif
#ifdef FLOAT_R32_NV
#undef FLOAT_R32_NV
#endif
#ifdef FLOAT_RG16_NV
#undef FLOAT_RG16_NV
#endif
#ifdef FLOAT_RG32_NV
#undef FLOAT_RG32_NV
#endif
#ifdef FLOAT_RGB16_NV
#undef FLOAT_RGB16_NV
#endif
#ifdef FLOAT_RGB32_NV
#undef FLOAT_RGB32_NV
#endif
#ifdef FLOAT_RGBA16_NV
#undef FLOAT_RGBA16_NV
#endif
#ifdef FLOAT_RGBA32_NV
#undef FLOAT_RGBA32_NV
#endif
#ifdef TEXTURE_FLOAT_COMPONENTS_NV
#undef TEXTURE_FLOAT_COMPONENTS_NV
#endif
#ifdef FLOAT_CLEAR_COLOR_VALUE_NV
#undef FLOAT_CLEAR_COLOR_VALUE_NV
#endif
#ifdef FLOAT_RGBA_MODE_NV
#undef FLOAT_RGBA_MODE_NV
#endif
#ifdef FOG_DISTANCE_MODE_NV
#undef FOG_DISTANCE_MODE_NV
#endif
#ifdef EYE_RADIAL_NV
#undef EYE_RADIAL_NV
#endif
#ifdef EYE_PLANE_ABSOLUTE_NV
#undef EYE_PLANE_ABSOLUTE_NV
#endif
#ifdef MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
#undef MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
#endif
#ifdef FRAGMENT_PROGRAM_NV
#undef FRAGMENT_PROGRAM_NV
#endif
#ifdef MAX_TEXTURE_COORDS_NV
#undef MAX_TEXTURE_COORDS_NV
#endif
#ifdef MAX_TEXTURE_IMAGE_UNITS_NV
#undef MAX_TEXTURE_IMAGE_UNITS_NV
#endif
#ifdef FRAGMENT_PROGRAM_BINDING_NV
#undef FRAGMENT_PROGRAM_BINDING_NV
#endif
#ifdef PROGRAM_ERROR_STRING_NV
#undef PROGRAM_ERROR_STRING_NV
#endif
#ifdef MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#undef MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
#endif
#ifdef MAX_PROGRAM_CALL_DEPTH_NV
#undef MAX_PROGRAM_CALL_DEPTH_NV
#endif
#ifdef MAX_PROGRAM_IF_DEPTH_NV
#undef MAX_PROGRAM_IF_DEPTH_NV
#endif
#ifdef MAX_PROGRAM_LOOP_DEPTH_NV
#undef MAX_PROGRAM_LOOP_DEPTH_NV
#endif
#ifdef MAX_PROGRAM_LOOP_COUNT_NV
#undef MAX_PROGRAM_LOOP_COUNT_NV
#endif
#ifdef HALF_FLOAT_NV
#undef HALF_FLOAT_NV
#endif
#ifdef MAX_SHININESS_NV
#undef MAX_SHININESS_NV
#endif
#ifdef MAX_SPOT_EXPONENT_NV
#undef MAX_SPOT_EXPONENT_NV
#endif
#ifdef MULTISAMPLE_FILTER_HINT_NV
#undef MULTISAMPLE_FILTER_HINT_NV
#endif
#ifdef PIXEL_COUNTER_BITS_NV
#undef PIXEL_COUNTER_BITS_NV
#endif
#ifdef CURRENT_OCCLUSION_QUERY_ID_NV
#undef CURRENT_OCCLUSION_QUERY_ID_NV
#endif
#ifdef PIXEL_COUNT_NV
#undef PIXEL_COUNT_NV
#endif
#ifdef PIXEL_COUNT_AVAILABLE_NV
#undef PIXEL_COUNT_AVAILABLE_NV
#endif
#ifdef DEPTH_STENCIL_NV
#undef DEPTH_STENCIL_NV
#endif
#ifdef UNSIGNED_INT_24_8_NV
#undef UNSIGNED_INT_24_8_NV
#endif
#ifdef WRITE_PIXEL_DATA_RANGE_NV
#undef WRITE_PIXEL_DATA_RANGE_NV
#endif
#ifdef READ_PIXEL_DATA_RANGE_NV
#undef READ_PIXEL_DATA_RANGE_NV
#endif
#ifdef WRITE_PIXEL_DATA_RANGE_LENGTH_NV
#undef WRITE_PIXEL_DATA_RANGE_LENGTH_NV
#endif
#ifdef READ_PIXEL_DATA_RANGE_LENGTH_NV
#undef READ_PIXEL_DATA_RANGE_LENGTH_NV
#endif
#ifdef WRITE_PIXEL_DATA_RANGE_POINTER_NV
#undef WRITE_PIXEL_DATA_RANGE_POINTER_NV
#endif
#ifdef READ_PIXEL_DATA_RANGE_POINTER_NV
#undef READ_PIXEL_DATA_RANGE_POINTER_NV
#endif
#ifdef POINT_SPRITE_NV
#undef POINT_SPRITE_NV
#endif
#ifdef COORD_REPLACE_NV
#undef COORD_REPLACE_NV
#endif
#ifdef POINT_SPRITE_R_MODE_NV
#undef POINT_SPRITE_R_MODE_NV
#endif
#ifdef PRIMITIVE_RESTART_NV
#undef PRIMITIVE_RESTART_NV
#endif
#ifdef PRIMITIVE_RESTART_INDEX_NV
#undef PRIMITIVE_RESTART_INDEX_NV
#endif
#ifdef REGISTER_COMBINERS_NV
#undef REGISTER_COMBINERS_NV
#endif
#ifdef VARIABLE_A_NV
#undef VARIABLE_A_NV
#endif
#ifdef VARIABLE_B_NV
#undef VARIABLE_B_NV
#endif
#ifdef VARIABLE_C_NV
#undef VARIABLE_C_NV
#endif
#ifdef VARIABLE_D_NV
#undef VARIABLE_D_NV
#endif
#ifdef VARIABLE_E_NV
#undef VARIABLE_E_NV
#endif
#ifdef VARIABLE_F_NV
#undef VARIABLE_F_NV
#endif
#ifdef VARIABLE_G_NV
#undef VARIABLE_G_NV
#endif
#ifdef CONSTANT_COLOR0_NV
#undef CONSTANT_COLOR0_NV
#endif
#ifdef CONSTANT_COLOR1_NV
#undef CONSTANT_COLOR1_NV
#endif
#ifdef PRIMARY_COLOR_NV
#undef PRIMARY_COLOR_NV
#endif
#ifdef SECONDARY_COLOR_NV
#undef SECONDARY_COLOR_NV
#endif
#ifdef SPARE0_NV
#undef SPARE0_NV
#endif
#ifdef SPARE1_NV
#undef SPARE1_NV
#endif
#ifdef DISCARD_NV
#undef DISCARD_NV
#endif
#ifdef E_TIMES_F_NV
#undef E_TIMES_F_NV
#endif
#ifdef SPARE0_PLUS_SECONDARY_COLOR_NV
#undef SPARE0_PLUS_SECONDARY_COLOR_NV
#endif
#ifdef UNSIGNED_IDENTITY_NV
#undef UNSIGNED_IDENTITY_NV
#endif
#ifdef UNSIGNED_INVERT_NV
#undef UNSIGNED_INVERT_NV
#endif
#ifdef EXPAND_NORMAL_NV
#undef EXPAND_NORMAL_NV
#endif
#ifdef EXPAND_NEGATE_NV
#undef EXPAND_NEGATE_NV
#endif
#ifdef HALF_BIAS_NORMAL_NV
#undef HALF_BIAS_NORMAL_NV
#endif
#ifdef HALF_BIAS_NEGATE_NV
#undef HALF_BIAS_NEGATE_NV
#endif
#ifdef SIGNED_IDENTITY_NV
#undef SIGNED_IDENTITY_NV
#endif
#ifdef SIGNED_NEGATE_NV
#undef SIGNED_NEGATE_NV
#endif
#ifdef SCALE_BY_TWO_NV
#undef SCALE_BY_TWO_NV
#endif
#ifdef SCALE_BY_FOUR_NV
#undef SCALE_BY_FOUR_NV
#endif
#ifdef SCALE_BY_ONE_HALF_NV
#undef SCALE_BY_ONE_HALF_NV
#endif
#ifdef BIAS_BY_NEGATIVE_ONE_HALF_NV
#undef BIAS_BY_NEGATIVE_ONE_HALF_NV
#endif
#ifdef COMBINER_INPUT_NV
#undef COMBINER_INPUT_NV
#endif
#ifdef COMBINER_MAPPING_NV
#undef COMBINER_MAPPING_NV
#endif
#ifdef COMBINER_COMPONENT_USAGE_NV
#undef COMBINER_COMPONENT_USAGE_NV
#endif
#ifdef COMBINER_AB_DOT_PRODUCT_NV
#undef COMBINER_AB_DOT_PRODUCT_NV
#endif
#ifdef COMBINER_CD_DOT_PRODUCT_NV
#undef COMBINER_CD_DOT_PRODUCT_NV
#endif
#ifdef COMBINER_MUX_SUM_NV
#undef COMBINER_MUX_SUM_NV
#endif
#ifdef COMBINER_SCALE_NV
#undef COMBINER_SCALE_NV
#endif
#ifdef COMBINER_BIAS_NV
#undef COMBINER_BIAS_NV
#endif
#ifdef COMBINER_AB_OUTPUT_NV
#undef COMBINER_AB_OUTPUT_NV
#endif
#ifdef COMBINER_CD_OUTPUT_NV
#undef COMBINER_CD_OUTPUT_NV
#endif
#ifdef COMBINER_SUM_OUTPUT_NV
#undef COMBINER_SUM_OUTPUT_NV
#endif
#ifdef MAX_GENERAL_COMBINERS_NV
#undef MAX_GENERAL_COMBINERS_NV
#endif
#ifdef NUM_GENERAL_COMBINERS_NV
#undef NUM_GENERAL_COMBINERS_NV
#endif
#ifdef COLOR_SUM_CLAMP_NV
#undef COLOR_SUM_CLAMP_NV
#endif
#ifdef COMBINER0_NV
#undef COMBINER0_NV
#endif
#ifdef COMBINER1_NV
#undef COMBINER1_NV
#endif
#ifdef COMBINER2_NV
#undef COMBINER2_NV
#endif
#ifdef COMBINER3_NV
#undef COMBINER3_NV
#endif
#ifdef COMBINER4_NV
#undef COMBINER4_NV
#endif
#ifdef COMBINER5_NV
#undef COMBINER5_NV
#endif
#ifdef COMBINER6_NV
#undef COMBINER6_NV
#endif
#ifdef COMBINER7_NV
#undef COMBINER7_NV
#endif
#ifdef PER_STAGE_CONSTANTS_NV
#undef PER_STAGE_CONSTANTS_NV
#endif
#ifdef EMBOSS_LIGHT_NV
#undef EMBOSS_LIGHT_NV
#endif
#ifdef EMBOSS_CONSTANT_NV
#undef EMBOSS_CONSTANT_NV
#endif
#ifdef EMBOSS_MAP_NV
#undef EMBOSS_MAP_NV
#endif
#ifdef NORMAL_MAP_NV
#undef NORMAL_MAP_NV
#endif
#ifdef REFLECTION_MAP_NV
#undef REFLECTION_MAP_NV
#endif
#ifdef COMBINE4_NV
#undef COMBINE4_NV
#endif
#ifdef SOURCE3_RGB_NV
#undef SOURCE3_RGB_NV
#endif
#ifdef SOURCE3_ALPHA_NV
#undef SOURCE3_ALPHA_NV
#endif
#ifdef OPERAND3_RGB_NV
#undef OPERAND3_RGB_NV
#endif
#ifdef OPERAND3_ALPHA_NV
#undef OPERAND3_ALPHA_NV
#endif
#ifdef TEXTURE_UNSIGNED_REMAP_MODE_NV
#undef TEXTURE_UNSIGNED_REMAP_MODE_NV
#endif
#ifdef TEXTURE_RECTANGLE_NV
#undef TEXTURE_RECTANGLE_NV
#endif
#ifdef TEXTURE_BINDING_RECTANGLE_NV
#undef TEXTURE_BINDING_RECTANGLE_NV
#endif
#ifdef PROXY_TEXTURE_RECTANGLE_NV
#undef PROXY_TEXTURE_RECTANGLE_NV
#endif
#ifdef MAX_RECTANGLE_TEXTURE_SIZE_NV
#undef MAX_RECTANGLE_TEXTURE_SIZE_NV
#endif
#ifdef OFFSET_TEXTURE_RECTANGLE_NV
#undef OFFSET_TEXTURE_RECTANGLE_NV
#endif
#ifdef OFFSET_TEXTURE_RECTANGLE_SCALE_NV
#undef OFFSET_TEXTURE_RECTANGLE_SCALE_NV
#endif
#ifdef DOT_PRODUCT_TEXTURE_RECTANGLE_NV
#undef DOT_PRODUCT_TEXTURE_RECTANGLE_NV
#endif
#ifdef RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
#undef RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
#endif
#ifdef UNSIGNED_INT_S8_S8_8_8_NV
#undef UNSIGNED_INT_S8_S8_8_8_NV
#endif
#ifdef UNSIGNED_INT_8_8_S8_S8_REV_NV
#undef UNSIGNED_INT_8_8_S8_S8_REV_NV
#endif
#ifdef DSDT_MAG_INTENSITY_NV
#undef DSDT_MAG_INTENSITY_NV
#endif
#ifdef SHADER_CONSISTENT_NV
#undef SHADER_CONSISTENT_NV
#endif
#ifdef TEXTURE_SHADER_NV
#undef TEXTURE_SHADER_NV
#endif
#ifdef SHADER_OPERATION_NV
#undef SHADER_OPERATION_NV
#endif
#ifdef CULL_MODES_NV
#undef CULL_MODES_NV
#endif
#ifdef OFFSET_TEXTURE_MATRIX_NV
#undef OFFSET_TEXTURE_MATRIX_NV
#endif
#ifdef OFFSET_TEXTURE_SCALE_NV
#undef OFFSET_TEXTURE_SCALE_NV
#endif
#ifdef OFFSET_TEXTURE_BIAS_NV
#undef OFFSET_TEXTURE_BIAS_NV
#endif
#ifdef OFFSET_TEXTURE_2D_MATRIX_NV
#undef OFFSET_TEXTURE_2D_MATRIX_NV
#endif
#ifdef OFFSET_TEXTURE_2D_SCALE_NV
#undef OFFSET_TEXTURE_2D_SCALE_NV
#endif
#ifdef OFFSET_TEXTURE_2D_BIAS_NV
#undef OFFSET_TEXTURE_2D_BIAS_NV
#endif
#ifdef PREVIOUS_TEXTURE_INPUT_NV
#undef PREVIOUS_TEXTURE_INPUT_NV
#endif
#ifdef CONST_EYE_NV
#undef CONST_EYE_NV
#endif
#ifdef PASS_THROUGH_NV
#undef PASS_THROUGH_NV
#endif
#ifdef CULL_FRAGMENT_NV
#undef CULL_FRAGMENT_NV
#endif
#ifdef OFFSET_TEXTURE_2D_NV
#undef OFFSET_TEXTURE_2D_NV
#endif
#ifdef DEPENDENT_AR_TEXTURE_2D_NV
#undef DEPENDENT_AR_TEXTURE_2D_NV
#endif
#ifdef DEPENDENT_GB_TEXTURE_2D_NV
#undef DEPENDENT_GB_TEXTURE_2D_NV
#endif
#ifdef DOT_PRODUCT_NV
#undef DOT_PRODUCT_NV
#endif
#ifdef DOT_PRODUCT_DEPTH_REPLACE_NV
#undef DOT_PRODUCT_DEPTH_REPLACE_NV
#endif
#ifdef DOT_PRODUCT_TEXTURE_2D_NV
#undef DOT_PRODUCT_TEXTURE_2D_NV
#endif
#ifdef DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
#undef DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
#endif
#ifdef DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
#undef DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
#endif
#ifdef DOT_PRODUCT_REFLECT_CUBE_MAP_NV
#undef DOT_PRODUCT_REFLECT_CUBE_MAP_NV
#endif
#ifdef DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
#undef DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
#endif
#ifdef HILO_NV
#undef HILO_NV
#endif
#ifdef DSDT_NV
#undef DSDT_NV
#endif
#ifdef DSDT_MAG_NV
#undef DSDT_MAG_NV
#endif
#ifdef DSDT_MAG_VIB_NV
#undef DSDT_MAG_VIB_NV
#endif
#ifdef HILO16_NV
#undef HILO16_NV
#endif
#ifdef SIGNED_HILO_NV
#undef SIGNED_HILO_NV
#endif
#ifdef SIGNED_HILO16_NV
#undef SIGNED_HILO16_NV
#endif
#ifdef SIGNED_RGBA_NV
#undef SIGNED_RGBA_NV
#endif
#ifdef SIGNED_RGBA8_NV
#undef SIGNED_RGBA8_NV
#endif
#ifdef SIGNED_RGB_NV
#undef SIGNED_RGB_NV
#endif
#ifdef SIGNED_RGB8_NV
#undef SIGNED_RGB8_NV
#endif
#ifdef SIGNED_LUMINANCE_NV
#undef SIGNED_LUMINANCE_NV
#endif
#ifdef SIGNED_LUMINANCE8_NV
#undef SIGNED_LUMINANCE8_NV
#endif
#ifdef SIGNED_LUMINANCE_ALPHA_NV
#undef SIGNED_LUMINANCE_ALPHA_NV
#endif
#ifdef SIGNED_LUMINANCE8_ALPHA8_NV
#undef SIGNED_LUMINANCE8_ALPHA8_NV
#endif
#ifdef SIGNED_ALPHA_NV
#undef SIGNED_ALPHA_NV
#endif
#ifdef SIGNED_ALPHA8_NV
#undef SIGNED_ALPHA8_NV
#endif
#ifdef SIGNED_INTENSITY_NV
#undef SIGNED_INTENSITY_NV
#endif
#ifdef SIGNED_INTENSITY8_NV
#undef SIGNED_INTENSITY8_NV
#endif
#ifdef DSDT8_NV
#undef DSDT8_NV
#endif
#ifdef DSDT8_MAG8_NV
#undef DSDT8_MAG8_NV
#endif
#ifdef DSDT8_MAG8_INTENSITY8_NV
#undef DSDT8_MAG8_INTENSITY8_NV
#endif
#ifdef SIGNED_RGB_UNSIGNED_ALPHA_NV
#undef SIGNED_RGB_UNSIGNED_ALPHA_NV
#endif
#ifdef SIGNED_RGB8_UNSIGNED_ALPHA8_NV
#undef SIGNED_RGB8_UNSIGNED_ALPHA8_NV
#endif
#ifdef HI_SCALE_NV
#undef HI_SCALE_NV
#endif
#ifdef LO_SCALE_NV
#undef LO_SCALE_NV
#endif
#ifdef DS_SCALE_NV
#undef DS_SCALE_NV
#endif
#ifdef DT_SCALE_NV
#undef DT_SCALE_NV
#endif
#ifdef MAGNITUDE_SCALE_NV
#undef MAGNITUDE_SCALE_NV
#endif
#ifdef VIBRANCE_SCALE_NV
#undef VIBRANCE_SCALE_NV
#endif
#ifdef HI_BIAS_NV
#undef HI_BIAS_NV
#endif
#ifdef LO_BIAS_NV
#undef LO_BIAS_NV
#endif
#ifdef DS_BIAS_NV
#undef DS_BIAS_NV
#endif
#ifdef DT_BIAS_NV
#undef DT_BIAS_NV
#endif
#ifdef MAGNITUDE_BIAS_NV
#undef MAGNITUDE_BIAS_NV
#endif
#ifdef VIBRANCE_BIAS_NV
#undef VIBRANCE_BIAS_NV
#endif
#ifdef TEXTURE_BORDER_VALUES_NV
#undef TEXTURE_BORDER_VALUES_NV
#endif
#ifdef TEXTURE_HI_SIZE_NV
#undef TEXTURE_HI_SIZE_NV
#endif
#ifdef TEXTURE_LO_SIZE_NV
#undef TEXTURE_LO_SIZE_NV
#endif
#ifdef TEXTURE_DS_SIZE_NV
#undef TEXTURE_DS_SIZE_NV
#endif
#ifdef TEXTURE_DT_SIZE_NV
#undef TEXTURE_DT_SIZE_NV
#endif
#ifdef TEXTURE_MAG_SIZE_NV
#undef TEXTURE_MAG_SIZE_NV
#endif
#ifdef DOT_PRODUCT_TEXTURE_3D_NV
#undef DOT_PRODUCT_TEXTURE_3D_NV
#endif
#ifdef OFFSET_PROJECTIVE_TEXTURE_2D_NV
#undef OFFSET_PROJECTIVE_TEXTURE_2D_NV
#endif
#ifdef OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
#undef OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
#endif
#ifdef OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
#undef OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
#endif
#ifdef OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
#undef OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
#endif
#ifdef OFFSET_HILO_TEXTURE_2D_NV
#undef OFFSET_HILO_TEXTURE_2D_NV
#endif
#ifdef OFFSET_HILO_TEXTURE_RECTANGLE_NV
#undef OFFSET_HILO_TEXTURE_RECTANGLE_NV
#endif
#ifdef OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
#undef OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
#endif
#ifdef OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
#undef OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
#endif
#ifdef DEPENDENT_HILO_TEXTURE_2D_NV
#undef DEPENDENT_HILO_TEXTURE_2D_NV
#endif
#ifdef DEPENDENT_RGB_TEXTURE_3D_NV
#undef DEPENDENT_RGB_TEXTURE_3D_NV
#endif
#ifdef DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
#undef DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
#endif
#ifdef DOT_PRODUCT_PASS_THROUGH_NV
#undef DOT_PRODUCT_PASS_THROUGH_NV
#endif
#ifdef DOT_PRODUCT_TEXTURE_1D_NV
#undef DOT_PRODUCT_TEXTURE_1D_NV
#endif
#ifdef DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
#undef DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
#endif
#ifdef HILO8_NV
#undef HILO8_NV
#endif
#ifdef SIGNED_HILO8_NV
#undef SIGNED_HILO8_NV
#endif
#ifdef FORCE_BLUE_TO_ONE_NV
#undef FORCE_BLUE_TO_ONE_NV
#endif
#ifdef VERTEX_ARRAY_RANGE_NV
#undef VERTEX_ARRAY_RANGE_NV
#endif
#ifdef VERTEX_ARRAY_RANGE_LENGTH_NV
#undef VERTEX_ARRAY_RANGE_LENGTH_NV
#endif
#ifdef VERTEX_ARRAY_RANGE_VALID_NV
#undef VERTEX_ARRAY_RANGE_VALID_NV
#endif
#ifdef MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
#undef MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
#endif
#ifdef VERTEX_ARRAY_RANGE_POINTER_NV
#undef VERTEX_ARRAY_RANGE_POINTER_NV
#endif
#ifdef VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
#undef VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
#endif
#ifdef VERTEX_PROGRAM_NV
#undef VERTEX_PROGRAM_NV
#endif
#ifdef VERTEX_STATE_PROGRAM_NV
#undef VERTEX_STATE_PROGRAM_NV
#endif
#ifdef ATTRIB_ARRAY_SIZE_NV
#undef ATTRIB_ARRAY_SIZE_NV
#endif
#ifdef ATTRIB_ARRAY_STRIDE_NV
#undef ATTRIB_ARRAY_STRIDE_NV
#endif
#ifdef ATTRIB_ARRAY_TYPE_NV
#undef ATTRIB_ARRAY_TYPE_NV
#endif
#ifdef CURRENT_ATTRIB_NV
#undef CURRENT_ATTRIB_NV
#endif
#ifdef PROGRAM_LENGTH_NV
#undef PROGRAM_LENGTH_NV
#endif
#ifdef PROGRAM_STRING_NV
#undef PROGRAM_STRING_NV
#endif
#ifdef MODELVIEW_PROJECTION_NV
#undef MODELVIEW_PROJECTION_NV
#endif
#ifdef IDENTITY_NV
#undef IDENTITY_NV
#endif
#ifdef INVERSE_NV
#undef INVERSE_NV
#endif
#ifdef TRANSPOSE_NV
#undef TRANSPOSE_NV
#endif
#ifdef INVERSE_TRANSPOSE_NV
#undef INVERSE_TRANSPOSE_NV
#endif
#ifdef MAX_TRACK_MATRIX_STACK_DEPTH_NV
#undef MAX_TRACK_MATRIX_STACK_DEPTH_NV
#endif
#ifdef MAX_TRACK_MATRICES_NV
#undef MAX_TRACK_MATRICES_NV
#endif
#ifdef MATRIX0_NV
#undef MATRIX0_NV
#endif
#ifdef MATRIX1_NV
#undef MATRIX1_NV
#endif
#ifdef MATRIX2_NV
#undef MATRIX2_NV
#endif
#ifdef MATRIX3_NV
#undef MATRIX3_NV
#endif
#ifdef MATRIX4_NV
#undef MATRIX4_NV
#endif
#ifdef MATRIX5_NV
#undef MATRIX5_NV
#endif
#ifdef MATRIX6_NV
#undef MATRIX6_NV
#endif
#ifdef MATRIX7_NV
#undef MATRIX7_NV
#endif
#ifdef CURRENT_MATRIX_STACK_DEPTH_NV
#undef CURRENT_MATRIX_STACK_DEPTH_NV
#endif
#ifdef CURRENT_MATRIX_NV
#undef CURRENT_MATRIX_NV
#endif
#ifdef VERTEX_PROGRAM_POINT_SIZE_NV
#undef VERTEX_PROGRAM_POINT_SIZE_NV
#endif
#ifdef VERTEX_PROGRAM_TWO_SIDE_NV
#undef VERTEX_PROGRAM_TWO_SIDE_NV
#endif
#ifdef PROGRAM_PARAMETER_NV
#undef PROGRAM_PARAMETER_NV
#endif
#ifdef ATTRIB_ARRAY_POINTER_NV
#undef ATTRIB_ARRAY_POINTER_NV
#endif
#ifdef PROGRAM_TARGET_NV
#undef PROGRAM_TARGET_NV
#endif
#ifdef PROGRAM_RESIDENT_NV
#undef PROGRAM_RESIDENT_NV
#endif
#ifdef TRACK_MATRIX_NV
#undef TRACK_MATRIX_NV
#endif
#ifdef TRACK_MATRIX_TRANSFORM_NV
#undef TRACK_MATRIX_TRANSFORM_NV
#endif
#ifdef VERTEX_PROGRAM_BINDING_NV
#undef VERTEX_PROGRAM_BINDING_NV
#endif
#ifdef PROGRAM_ERROR_POSITION_NV
#undef PROGRAM_ERROR_POSITION_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY0_NV
#undef VERTEX_ATTRIB_ARRAY0_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY1_NV
#undef VERTEX_ATTRIB_ARRAY1_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY2_NV
#undef VERTEX_ATTRIB_ARRAY2_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY3_NV
#undef VERTEX_ATTRIB_ARRAY3_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY4_NV
#undef VERTEX_ATTRIB_ARRAY4_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY5_NV
#undef VERTEX_ATTRIB_ARRAY5_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY6_NV
#undef VERTEX_ATTRIB_ARRAY6_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY7_NV
#undef VERTEX_ATTRIB_ARRAY7_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY8_NV
#undef VERTEX_ATTRIB_ARRAY8_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY9_NV
#undef VERTEX_ATTRIB_ARRAY9_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY10_NV
#undef VERTEX_ATTRIB_ARRAY10_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY11_NV
#undef VERTEX_ATTRIB_ARRAY11_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY12_NV
#undef VERTEX_ATTRIB_ARRAY12_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY13_NV
#undef VERTEX_ATTRIB_ARRAY13_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY14_NV
#undef VERTEX_ATTRIB_ARRAY14_NV
#endif
#ifdef VERTEX_ATTRIB_ARRAY15_NV
#undef VERTEX_ATTRIB_ARRAY15_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB0_4_NV
#undef MAP1_VERTEX_ATTRIB0_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB1_4_NV
#undef MAP1_VERTEX_ATTRIB1_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB2_4_NV
#undef MAP1_VERTEX_ATTRIB2_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB3_4_NV
#undef MAP1_VERTEX_ATTRIB3_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB4_4_NV
#undef MAP1_VERTEX_ATTRIB4_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB5_4_NV
#undef MAP1_VERTEX_ATTRIB5_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB6_4_NV
#undef MAP1_VERTEX_ATTRIB6_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB7_4_NV
#undef MAP1_VERTEX_ATTRIB7_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB8_4_NV
#undef MAP1_VERTEX_ATTRIB8_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB9_4_NV
#undef MAP1_VERTEX_ATTRIB9_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB10_4_NV
#undef MAP1_VERTEX_ATTRIB10_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB11_4_NV
#undef MAP1_VERTEX_ATTRIB11_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB12_4_NV
#undef MAP1_VERTEX_ATTRIB12_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB13_4_NV
#undef MAP1_VERTEX_ATTRIB13_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB14_4_NV
#undef MAP1_VERTEX_ATTRIB14_4_NV
#endif
#ifdef MAP1_VERTEX_ATTRIB15_4_NV
#undef MAP1_VERTEX_ATTRIB15_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB0_4_NV
#undef MAP2_VERTEX_ATTRIB0_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB1_4_NV
#undef MAP2_VERTEX_ATTRIB1_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB2_4_NV
#undef MAP2_VERTEX_ATTRIB2_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB3_4_NV
#undef MAP2_VERTEX_ATTRIB3_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB4_4_NV
#undef MAP2_VERTEX_ATTRIB4_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB5_4_NV
#undef MAP2_VERTEX_ATTRIB5_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB6_4_NV
#undef MAP2_VERTEX_ATTRIB6_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB7_4_NV
#undef MAP2_VERTEX_ATTRIB7_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB8_4_NV
#undef MAP2_VERTEX_ATTRIB8_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB9_4_NV
#undef MAP2_VERTEX_ATTRIB9_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB10_4_NV
#undef MAP2_VERTEX_ATTRIB10_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB11_4_NV
#undef MAP2_VERTEX_ATTRIB11_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB12_4_NV
#undef MAP2_VERTEX_ATTRIB12_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB13_4_NV
#undef MAP2_VERTEX_ATTRIB13_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB14_4_NV
#undef MAP2_VERTEX_ATTRIB14_4_NV
#endif
#ifdef MAP2_VERTEX_ATTRIB15_4_NV
#undef MAP2_VERTEX_ATTRIB15_4_NV
#endif
#ifdef IMPLEMENTATION_COLOR_READ_TYPE_OES
#undef IMPLEMENTATION_COLOR_READ_TYPE_OES
#endif
#ifdef IMPLEMENTATION_COLOR_READ_FORMAT_OES
#undef IMPLEMENTATION_COLOR_READ_FORMAT_OES
#endif
#ifdef INTERLACE_OML
#undef INTERLACE_OML
#endif
#ifdef INTERLACE_READ_OML
#undef INTERLACE_READ_OML
#endif
#ifdef PACK_RESAMPLE_OML
#undef PACK_RESAMPLE_OML
#endif
#ifdef UNPACK_RESAMPLE_OML
#undef UNPACK_RESAMPLE_OML
#endif
#ifdef RESAMPLE_REPLICATE_OML
#undef RESAMPLE_REPLICATE_OML
#endif
#ifdef RESAMPLE_ZERO_FILL_OML
#undef RESAMPLE_ZERO_FILL_OML
#endif
#ifdef RESAMPLE_AVERAGE_OML
#undef RESAMPLE_AVERAGE_OML
#endif
#ifdef RESAMPLE_DECIMATE_OML
#undef RESAMPLE_DECIMATE_OML
#endif
#ifdef FORMAT_SUBSAMPLE_24_24_OML
#undef FORMAT_SUBSAMPLE_24_24_OML
#endif
#ifdef FORMAT_SUBSAMPLE_244_244_OML
#undef FORMAT_SUBSAMPLE_244_244_OML
#endif
#ifdef PREFER_DOUBLEBUFFER_HINT_PGI
#undef PREFER_DOUBLEBUFFER_HINT_PGI
#endif
#ifdef CONSERVE_MEMORY_HINT_PGI
#undef CONSERVE_MEMORY_HINT_PGI
#endif
#ifdef RECLAIM_MEMORY_HINT_PGI
#undef RECLAIM_MEMORY_HINT_PGI
#endif
#ifdef NATIVE_GRAPHICS_HANDLE_PGI
#undef NATIVE_GRAPHICS_HANDLE_PGI
#endif
#ifdef NATIVE_GRAPHICS_BEGIN_HINT_PGI
#undef NATIVE_GRAPHICS_BEGIN_HINT_PGI
#endif
#ifdef NATIVE_GRAPHICS_END_HINT_PGI
#undef NATIVE_GRAPHICS_END_HINT_PGI
#endif
#ifdef ALWAYS_FAST_HINT_PGI
#undef ALWAYS_FAST_HINT_PGI
#endif
#ifdef ALWAYS_SOFT_HINT_PGI
#undef ALWAYS_SOFT_HINT_PGI
#endif
#ifdef ALLOW_DRAW_OBJ_HINT_PGI
#undef ALLOW_DRAW_OBJ_HINT_PGI
#endif
#ifdef ALLOW_DRAW_WIN_HINT_PGI
#undef ALLOW_DRAW_WIN_HINT_PGI
#endif
#ifdef ALLOW_DRAW_FRG_HINT_PGI
#undef ALLOW_DRAW_FRG_HINT_PGI
#endif
#ifdef ALLOW_DRAW_MEM_HINT_PGI
#undef ALLOW_DRAW_MEM_HINT_PGI
#endif
#ifdef STRICT_DEPTHFUNC_HINT_PGI
#undef STRICT_DEPTHFUNC_HINT_PGI
#endif
#ifdef STRICT_LIGHTING_HINT_PGI
#undef STRICT_LIGHTING_HINT_PGI
#endif
#ifdef STRICT_SCISSOR_HINT_PGI
#undef STRICT_SCISSOR_HINT_PGI
#endif
#ifdef FULL_STIPPLE_HINT_PGI
#undef FULL_STIPPLE_HINT_PGI
#endif
#ifdef CLIP_NEAR_HINT_PGI
#undef CLIP_NEAR_HINT_PGI
#endif
#ifdef CLIP_FAR_HINT_PGI
#undef CLIP_FAR_HINT_PGI
#endif
#ifdef WIDE_LINE_HINT_PGI
#undef WIDE_LINE_HINT_PGI
#endif
#ifdef BACK_NORMALS_HINT_PGI
#undef BACK_NORMALS_HINT_PGI
#endif
#ifdef VERTEX_DATA_HINT_PGI
#undef VERTEX_DATA_HINT_PGI
#endif
#ifdef VERTEX_CONSISTENT_HINT_PGI
#undef VERTEX_CONSISTENT_HINT_PGI
#endif
#ifdef MATERIAL_SIDE_HINT_PGI
#undef MATERIAL_SIDE_HINT_PGI
#endif
#ifdef MAX_VERTEX_HINT_PGI
#undef MAX_VERTEX_HINT_PGI
#endif
#ifdef COLOR3_BIT_PGI
#undef COLOR3_BIT_PGI
#endif
#ifdef COLOR4_BIT_PGI
#undef COLOR4_BIT_PGI
#endif
#ifdef EDGEFLAG_BIT_PGI
#undef EDGEFLAG_BIT_PGI
#endif
#ifdef INDEX_BIT_PGI
#undef INDEX_BIT_PGI
#endif
#ifdef MAT_AMBIENT_BIT_PGI
#undef MAT_AMBIENT_BIT_PGI
#endif
#ifdef MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
#undef MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
#endif
#ifdef MAT_DIFFUSE_BIT_PGI
#undef MAT_DIFFUSE_BIT_PGI
#endif
#ifdef MAT_EMISSION_BIT_PGI
#undef MAT_EMISSION_BIT_PGI
#endif
#ifdef MAT_COLOR_INDEXES_BIT_PGI
#undef MAT_COLOR_INDEXES_BIT_PGI
#endif
#ifdef MAT_SHININESS_BIT_PGI
#undef MAT_SHININESS_BIT_PGI
#endif
#ifdef MAT_SPECULAR_BIT_PGI
#undef MAT_SPECULAR_BIT_PGI
#endif
#ifdef NORMAL_BIT_PGI
#undef NORMAL_BIT_PGI
#endif
#ifdef TEXCOORD1_BIT_PGI
#undef TEXCOORD1_BIT_PGI
#endif
#ifdef TEXCOORD2_BIT_PGI
#undef TEXCOORD2_BIT_PGI
#endif
#ifdef TEXCOORD3_BIT_PGI
#undef TEXCOORD3_BIT_PGI
#endif
#ifdef TEXCOORD4_BIT_PGI
#undef TEXCOORD4_BIT_PGI
#endif
#ifdef VERTEX23_BIT_PGI
#undef VERTEX23_BIT_PGI
#endif
#ifdef VERTEX4_BIT_PGI
#undef VERTEX4_BIT_PGI
#endif
#ifdef SCREEN_COORDINATES_REND
#undef SCREEN_COORDINATES_REND
#endif
#ifdef INVERTED_SCREEN_W_REND
#undef INVERTED_SCREEN_W_REND
#endif
#ifdef RGB_S3TC
#undef RGB_S3TC
#endif
#ifdef RGB4_S3TC
#undef RGB4_S3TC
#endif
#ifdef RGBA_S3TC
#undef RGBA_S3TC
#endif
#ifdef RGBA4_S3TC
#undef RGBA4_S3TC
#endif
#ifdef DETAIL_TEXTURE_2D_SGIS
#undef DETAIL_TEXTURE_2D_SGIS
#endif
#ifdef DETAIL_TEXTURE_2D_BINDING_SGIS
#undef DETAIL_TEXTURE_2D_BINDING_SGIS
#endif
#ifdef LINEAR_DETAIL_SGIS
#undef LINEAR_DETAIL_SGIS
#endif
#ifdef LINEAR_DETAIL_ALPHA_SGIS
#undef LINEAR_DETAIL_ALPHA_SGIS
#endif
#ifdef LINEAR_DETAIL_COLOR_SGIS
#undef LINEAR_DETAIL_COLOR_SGIS
#endif
#ifdef DETAIL_TEXTURE_LEVEL_SGIS
#undef DETAIL_TEXTURE_LEVEL_SGIS
#endif
#ifdef DETAIL_TEXTURE_MODE_SGIS
#undef DETAIL_TEXTURE_MODE_SGIS
#endif
#ifdef DETAIL_TEXTURE_FUNC_POINTS_SGIS
#undef DETAIL_TEXTURE_FUNC_POINTS_SGIS
#endif
#ifdef FOG_FUNC_SGIS
#undef FOG_FUNC_SGIS
#endif
#ifdef FOG_FUNC_POINTS_SGIS
#undef FOG_FUNC_POINTS_SGIS
#endif
#ifdef MAX_FOG_FUNC_POINTS_SGIS
#undef MAX_FOG_FUNC_POINTS_SGIS
#endif
#ifdef GENERATE_MIPMAP_SGIS
#undef GENERATE_MIPMAP_SGIS
#endif
#ifdef GENERATE_MIPMAP_HINT_SGIS
#undef GENERATE_MIPMAP_HINT_SGIS
#endif
#ifdef MULTISAMPLE_SGIS
#undef MULTISAMPLE_SGIS
#endif
#ifdef SAMPLE_ALPHA_TO_MASK_SGIS
#undef SAMPLE_ALPHA_TO_MASK_SGIS
#endif
#ifdef SAMPLE_ALPHA_TO_ONE_SGIS
#undef SAMPLE_ALPHA_TO_ONE_SGIS
#endif
#ifdef SAMPLE_MASK_SGIS
#undef SAMPLE_MASK_SGIS
#endif
#ifdef _1PASS_SGIS
#undef _1PASS_SGIS
#endif
#ifdef _2PASS_0_SGIS
#undef _2PASS_0_SGIS
#endif
#ifdef _2PASS_1_SGIS
#undef _2PASS_1_SGIS
#endif
#ifdef _4PASS_0_SGIS
#undef _4PASS_0_SGIS
#endif
#ifdef _4PASS_1_SGIS
#undef _4PASS_1_SGIS
#endif
#ifdef _4PASS_2_SGIS
#undef _4PASS_2_SGIS
#endif
#ifdef _4PASS_3_SGIS
#undef _4PASS_3_SGIS
#endif
#ifdef SAMPLE_BUFFERS_SGIS
#undef SAMPLE_BUFFERS_SGIS
#endif
#ifdef SAMPLES_SGIS
#undef SAMPLES_SGIS
#endif
#ifdef SAMPLE_MASK_VALUE_SGIS
#undef SAMPLE_MASK_VALUE_SGIS
#endif
#ifdef SAMPLE_MASK_INVERT_SGIS
#undef SAMPLE_MASK_INVERT_SGIS
#endif
#ifdef SAMPLE_PATTERN_SGIS
#undef SAMPLE_PATTERN_SGIS
#endif
#ifdef PIXEL_TEXTURE_SGIS
#undef PIXEL_TEXTURE_SGIS
#endif
#ifdef PIXEL_FRAGMENT_RGB_SOURCE_SGIS
#undef PIXEL_FRAGMENT_RGB_SOURCE_SGIS
#endif
#ifdef PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
#undef PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
#endif
#ifdef PIXEL_GROUP_COLOR_SGIS
#undef PIXEL_GROUP_COLOR_SGIS
#endif
#ifdef EYE_DISTANCE_TO_POINT_SGIS
#undef EYE_DISTANCE_TO_POINT_SGIS
#endif
#ifdef OBJECT_DISTANCE_TO_POINT_SGIS
#undef OBJECT_DISTANCE_TO_POINT_SGIS
#endif
#ifdef EYE_DISTANCE_TO_LINE_SGIS
#undef EYE_DISTANCE_TO_LINE_SGIS
#endif
#ifdef OBJECT_DISTANCE_TO_LINE_SGIS
#undef OBJECT_DISTANCE_TO_LINE_SGIS
#endif
#ifdef EYE_POINT_SGIS
#undef EYE_POINT_SGIS
#endif
#ifdef OBJECT_POINT_SGIS
#undef OBJECT_POINT_SGIS
#endif
#ifdef EYE_LINE_SGIS
#undef EYE_LINE_SGIS
#endif
#ifdef OBJECT_LINE_SGIS
#undef OBJECT_LINE_SGIS
#endif
#ifdef POINT_SIZE_MIN_SGIS
#undef POINT_SIZE_MIN_SGIS
#endif
#ifdef POINT_SIZE_MAX_SGIS
#undef POINT_SIZE_MAX_SGIS
#endif
#ifdef POINT_FADE_THRESHOLD_SIZE_SGIS
#undef POINT_FADE_THRESHOLD_SIZE_SGIS
#endif
#ifdef DISTANCE_ATTENUATION_SGIS
#undef DISTANCE_ATTENUATION_SGIS
#endif
#ifdef LINEAR_SHARPEN_SGIS
#undef LINEAR_SHARPEN_SGIS
#endif
#ifdef LINEAR_SHARPEN_ALPHA_SGIS
#undef LINEAR_SHARPEN_ALPHA_SGIS
#endif
#ifdef LINEAR_SHARPEN_COLOR_SGIS
#undef LINEAR_SHARPEN_COLOR_SGIS
#endif
#ifdef SHARPEN_TEXTURE_FUNC_POINTS_SGIS
#undef SHARPEN_TEXTURE_FUNC_POINTS_SGIS
#endif
#ifdef PACK_SKIP_VOLUMES_SGIS
#undef PACK_SKIP_VOLUMES_SGIS
#endif
#ifdef PACK_IMAGE_DEPTH_SGIS
#undef PACK_IMAGE_DEPTH_SGIS
#endif
#ifdef UNPACK_SKIP_VOLUMES_SGIS
#undef UNPACK_SKIP_VOLUMES_SGIS
#endif
#ifdef UNPACK_IMAGE_DEPTH_SGIS
#undef UNPACK_IMAGE_DEPTH_SGIS
#endif
#ifdef TEXTURE_4D_SGIS
#undef TEXTURE_4D_SGIS
#endif
#ifdef PROXY_TEXTURE_4D_SGIS
#undef PROXY_TEXTURE_4D_SGIS
#endif
#ifdef TEXTURE_4DSIZE_SGIS
#undef TEXTURE_4DSIZE_SGIS
#endif
#ifdef TEXTURE_WRAP_Q_SGIS
#undef TEXTURE_WRAP_Q_SGIS
#endif
#ifdef MAX_4D_TEXTURE_SIZE_SGIS
#undef MAX_4D_TEXTURE_SIZE_SGIS
#endif
#ifdef TEXTURE_4D_BINDING_SGIS
#undef TEXTURE_4D_BINDING_SGIS
#endif
#ifdef CLAMP_TO_BORDER_SGIS
#undef CLAMP_TO_BORDER_SGIS
#endif
#ifdef TEXTURE_COLOR_WRITEMASK_SGIS
#undef TEXTURE_COLOR_WRITEMASK_SGIS
#endif
#ifdef CLAMP_TO_EDGE_SGIS
#undef CLAMP_TO_EDGE_SGIS
#endif
#ifdef FILTER4_SGIS
#undef FILTER4_SGIS
#endif
#ifdef TEXTURE_FILTER4_SIZE_SGIS
#undef TEXTURE_FILTER4_SIZE_SGIS
#endif
#ifdef TEXTURE_MIN_LOD_SGIS
#undef TEXTURE_MIN_LOD_SGIS
#endif
#ifdef TEXTURE_MAX_LOD_SGIS
#undef TEXTURE_MAX_LOD_SGIS
#endif
#ifdef TEXTURE_BASE_LEVEL_SGIS
#undef TEXTURE_BASE_LEVEL_SGIS
#endif
#ifdef TEXTURE_MAX_LEVEL_SGIS
#undef TEXTURE_MAX_LEVEL_SGIS
#endif
#ifdef DUAL_ALPHA4_SGIS
#undef DUAL_ALPHA4_SGIS
#endif
#ifdef DUAL_ALPHA8_SGIS
#undef DUAL_ALPHA8_SGIS
#endif
#ifdef DUAL_ALPHA12_SGIS
#undef DUAL_ALPHA12_SGIS
#endif
#ifdef DUAL_ALPHA16_SGIS
#undef DUAL_ALPHA16_SGIS
#endif
#ifdef DUAL_LUMINANCE4_SGIS
#undef DUAL_LUMINANCE4_SGIS
#endif
#ifdef DUAL_LUMINANCE8_SGIS
#undef DUAL_LUMINANCE8_SGIS
#endif
#ifdef DUAL_LUMINANCE12_SGIS
#undef DUAL_LUMINANCE12_SGIS
#endif
#ifdef DUAL_LUMINANCE16_SGIS
#undef DUAL_LUMINANCE16_SGIS
#endif
#ifdef DUAL_INTENSITY4_SGIS
#undef DUAL_INTENSITY4_SGIS
#endif
#ifdef DUAL_INTENSITY8_SGIS
#undef DUAL_INTENSITY8_SGIS
#endif
#ifdef DUAL_INTENSITY12_SGIS
#undef DUAL_INTENSITY12_SGIS
#endif
#ifdef DUAL_INTENSITY16_SGIS
#undef DUAL_INTENSITY16_SGIS
#endif
#ifdef DUAL_LUMINANCE_ALPHA4_SGIS
#undef DUAL_LUMINANCE_ALPHA4_SGIS
#endif
#ifdef DUAL_LUMINANCE_ALPHA8_SGIS
#undef DUAL_LUMINANCE_ALPHA8_SGIS
#endif
#ifdef QUAD_ALPHA4_SGIS
#undef QUAD_ALPHA4_SGIS
#endif
#ifdef QUAD_ALPHA8_SGIS
#undef QUAD_ALPHA8_SGIS
#endif
#ifdef QUAD_LUMINANCE4_SGIS
#undef QUAD_LUMINANCE4_SGIS
#endif
#ifdef QUAD_LUMINANCE8_SGIS
#undef QUAD_LUMINANCE8_SGIS
#endif
#ifdef QUAD_INTENSITY4_SGIS
#undef QUAD_INTENSITY4_SGIS
#endif
#ifdef QUAD_INTENSITY8_SGIS
#undef QUAD_INTENSITY8_SGIS
#endif
#ifdef DUAL_TEXTURE_SELECT_SGIS
#undef DUAL_TEXTURE_SELECT_SGIS
#endif
#ifdef QUAD_TEXTURE_SELECT_SGIS
#undef QUAD_TEXTURE_SELECT_SGIS
#endif
#ifdef ASYNC_MARKER_SGIX
#undef ASYNC_MARKER_SGIX
#endif
#ifdef ASYNC_HISTOGRAM_SGIX
#undef ASYNC_HISTOGRAM_SGIX
#endif
#ifdef MAX_ASYNC_HISTOGRAM_SGIX
#undef MAX_ASYNC_HISTOGRAM_SGIX
#endif
#ifdef ASYNC_TEX_IMAGE_SGIX
#undef ASYNC_TEX_IMAGE_SGIX
#endif
#ifdef ASYNC_DRAW_PIXELS_SGIX
#undef ASYNC_DRAW_PIXELS_SGIX
#endif
#ifdef ASYNC_READ_PIXELS_SGIX
#undef ASYNC_READ_PIXELS_SGIX
#endif
#ifdef MAX_ASYNC_TEX_IMAGE_SGIX
#undef MAX_ASYNC_TEX_IMAGE_SGIX
#endif
#ifdef MAX_ASYNC_DRAW_PIXELS_SGIX
#undef MAX_ASYNC_DRAW_PIXELS_SGIX
#endif
#ifdef MAX_ASYNC_READ_PIXELS_SGIX
#undef MAX_ASYNC_READ_PIXELS_SGIX
#endif
#ifdef ALPHA_MIN_SGIX
#undef ALPHA_MIN_SGIX
#endif
#ifdef ALPHA_MAX_SGIX
#undef ALPHA_MAX_SGIX
#endif
#ifdef CALLIGRAPHIC_FRAGMENT_SGIX
#undef CALLIGRAPHIC_FRAGMENT_SGIX
#endif
#ifdef LINEAR_CLIPMAP_LINEAR_SGIX
#undef LINEAR_CLIPMAP_LINEAR_SGIX
#endif
#ifdef TEXTURE_CLIPMAP_CENTER_SGIX
#undef TEXTURE_CLIPMAP_CENTER_SGIX
#endif
#ifdef TEXTURE_CLIPMAP_FRAME_SGIX
#undef TEXTURE_CLIPMAP_FRAME_SGIX
#endif
#ifdef TEXTURE_CLIPMAP_OFFSET_SGIX
#undef TEXTURE_CLIPMAP_OFFSET_SGIX
#endif
#ifdef TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
#undef TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
#endif
#ifdef TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
#undef TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
#endif
#ifdef TEXTURE_CLIPMAP_DEPTH_SGIX
#undef TEXTURE_CLIPMAP_DEPTH_SGIX
#endif
#ifdef MAX_CLIPMAP_DEPTH_SGIX
#undef MAX_CLIPMAP_DEPTH_SGIX
#endif
#ifdef MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
#undef MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
#endif
#ifdef NEAREST_CLIPMAP_NEAREST_SGIX
#undef NEAREST_CLIPMAP_NEAREST_SGIX
#endif
#ifdef NEAREST_CLIPMAP_LINEAR_SGIX
#undef NEAREST_CLIPMAP_LINEAR_SGIX
#endif
#ifdef LINEAR_CLIPMAP_NEAREST_SGIX
#undef LINEAR_CLIPMAP_NEAREST_SGIX
#endif
#ifdef CONVOLUTION_HINT_SGIX
#undef CONVOLUTION_HINT_SGIX
#endif
#ifdef DEPTH_COMPONENT16_SGIX
#undef DEPTH_COMPONENT16_SGIX
#endif
#ifdef DEPTH_COMPONENT24_SGIX
#undef DEPTH_COMPONENT24_SGIX
#endif
#ifdef DEPTH_COMPONENT32_SGIX
#undef DEPTH_COMPONENT32_SGIX
#endif
#ifdef FOG_OFFSET_SGIX
#undef FOG_OFFSET_SGIX
#endif
#ifdef FOG_OFFSET_VALUE_SGIX
#undef FOG_OFFSET_VALUE_SGIX
#endif
#ifdef FOG_SCALE_SGIX
#undef FOG_SCALE_SGIX
#endif
#ifdef FOG_SCALE_VALUE_SGIX
#undef FOG_SCALE_VALUE_SGIX
#endif
#ifdef FRAGMENT_LIGHTING_SGIX
#undef FRAGMENT_LIGHTING_SGIX
#endif
#ifdef FRAGMENT_COLOR_MATERIAL_SGIX
#undef FRAGMENT_COLOR_MATERIAL_SGIX
#endif
#ifdef FRAGMENT_COLOR_MATERIAL_FACE_SGIX
#undef FRAGMENT_COLOR_MATERIAL_FACE_SGIX
#endif
#ifdef FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
#undef FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
#endif
#ifdef MAX_FRAGMENT_LIGHTS_SGIX
#undef MAX_FRAGMENT_LIGHTS_SGIX
#endif
#ifdef MAX_ACTIVE_LIGHTS_SGIX
#undef MAX_ACTIVE_LIGHTS_SGIX
#endif
#ifdef CURRENT_RASTER_NORMAL_SGIX
#undef CURRENT_RASTER_NORMAL_SGIX
#endif
#ifdef LIGHT_ENV_MODE_SGIX
#undef LIGHT_ENV_MODE_SGIX
#endif
#ifdef FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
#undef FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
#endif
#ifdef FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
#undef FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
#endif
#ifdef FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
#undef FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
#endif
#ifdef FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
#undef FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
#endif
#ifdef FRAGMENT_LIGHT0_SGIX
#undef FRAGMENT_LIGHT0_SGIX
#endif
#ifdef FRAGMENT_LIGHT1_SGIX
#undef FRAGMENT_LIGHT1_SGIX
#endif
#ifdef FRAGMENT_LIGHT2_SGIX
#undef FRAGMENT_LIGHT2_SGIX
#endif
#ifdef FRAGMENT_LIGHT3_SGIX
#undef FRAGMENT_LIGHT3_SGIX
#endif
#ifdef FRAGMENT_LIGHT4_SGIX
#undef FRAGMENT_LIGHT4_SGIX
#endif
#ifdef FRAGMENT_LIGHT5_SGIX
#undef FRAGMENT_LIGHT5_SGIX
#endif
#ifdef FRAGMENT_LIGHT6_SGIX
#undef FRAGMENT_LIGHT6_SGIX
#endif
#ifdef FRAGMENT_LIGHT7_SGIX
#undef FRAGMENT_LIGHT7_SGIX
#endif
#ifdef FRAMEZOOM_SGIX
#undef FRAMEZOOM_SGIX
#endif
#ifdef FRAMEZOOM_FACTOR_SGIX
#undef FRAMEZOOM_FACTOR_SGIX
#endif
#ifdef MAX_FRAMEZOOM_FACTOR_SGIX
#undef MAX_FRAMEZOOM_FACTOR_SGIX
#endif
#ifdef PIXEL_TEX_GEN_Q_CEILING_SGIX
#undef PIXEL_TEX_GEN_Q_CEILING_SGIX
#endif
#ifdef PIXEL_TEX_GEN_Q_ROUND_SGIX
#undef PIXEL_TEX_GEN_Q_ROUND_SGIX
#endif
#ifdef PIXEL_TEX_GEN_Q_FLOOR_SGIX
#undef PIXEL_TEX_GEN_Q_FLOOR_SGIX
#endif
#ifdef PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
#undef PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
#endif
#ifdef PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
#undef PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
#endif
#ifdef PIXEL_TEX_GEN_ALPHA_LS_SGIX
#undef PIXEL_TEX_GEN_ALPHA_LS_SGIX
#endif
#ifdef PIXEL_TEX_GEN_ALPHA_MS_SGIX
#undef PIXEL_TEX_GEN_ALPHA_MS_SGIX
#endif
#ifdef INSTRUMENT_BUFFER_POINTER_SGIX
#undef INSTRUMENT_BUFFER_POINTER_SGIX
#endif
#ifdef INSTRUMENT_MEASUREMENTS_SGIX
#undef INSTRUMENT_MEASUREMENTS_SGIX
#endif
#ifdef INTERLACE_SGIX
#undef INTERLACE_SGIX
#endif
#ifdef IR_INSTRUMENT1_SGIX
#undef IR_INSTRUMENT1_SGIX
#endif
#ifdef LIST_PRIORITY_SGIX
#undef LIST_PRIORITY_SGIX
#endif
#ifdef PIXEL_TEX_GEN_SGIX
#undef PIXEL_TEX_GEN_SGIX
#endif
#ifdef PIXEL_TEX_GEN_MODE_SGIX
#undef PIXEL_TEX_GEN_MODE_SGIX
#endif
#ifdef PIXEL_TILE_BEST_ALIGNMENT_SGIX
#undef PIXEL_TILE_BEST_ALIGNMENT_SGIX
#endif
#ifdef PIXEL_TILE_CACHE_INCREMENT_SGIX
#undef PIXEL_TILE_CACHE_INCREMENT_SGIX
#endif
#ifdef PIXEL_TILE_WIDTH_SGIX
#undef PIXEL_TILE_WIDTH_SGIX
#endif
#ifdef PIXEL_TILE_HEIGHT_SGIX
#undef PIXEL_TILE_HEIGHT_SGIX
#endif
#ifdef PIXEL_TILE_GRID_WIDTH_SGIX
#undef PIXEL_TILE_GRID_WIDTH_SGIX
#endif
#ifdef PIXEL_TILE_GRID_HEIGHT_SGIX
#undef PIXEL_TILE_GRID_HEIGHT_SGIX
#endif
#ifdef PIXEL_TILE_GRID_DEPTH_SGIX
#undef PIXEL_TILE_GRID_DEPTH_SGIX
#endif
#ifdef PIXEL_TILE_CACHE_SIZE_SGIX
#undef PIXEL_TILE_CACHE_SIZE_SGIX
#endif
#ifdef GEOMETRY_DEFORMATION_SGIX
#undef GEOMETRY_DEFORMATION_SGIX
#endif
#ifdef TEXTURE_DEFORMATION_SGIX
#undef TEXTURE_DEFORMATION_SGIX
#endif
#ifdef DEFORMATIONS_MASK_SGIX
#undef DEFORMATIONS_MASK_SGIX
#endif
#ifdef MAX_DEFORMATION_ORDER_SGIX
#undef MAX_DEFORMATION_ORDER_SGIX
#endif
#ifdef REFERENCE_PLANE_SGIX
#undef REFERENCE_PLANE_SGIX
#endif
#ifdef REFERENCE_PLANE_EQUATION_SGIX
#undef REFERENCE_PLANE_EQUATION_SGIX
#endif
#ifdef PACK_RESAMPLE_SGIX
#undef PACK_RESAMPLE_SGIX
#endif
#ifdef UNPACK_RESAMPLE_SGIX
#undef UNPACK_RESAMPLE_SGIX
#endif
#ifdef RESAMPLE_REPLICATE_SGIX
#undef RESAMPLE_REPLICATE_SGIX
#endif
#ifdef RESAMPLE_ZERO_FILL_SGIX
#undef RESAMPLE_ZERO_FILL_SGIX
#endif
#ifdef RESAMPLE_DECIMATE_SGIX
#undef RESAMPLE_DECIMATE_SGIX
#endif
#ifdef SCALEBIAS_HINT_SGIX
#undef SCALEBIAS_HINT_SGIX
#endif
#ifdef TEXTURE_COMPARE_SGIX
#undef TEXTURE_COMPARE_SGIX
#endif
#ifdef TEXTURE_COMPARE_OPERATOR_SGIX
#undef TEXTURE_COMPARE_OPERATOR_SGIX
#endif
#ifdef TEXTURE_LEQUAL_R_SGIX
#undef TEXTURE_LEQUAL_R_SGIX
#endif
#ifdef TEXTURE_GEQUAL_R_SGIX
#undef TEXTURE_GEQUAL_R_SGIX
#endif
#ifdef SHADOW_AMBIENT_SGIX
#undef SHADOW_AMBIENT_SGIX
#endif
#ifdef SPRITE_SGIX
#undef SPRITE_SGIX
#endif
#ifdef SPRITE_MODE_SGIX
#undef SPRITE_MODE_SGIX
#endif
#ifdef SPRITE_AXIS_SGIX
#undef SPRITE_AXIS_SGIX
#endif
#ifdef SPRITE_TRANSLATION_SGIX
#undef SPRITE_TRANSLATION_SGIX
#endif
#ifdef SPRITE_AXIAL_SGIX
#undef SPRITE_AXIAL_SGIX
#endif
#ifdef SPRITE_OBJECT_ALIGNED_SGIX
#undef SPRITE_OBJECT_ALIGNED_SGIX
#endif
#ifdef SPRITE_EYE_ALIGNED_SGIX
#undef SPRITE_EYE_ALIGNED_SGIX
#endif
#ifdef PACK_SUBSAMPLE_RATE_SGIX
#undef PACK_SUBSAMPLE_RATE_SGIX
#endif
#ifdef UNPACK_SUBSAMPLE_RATE_SGIX
#undef UNPACK_SUBSAMPLE_RATE_SGIX
#endif
#ifdef PIXEL_SUBSAMPLE_4444_SGIX
#undef PIXEL_SUBSAMPLE_4444_SGIX
#endif
#ifdef PIXEL_SUBSAMPLE_2424_SGIX
#undef PIXEL_SUBSAMPLE_2424_SGIX
#endif
#ifdef PIXEL_SUBSAMPLE_4242_SGIX
#undef PIXEL_SUBSAMPLE_4242_SGIX
#endif
#ifdef TEXTURE_ENV_BIAS_SGIX
#undef TEXTURE_ENV_BIAS_SGIX
#endif
#ifdef TEXTURE_MAX_CLAMP_S_SGIX
#undef TEXTURE_MAX_CLAMP_S_SGIX
#endif
#ifdef TEXTURE_MAX_CLAMP_T_SGIX
#undef TEXTURE_MAX_CLAMP_T_SGIX
#endif
#ifdef TEXTURE_MAX_CLAMP_R_SGIX
#undef TEXTURE_MAX_CLAMP_R_SGIX
#endif
#ifdef TEXTURE_LOD_BIAS_S_SGIX
#undef TEXTURE_LOD_BIAS_S_SGIX
#endif
#ifdef TEXTURE_LOD_BIAS_T_SGIX
#undef TEXTURE_LOD_BIAS_T_SGIX
#endif
#ifdef TEXTURE_LOD_BIAS_R_SGIX
#undef TEXTURE_LOD_BIAS_R_SGIX
#endif
#ifdef TEXTURE_MULTI_BUFFER_HINT_SGIX
#undef TEXTURE_MULTI_BUFFER_HINT_SGIX
#endif
#ifdef POST_TEXTURE_FILTER_BIAS_SGIX
#undef POST_TEXTURE_FILTER_BIAS_SGIX
#endif
#ifdef POST_TEXTURE_FILTER_SCALE_SGIX
#undef POST_TEXTURE_FILTER_SCALE_SGIX
#endif
#ifdef POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
#undef POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
#endif
#ifdef POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
#undef POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
#endif
#ifdef VERTEX_PRECLIP_SGIX
#undef VERTEX_PRECLIP_SGIX
#endif
#ifdef VERTEX_PRECLIP_HINT_SGIX
#undef VERTEX_PRECLIP_HINT_SGIX
#endif
#ifdef YCRCB_422_SGIX
#undef YCRCB_422_SGIX
#endif
#ifdef YCRCB_444_SGIX
#undef YCRCB_444_SGIX
#endif
#ifdef YCRCB_SGIX
#undef YCRCB_SGIX
#endif
#ifdef YCRCBA_SGIX
#undef YCRCBA_SGIX
#endif
#ifdef COLOR_MATRIX_SGI
#undef COLOR_MATRIX_SGI
#endif
#ifdef COLOR_MATRIX_STACK_DEPTH_SGI
#undef COLOR_MATRIX_STACK_DEPTH_SGI
#endif
#ifdef MAX_COLOR_MATRIX_STACK_DEPTH_SGI
#undef MAX_COLOR_MATRIX_STACK_DEPTH_SGI
#endif
#ifdef POST_COLOR_MATRIX_RED_SCALE_SGI
#undef POST_COLOR_MATRIX_RED_SCALE_SGI
#endif
#ifdef POST_COLOR_MATRIX_GREEN_SCALE_SGI
#undef POST_COLOR_MATRIX_GREEN_SCALE_SGI
#endif
#ifdef POST_COLOR_MATRIX_BLUE_SCALE_SGI
#undef POST_COLOR_MATRIX_BLUE_SCALE_SGI
#endif
#ifdef POST_COLOR_MATRIX_ALPHA_SCALE_SGI
#undef POST_COLOR_MATRIX_ALPHA_SCALE_SGI
#endif
#ifdef POST_COLOR_MATRIX_RED_BIAS_SGI
#undef POST_COLOR_MATRIX_RED_BIAS_SGI
#endif
#ifdef POST_COLOR_MATRIX_GREEN_BIAS_SGI
#undef POST_COLOR_MATRIX_GREEN_BIAS_SGI
#endif
#ifdef POST_COLOR_MATRIX_BLUE_BIAS_SGI
#undef POST_COLOR_MATRIX_BLUE_BIAS_SGI
#endif
#ifdef POST_COLOR_MATRIX_ALPHA_BIAS_SGI
#undef POST_COLOR_MATRIX_ALPHA_BIAS_SGI
#endif
#ifdef COLOR_TABLE_SGI
#undef COLOR_TABLE_SGI
#endif
#ifdef POST_CONVOLUTION_COLOR_TABLE_SGI
#undef POST_CONVOLUTION_COLOR_TABLE_SGI
#endif
#ifdef POST_COLOR_MATRIX_COLOR_TABLE_SGI
#undef POST_COLOR_MATRIX_COLOR_TABLE_SGI
#endif
#ifdef PROXY_COLOR_TABLE_SGI
#undef PROXY_COLOR_TABLE_SGI
#endif
#ifdef PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
#undef PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
#endif
#ifdef PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#undef PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
#endif
#ifdef COLOR_TABLE_SCALE_SGI
#undef COLOR_TABLE_SCALE_SGI
#endif
#ifdef COLOR_TABLE_BIAS_SGI
#undef COLOR_TABLE_BIAS_SGI
#endif
#ifdef COLOR_TABLE_FORMAT_SGI
#undef COLOR_TABLE_FORMAT_SGI
#endif
#ifdef COLOR_TABLE_WIDTH_SGI
#undef COLOR_TABLE_WIDTH_SGI
#endif
#ifdef COLOR_TABLE_RED_SIZE_SGI
#undef COLOR_TABLE_RED_SIZE_SGI
#endif
#ifdef COLOR_TABLE_GREEN_SIZE_SGI
#undef COLOR_TABLE_GREEN_SIZE_SGI
#endif
#ifdef COLOR_TABLE_BLUE_SIZE_SGI
#undef COLOR_TABLE_BLUE_SIZE_SGI
#endif
#ifdef COLOR_TABLE_ALPHA_SIZE_SGI
#undef COLOR_TABLE_ALPHA_SIZE_SGI
#endif
#ifdef COLOR_TABLE_LUMINANCE_SIZE_SGI
#undef COLOR_TABLE_LUMINANCE_SIZE_SGI
#endif
#ifdef COLOR_TABLE_INTENSITY_SIZE_SGI
#undef COLOR_TABLE_INTENSITY_SIZE_SGI
#endif
#ifdef DEPTH_PASS_INSTRUMENT_SGIX
#undef DEPTH_PASS_INSTRUMENT_SGIX
#endif
#ifdef DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
#undef DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
#endif
#ifdef DEPTH_PASS_INSTRUMENT_MAX_SGIX
#undef DEPTH_PASS_INSTRUMENT_MAX_SGIX
#endif
#ifdef TEXTURE_COLOR_TABLE_SGI
#undef TEXTURE_COLOR_TABLE_SGI
#endif
#ifdef PROXY_TEXTURE_COLOR_TABLE_SGI
#undef PROXY_TEXTURE_COLOR_TABLE_SGI
#endif
#ifdef UNPACK_CONSTANT_DATA_SUNX
#undef UNPACK_CONSTANT_DATA_SUNX
#endif
#ifdef TEXTURE_CONSTANT_DATA_SUNX
#undef TEXTURE_CONSTANT_DATA_SUNX
#endif
#ifdef WRAP_BORDER_SUN
#undef WRAP_BORDER_SUN
#endif
#ifdef GLOBAL_ALPHA_SUN
#undef GLOBAL_ALPHA_SUN
#endif
#ifdef GLOBAL_ALPHA_FACTOR_SUN
#undef GLOBAL_ALPHA_FACTOR_SUN
#endif
#ifdef QUAD_MESH_SUN
#undef QUAD_MESH_SUN
#endif
#ifdef TRIANGLE_MESH_SUN
#undef TRIANGLE_MESH_SUN
#endif
#ifdef SLICE_ACCUM_SUN
#undef SLICE_ACCUM_SUN
#endif
#ifdef RESTART_SUN
#undef RESTART_SUN
#endif
#ifdef REPLACE_MIDDLE_SUN
#undef REPLACE_MIDDLE_SUN
#endif
#ifdef REPLACE_OLDEST_SUN
#undef REPLACE_OLDEST_SUN
#endif
#ifdef TRIANGLE_LIST_SUN
#undef TRIANGLE_LIST_SUN
#endif
#ifdef REPLACEMENT_CODE_SUN
#undef REPLACEMENT_CODE_SUN
#endif
#ifdef REPLACEMENT_CODE_ARRAY_SUN
#undef REPLACEMENT_CODE_ARRAY_SUN
#endif
#ifdef REPLACEMENT_CODE_ARRAY_TYPE_SUN
#undef REPLACEMENT_CODE_ARRAY_TYPE_SUN
#endif
#ifdef REPLACEMENT_CODE_ARRAY_STRIDE_SUN
#undef REPLACEMENT_CODE_ARRAY_STRIDE_SUN
#endif
#ifdef REPLACEMENT_CODE_ARRAY_POINTER_SUN
#undef REPLACEMENT_CODE_ARRAY_POINTER_SUN
#endif
#ifdef R1UI_V3F_SUN
#undef R1UI_V3F_SUN
#endif
#ifdef R1UI_C4UB_V3F_SUN
#undef R1UI_C4UB_V3F_SUN
#endif
#ifdef R1UI_C3F_V3F_SUN
#undef R1UI_C3F_V3F_SUN
#endif
#ifdef R1UI_N3F_V3F_SUN
#undef R1UI_N3F_V3F_SUN
#endif
#ifdef R1UI_C4F_N3F_V3F_SUN
#undef R1UI_C4F_N3F_V3F_SUN
#endif
#ifdef R1UI_T2F_V3F_SUN
#undef R1UI_T2F_V3F_SUN
#endif
#ifdef R1UI_T2F_N3F_V3F_SUN
#undef R1UI_T2F_N3F_V3F_SUN
#endif
#ifdef R1UI_T2F_C4F_N3F_V3F_SUN
#undef R1UI_T2F_C4F_N3F_V3F_SUN
#endif
#ifdef UNSIGNED_BYTE_3_3_2
#undef UNSIGNED_BYTE_3_3_2
#endif
#ifdef UNSIGNED_SHORT_4_4_4_4
#undef UNSIGNED_SHORT_4_4_4_4
#endif
#ifdef UNSIGNED_SHORT_5_5_5_1
#undef UNSIGNED_SHORT_5_5_5_1
#endif
#ifdef UNSIGNED_INT_8_8_8_8
#undef UNSIGNED_INT_8_8_8_8
#endif
#ifdef UNSIGNED_INT_10_10_10_2
#undef UNSIGNED_INT_10_10_10_2
#endif
#ifdef RESCALE_NORMAL
#undef RESCALE_NORMAL
#endif
#ifdef TEXTURE_BINDING_3D
#undef TEXTURE_BINDING_3D
#endif
#ifdef PACK_SKIP_IMAGES
#undef PACK_SKIP_IMAGES
#endif
#ifdef PACK_IMAGE_HEIGHT
#undef PACK_IMAGE_HEIGHT
#endif
#ifdef UNPACK_SKIP_IMAGES
#undef UNPACK_SKIP_IMAGES
#endif
#ifdef UNPACK_IMAGE_HEIGHT
#undef UNPACK_IMAGE_HEIGHT
#endif
#ifdef TEXTURE_3D
#undef TEXTURE_3D
#endif
#ifdef PROXY_TEXTURE_3D
#undef PROXY_TEXTURE_3D
#endif
#ifdef TEXTURE_DEPTH
#undef TEXTURE_DEPTH
#endif
#ifdef TEXTURE_WRAP_R
#undef TEXTURE_WRAP_R
#endif
#ifdef MAX_3D_TEXTURE_SIZE
#undef MAX_3D_TEXTURE_SIZE
#endif
#ifdef UNSIGNED_BYTE_2_3_3_REV
#undef UNSIGNED_BYTE_2_3_3_REV
#endif
#ifdef UNSIGNED_SHORT_5_6_5
#undef UNSIGNED_SHORT_5_6_5
#endif
#ifdef UNSIGNED_SHORT_5_6_5_REV
#undef UNSIGNED_SHORT_5_6_5_REV
#endif
#ifdef UNSIGNED_SHORT_4_4_4_4_REV
#undef UNSIGNED_SHORT_4_4_4_4_REV
#endif
#ifdef UNSIGNED_SHORT_1_5_5_5_REV
#undef UNSIGNED_SHORT_1_5_5_5_REV
#endif
#ifdef UNSIGNED_INT_8_8_8_8_REV
#undef UNSIGNED_INT_8_8_8_8_REV
#endif
#ifdef UNSIGNED_INT_2_10_10_10_REV
#undef UNSIGNED_INT_2_10_10_10_REV
#endif
#ifdef BGR
#undef BGR
#endif
#ifdef BGRA
#undef BGRA
#endif
#ifdef MAX_ELEMENTS_VERTICES
#undef MAX_ELEMENTS_VERTICES
#endif
#ifdef MAX_ELEMENTS_INDICES
#undef MAX_ELEMENTS_INDICES
#endif
#ifdef CLAMP_TO_EDGE
#undef CLAMP_TO_EDGE
#endif
#ifdef TEXTURE_MIN_LOD
#undef TEXTURE_MIN_LOD
#endif
#ifdef TEXTURE_MAX_LOD
#undef TEXTURE_MAX_LOD
#endif
#ifdef TEXTURE_BASE_LEVEL
#undef TEXTURE_BASE_LEVEL
#endif
#ifdef TEXTURE_MAX_LEVEL
#undef TEXTURE_MAX_LEVEL
#endif
#ifdef LIGHT_MODEL_COLOR_CONTROL
#undef LIGHT_MODEL_COLOR_CONTROL
#endif
#ifdef SINGLE_COLOR
#undef SINGLE_COLOR
#endif
#ifdef SEPARATE_SPECULAR_COLOR
#undef SEPARATE_SPECULAR_COLOR
#endif
#ifdef SMOOTH_POINT_SIZE_RANGE
#undef SMOOTH_POINT_SIZE_RANGE
#endif
#ifdef SMOOTH_POINT_SIZE_GRANULARITY
#undef SMOOTH_POINT_SIZE_GRANULARITY
#endif
#ifdef SMOOTH_LINE_WIDTH_RANGE
#undef SMOOTH_LINE_WIDTH_RANGE
#endif
#ifdef SMOOTH_LINE_WIDTH_GRANULARITY
#undef SMOOTH_LINE_WIDTH_GRANULARITY
#endif
#ifdef ALIASED_POINT_SIZE_RANGE
#undef ALIASED_POINT_SIZE_RANGE
#endif
#ifdef ALIASED_LINE_WIDTH_RANGE
#undef ALIASED_LINE_WIDTH_RANGE
#endif
#ifdef TEXTURE0
#undef TEXTURE0
#endif
#ifdef TEXTURE1
#undef TEXTURE1
#endif
#ifdef TEXTURE2
#undef TEXTURE2
#endif
#ifdef TEXTURE3
#undef TEXTURE3
#endif
#ifdef TEXTURE4
#undef TEXTURE4
#endif
#ifdef TEXTURE5
#undef TEXTURE5
#endif
#ifdef TEXTURE6
#undef TEXTURE6
#endif
#ifdef TEXTURE7
#undef TEXTURE7
#endif
#ifdef TEXTURE8
#undef TEXTURE8
#endif
#ifdef TEXTURE9
#undef TEXTURE9
#endif
#ifdef TEXTURE10
#undef TEXTURE10
#endif
#ifdef TEXTURE11
#undef TEXTURE11
#endif
#ifdef TEXTURE12
#undef TEXTURE12
#endif
#ifdef TEXTURE13
#undef TEXTURE13
#endif
#ifdef TEXTURE14
#undef TEXTURE14
#endif
#ifdef TEXTURE15
#undef TEXTURE15
#endif
#ifdef TEXTURE16
#undef TEXTURE16
#endif
#ifdef TEXTURE17
#undef TEXTURE17
#endif
#ifdef TEXTURE18
#undef TEXTURE18
#endif
#ifdef TEXTURE19
#undef TEXTURE19
#endif
#ifdef TEXTURE20
#undef TEXTURE20
#endif
#ifdef TEXTURE21
#undef TEXTURE21
#endif
#ifdef TEXTURE22
#undef TEXTURE22
#endif
#ifdef TEXTURE23
#undef TEXTURE23
#endif
#ifdef TEXTURE24
#undef TEXTURE24
#endif
#ifdef TEXTURE25
#undef TEXTURE25
#endif
#ifdef TEXTURE26
#undef TEXTURE26
#endif
#ifdef TEXTURE27
#undef TEXTURE27
#endif
#ifdef TEXTURE28
#undef TEXTURE28
#endif
#ifdef TEXTURE29
#undef TEXTURE29
#endif
#ifdef TEXTURE30
#undef TEXTURE30
#endif
#ifdef TEXTURE31
#undef TEXTURE31
#endif
#ifdef ACTIVE_TEXTURE
#undef ACTIVE_TEXTURE
#endif
#ifdef CLIENT_ACTIVE_TEXTURE
#undef CLIENT_ACTIVE_TEXTURE
#endif
#ifdef MAX_TEXTURE_UNITS
#undef MAX_TEXTURE_UNITS
#endif
#ifdef TRANSPOSE_MODELVIEW_MATRIX
#undef TRANSPOSE_MODELVIEW_MATRIX
#endif
#ifdef TRANSPOSE_PROJECTION_MATRIX
#undef TRANSPOSE_PROJECTION_MATRIX
#endif
#ifdef TRANSPOSE_TEXTURE_MATRIX
#undef TRANSPOSE_TEXTURE_MATRIX
#endif
#ifdef TRANSPOSE_COLOR_MATRIX
#undef TRANSPOSE_COLOR_MATRIX
#endif
#ifdef MULTISAMPLE
#undef MULTISAMPLE
#endif
#ifdef SAMPLE_ALPHA_TO_COVERAGE
#undef SAMPLE_ALPHA_TO_COVERAGE
#endif
#ifdef SAMPLE_ALPHA_TO_ONE
#undef SAMPLE_ALPHA_TO_ONE
#endif
#ifdef SAMPLE_COVERAGE
#undef SAMPLE_COVERAGE
#endif
#ifdef SAMPLE_BUFFERS
#undef SAMPLE_BUFFERS
#endif
#ifdef SAMPLES
#undef SAMPLES
#endif
#ifdef SAMPLE_COVERAGE_VALUE
#undef SAMPLE_COVERAGE_VALUE
#endif
#ifdef SAMPLE_COVERAGE_INVERT
#undef SAMPLE_COVERAGE_INVERT
#endif
#ifdef MULTISAMPLE_BIT
#undef MULTISAMPLE_BIT
#endif
#ifdef NORMAL_MAP
#undef NORMAL_MAP
#endif
#ifdef REFLECTION_MAP
#undef REFLECTION_MAP
#endif
#ifdef TEXTURE_CUBE_MAP
#undef TEXTURE_CUBE_MAP
#endif
#ifdef TEXTURE_BINDING_CUBE_MAP
#undef TEXTURE_BINDING_CUBE_MAP
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_X
#undef TEXTURE_CUBE_MAP_POSITIVE_X
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_X
#undef TEXTURE_CUBE_MAP_NEGATIVE_X
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Y
#undef TEXTURE_CUBE_MAP_POSITIVE_Y
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Y
#undef TEXTURE_CUBE_MAP_NEGATIVE_Y
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Z
#undef TEXTURE_CUBE_MAP_POSITIVE_Z
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Z
#undef TEXTURE_CUBE_MAP_NEGATIVE_Z
#endif
#ifdef PROXY_TEXTURE_CUBE_MAP
#undef PROXY_TEXTURE_CUBE_MAP
#endif
#ifdef MAX_CUBE_MAP_TEXTURE_SIZE
#undef MAX_CUBE_MAP_TEXTURE_SIZE
#endif
#ifdef COMPRESSED_ALPHA
#undef COMPRESSED_ALPHA
#endif
#ifdef COMPRESSED_LUMINANCE
#undef COMPRESSED_LUMINANCE
#endif
#ifdef COMPRESSED_LUMINANCE_ALPHA
#undef COMPRESSED_LUMINANCE_ALPHA
#endif
#ifdef COMPRESSED_INTENSITY
#undef COMPRESSED_INTENSITY
#endif
#ifdef COMPRESSED_RGB
#undef COMPRESSED_RGB
#endif
#ifdef COMPRESSED_RGBA
#undef COMPRESSED_RGBA
#endif
#ifdef TEXTURE_COMPRESSION_HINT
#undef TEXTURE_COMPRESSION_HINT
#endif
#ifdef TEXTURE_COMPRESSED_IMAGE_SIZE
#undef TEXTURE_COMPRESSED_IMAGE_SIZE
#endif
#ifdef TEXTURE_COMPRESSED
#undef TEXTURE_COMPRESSED
#endif
#ifdef NUM_COMPRESSED_TEXTURE_FORMATS
#undef NUM_COMPRESSED_TEXTURE_FORMATS
#endif
#ifdef COMPRESSED_TEXTURE_FORMATS
#undef COMPRESSED_TEXTURE_FORMATS
#endif
#ifdef CLAMP_TO_BORDER
#undef CLAMP_TO_BORDER
#endif
#ifdef COMBINE
#undef COMBINE
#endif
#ifdef COMBINE_RGB
#undef COMBINE_RGB
#endif
#ifdef COMBINE_ALPHA
#undef COMBINE_ALPHA
#endif
#ifdef SOURCE0_RGB
#undef SOURCE0_RGB
#endif
#ifdef SOURCE1_RGB
#undef SOURCE1_RGB
#endif
#ifdef SOURCE2_RGB
#undef SOURCE2_RGB
#endif
#ifdef SOURCE0_ALPHA
#undef SOURCE0_ALPHA
#endif
#ifdef SOURCE1_ALPHA
#undef SOURCE1_ALPHA
#endif
#ifdef SOURCE2_ALPHA
#undef SOURCE2_ALPHA
#endif
#ifdef OPERAND0_RGB
#undef OPERAND0_RGB
#endif
#ifdef OPERAND1_RGB
#undef OPERAND1_RGB
#endif
#ifdef OPERAND2_RGB
#undef OPERAND2_RGB
#endif
#ifdef OPERAND0_ALPHA
#undef OPERAND0_ALPHA
#endif
#ifdef OPERAND1_ALPHA
#undef OPERAND1_ALPHA
#endif
#ifdef OPERAND2_ALPHA
#undef OPERAND2_ALPHA
#endif
#ifdef RGB_SCALE
#undef RGB_SCALE
#endif
#ifdef ADD_SIGNED
#undef ADD_SIGNED
#endif
#ifdef INTERPOLATE
#undef INTERPOLATE
#endif
#ifdef SUBTRACT
#undef SUBTRACT
#endif
#ifdef CONSTANT
#undef CONSTANT
#endif
#ifdef PRIMARY_COLOR
#undef PRIMARY_COLOR
#endif
#ifdef PREVIOUS
#undef PREVIOUS
#endif
#ifdef DOT3_RGB
#undef DOT3_RGB
#endif
#ifdef DOT3_RGBA
#undef DOT3_RGBA
#endif
#ifdef BLEND_DST_RGB
#undef BLEND_DST_RGB
#endif
#ifdef BLEND_SRC_RGB
#undef BLEND_SRC_RGB
#endif
#ifdef BLEND_DST_ALPHA
#undef BLEND_DST_ALPHA
#endif
#ifdef BLEND_SRC_ALPHA
#undef BLEND_SRC_ALPHA
#endif
#ifdef POINT_SIZE_MIN
#undef POINT_SIZE_MIN
#endif
#ifdef POINT_SIZE_MAX
#undef POINT_SIZE_MAX
#endif
#ifdef POINT_FADE_THRESHOLD_SIZE
#undef POINT_FADE_THRESHOLD_SIZE
#endif
#ifdef POINT_DISTANCE_ATTENUATION
#undef POINT_DISTANCE_ATTENUATION
#endif
#ifdef GENERATE_MIPMAP
#undef GENERATE_MIPMAP
#endif
#ifdef GENERATE_MIPMAP_HINT
#undef GENERATE_MIPMAP_HINT
#endif
#ifdef DEPTH_COMPONENT16
#undef DEPTH_COMPONENT16
#endif
#ifdef DEPTH_COMPONENT24
#undef DEPTH_COMPONENT24
#endif
#ifdef DEPTH_COMPONENT32
#undef DEPTH_COMPONENT32
#endif
#ifdef MIRRORED_REPEAT
#undef MIRRORED_REPEAT
#endif
#ifdef FOG_COORDINATE_SOURCE
#undef FOG_COORDINATE_SOURCE
#endif
#ifdef FOG_COORDINATE
#undef FOG_COORDINATE
#endif
#ifdef FRAGMENT_DEPTH
#undef FRAGMENT_DEPTH
#endif
#ifdef CURRENT_FOG_COORDINATE
#undef CURRENT_FOG_COORDINATE
#endif
#ifdef FOG_COORDINATE_ARRAY_TYPE
#undef FOG_COORDINATE_ARRAY_TYPE
#endif
#ifdef FOG_COORDINATE_ARRAY_STRIDE
#undef FOG_COORDINATE_ARRAY_STRIDE
#endif
#ifdef FOG_COORDINATE_ARRAY_POINTER
#undef FOG_COORDINATE_ARRAY_POINTER
#endif
#ifdef FOG_COORDINATE_ARRAY
#undef FOG_COORDINATE_ARRAY
#endif
#ifdef COLOR_SUM
#undef COLOR_SUM
#endif
#ifdef CURRENT_SECONDARY_COLOR
#undef CURRENT_SECONDARY_COLOR
#endif
#ifdef SECONDARY_COLOR_ARRAY_SIZE
#undef SECONDARY_COLOR_ARRAY_SIZE
#endif
#ifdef SECONDARY_COLOR_ARRAY_TYPE
#undef SECONDARY_COLOR_ARRAY_TYPE
#endif
#ifdef SECONDARY_COLOR_ARRAY_STRIDE
#undef SECONDARY_COLOR_ARRAY_STRIDE
#endif
#ifdef SECONDARY_COLOR_ARRAY_POINTER
#undef SECONDARY_COLOR_ARRAY_POINTER
#endif
#ifdef SECONDARY_COLOR_ARRAY
#undef SECONDARY_COLOR_ARRAY
#endif
#ifdef MAX_TEXTURE_LOD_BIAS
#undef MAX_TEXTURE_LOD_BIAS
#endif
#ifdef TEXTURE_FILTER_CONTROL
#undef TEXTURE_FILTER_CONTROL
#endif
#ifdef TEXTURE_LOD_BIAS
#undef TEXTURE_LOD_BIAS
#endif
#ifdef INCR_WRAP
#undef INCR_WRAP
#endif
#ifdef DECR_WRAP
#undef DECR_WRAP
#endif
#ifdef TEXTURE_DEPTH_SIZE
#undef TEXTURE_DEPTH_SIZE
#endif
#ifdef DEPTH_TEXTURE_MODE
#undef DEPTH_TEXTURE_MODE
#endif
#ifdef TEXTURE_COMPARE_MODE
#undef TEXTURE_COMPARE_MODE
#endif
#ifdef TEXTURE_COMPARE_FUNC
#undef TEXTURE_COMPARE_FUNC
#endif
#ifdef COMPARE_R_TO_TEXTURE
#undef COMPARE_R_TO_TEXTURE
#endif
#ifdef BUFFER_SIZE
#undef BUFFER_SIZE
#endif
#ifdef BUFFER_USAGE
#undef BUFFER_USAGE
#endif
#ifdef QUERY_COUNTER_BITS
#undef QUERY_COUNTER_BITS
#endif
#ifdef CURRENT_QUERY
#undef CURRENT_QUERY
#endif
#ifdef QUERY_RESULT
#undef QUERY_RESULT
#endif
#ifdef QUERY_RESULT_AVAILABLE
#undef QUERY_RESULT_AVAILABLE
#endif
#ifdef ARRAY_BUFFER
#undef ARRAY_BUFFER
#endif
#ifdef ELEMENT_ARRAY_BUFFER
#undef ELEMENT_ARRAY_BUFFER
#endif
#ifdef ARRAY_BUFFER_BINDING
#undef ARRAY_BUFFER_BINDING
#endif
#ifdef ELEMENT_ARRAY_BUFFER_BINDING
#undef ELEMENT_ARRAY_BUFFER_BINDING
#endif
#ifdef VERTEX_ARRAY_BUFFER_BINDING
#undef VERTEX_ARRAY_BUFFER_BINDING
#endif
#ifdef NORMAL_ARRAY_BUFFER_BINDING
#undef NORMAL_ARRAY_BUFFER_BINDING
#endif
#ifdef COLOR_ARRAY_BUFFER_BINDING
#undef COLOR_ARRAY_BUFFER_BINDING
#endif
#ifdef INDEX_ARRAY_BUFFER_BINDING
#undef INDEX_ARRAY_BUFFER_BINDING
#endif
#ifdef TEXTURE_COORD_ARRAY_BUFFER_BINDING
#undef TEXTURE_COORD_ARRAY_BUFFER_BINDING
#endif
#ifdef EDGE_FLAG_ARRAY_BUFFER_BINDING
#undef EDGE_FLAG_ARRAY_BUFFER_BINDING
#endif
#ifdef SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#undef SECONDARY_COLOR_ARRAY_BUFFER_BINDING
#endif
#ifdef FOG_COORDINATE_ARRAY_BUFFER_BINDING
#undef FOG_COORDINATE_ARRAY_BUFFER_BINDING
#endif
#ifdef WEIGHT_ARRAY_BUFFER_BINDING
#undef WEIGHT_ARRAY_BUFFER_BINDING
#endif
#ifdef VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#undef VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
#endif
#ifdef READ_ONLY
#undef READ_ONLY
#endif
#ifdef WRITE_ONLY
#undef WRITE_ONLY
#endif
#ifdef READ_WRITE
#undef READ_WRITE
#endif
#ifdef BUFFER_ACCESS
#undef BUFFER_ACCESS
#endif
#ifdef BUFFER_MAPPED
#undef BUFFER_MAPPED
#endif
#ifdef BUFFER_MAP_POINTER
#undef BUFFER_MAP_POINTER
#endif
#ifdef STREAM_DRAW
#undef STREAM_DRAW
#endif
#ifdef STREAM_READ
#undef STREAM_READ
#endif
#ifdef STREAM_COPY
#undef STREAM_COPY
#endif
#ifdef STATIC_DRAW
#undef STATIC_DRAW
#endif
#ifdef STATIC_READ
#undef STATIC_READ
#endif
#ifdef STATIC_COPY
#undef STATIC_COPY
#endif
#ifdef DYNAMIC_DRAW
#undef DYNAMIC_DRAW
#endif
#ifdef DYNAMIC_READ
#undef DYNAMIC_READ
#endif
#ifdef DYNAMIC_COPY
#undef DYNAMIC_COPY
#endif
#ifdef SAMPLES_PASSED
#undef SAMPLES_PASSED
#endif
#ifdef FOG_COORD_SRC
#undef FOG_COORD_SRC
#endif
#ifdef FOG_COORD
#undef FOG_COORD
#endif
#ifdef CURRENT_FOG_COORD
#undef CURRENT_FOG_COORD
#endif
#ifdef FOG_COORD_ARRAY_TYPE
#undef FOG_COORD_ARRAY_TYPE
#endif
#ifdef FOG_COORD_ARRAY_STRIDE
#undef FOG_COORD_ARRAY_STRIDE
#endif
#ifdef FOG_COORD_ARRAY_POINTER
#undef FOG_COORD_ARRAY_POINTER
#endif
#ifdef FOG_COORD_ARRAY
#undef FOG_COORD_ARRAY
#endif
#ifdef FOG_COORD_ARRAY_BUFFER_BINDING
#undef FOG_COORD_ARRAY_BUFFER_BINDING
#endif
#ifdef SRC0_RGB
#undef SRC0_RGB
#endif
#ifdef SRC1_RGB
#undef SRC1_RGB
#endif
#ifdef SRC2_RGB
#undef SRC2_RGB
#endif
#ifdef SRC0_ALPHA
#undef SRC0_ALPHA
#endif
#ifdef SRC1_ALPHA
#undef SRC1_ALPHA
#endif
#ifdef SRC2_ALPHA
#undef SRC2_ALPHA
#endif
#ifdef BLEND_EQUATION_RGB
#undef BLEND_EQUATION_RGB
#endif
#ifdef VERTEX_ATTRIB_ARRAY_ENABLED
#undef VERTEX_ATTRIB_ARRAY_ENABLED
#endif
#ifdef VERTEX_ATTRIB_ARRAY_SIZE
#undef VERTEX_ATTRIB_ARRAY_SIZE
#endif
#ifdef VERTEX_ATTRIB_ARRAY_STRIDE
#undef VERTEX_ATTRIB_ARRAY_STRIDE
#endif
#ifdef VERTEX_ATTRIB_ARRAY_TYPE
#undef VERTEX_ATTRIB_ARRAY_TYPE
#endif
#ifdef CURRENT_VERTEX_ATTRIB
#undef CURRENT_VERTEX_ATTRIB
#endif
#ifdef VERTEX_PROGRAM_POINT_SIZE
#undef VERTEX_PROGRAM_POINT_SIZE
#endif
#ifdef VERTEX_PROGRAM_TWO_SIDE
#undef VERTEX_PROGRAM_TWO_SIDE
#endif
#ifdef VERTEX_ATTRIB_ARRAY_POINTER
#undef VERTEX_ATTRIB_ARRAY_POINTER
#endif
#ifdef STENCIL_BACK_FUNC
#undef STENCIL_BACK_FUNC
#endif
#ifdef STENCIL_BACK_FAIL
#undef STENCIL_BACK_FAIL
#endif
#ifdef STENCIL_BACK_PASS_DEPTH_FAIL
#undef STENCIL_BACK_PASS_DEPTH_FAIL
#endif
#ifdef STENCIL_BACK_PASS_DEPTH_PASS
#undef STENCIL_BACK_PASS_DEPTH_PASS
#endif
#ifdef MAX_DRAW_BUFFERS
#undef MAX_DRAW_BUFFERS
#endif
#ifdef DRAW_BUFFER0
#undef DRAW_BUFFER0
#endif
#ifdef DRAW_BUFFER1
#undef DRAW_BUFFER1
#endif
#ifdef DRAW_BUFFER2
#undef DRAW_BUFFER2
#endif
#ifdef DRAW_BUFFER3
#undef DRAW_BUFFER3
#endif
#ifdef DRAW_BUFFER4
#undef DRAW_BUFFER4
#endif
#ifdef DRAW_BUFFER5
#undef DRAW_BUFFER5
#endif
#ifdef DRAW_BUFFER6
#undef DRAW_BUFFER6
#endif
#ifdef DRAW_BUFFER7
#undef DRAW_BUFFER7
#endif
#ifdef DRAW_BUFFER8
#undef DRAW_BUFFER8
#endif
#ifdef DRAW_BUFFER9
#undef DRAW_BUFFER9
#endif
#ifdef DRAW_BUFFER10
#undef DRAW_BUFFER10
#endif
#ifdef DRAW_BUFFER11
#undef DRAW_BUFFER11
#endif
#ifdef DRAW_BUFFER12
#undef DRAW_BUFFER12
#endif
#ifdef DRAW_BUFFER13
#undef DRAW_BUFFER13
#endif
#ifdef DRAW_BUFFER14
#undef DRAW_BUFFER14
#endif
#ifdef DRAW_BUFFER15
#undef DRAW_BUFFER15
#endif
#ifdef BLEND_EQUATION_ALPHA
#undef BLEND_EQUATION_ALPHA
#endif
#ifdef POINT_SPRITE
#undef POINT_SPRITE
#endif
#ifdef COORD_REPLACE
#undef COORD_REPLACE
#endif
#ifdef MAX_VERTEX_ATTRIBS
#undef MAX_VERTEX_ATTRIBS
#endif
#ifdef VERTEX_ATTRIB_ARRAY_NORMALIZED
#undef VERTEX_ATTRIB_ARRAY_NORMALIZED
#endif
#ifdef MAX_TEXTURE_COORDS
#undef MAX_TEXTURE_COORDS
#endif
#ifdef MAX_TEXTURE_IMAGE_UNITS
#undef MAX_TEXTURE_IMAGE_UNITS
#endif
#ifdef FRAGMENT_SHADER
#undef FRAGMENT_SHADER
#endif
#ifdef VERTEX_SHADER
#undef VERTEX_SHADER
#endif
#ifdef MAX_FRAGMENT_UNIFORM_COMPONENTS
#undef MAX_FRAGMENT_UNIFORM_COMPONENTS
#endif
#ifdef MAX_VERTEX_UNIFORM_COMPONENTS
#undef MAX_VERTEX_UNIFORM_COMPONENTS
#endif
#ifdef MAX_VARYING_FLOATS
#undef MAX_VARYING_FLOATS
#endif
#ifdef MAX_VERTEX_TEXTURE_IMAGE_UNITS
#undef MAX_VERTEX_TEXTURE_IMAGE_UNITS
#endif
#ifdef MAX_COMBINED_TEXTURE_IMAGE_UNITS
#undef MAX_COMBINED_TEXTURE_IMAGE_UNITS
#endif
#ifdef SHADER_TYPE
#undef SHADER_TYPE
#endif
#ifdef FLOAT_VEC2
#undef FLOAT_VEC2
#endif
#ifdef FLOAT_VEC3
#undef FLOAT_VEC3
#endif
#ifdef FLOAT_VEC4
#undef FLOAT_VEC4
#endif
#ifdef INT_VEC2
#undef INT_VEC2
#endif
#ifdef INT_VEC3
#undef INT_VEC3
#endif
#ifdef INT_VEC4
#undef INT_VEC4
#endif
#ifdef BOOL
#undef BOOL
#endif
#ifdef BOOL_VEC2
#undef BOOL_VEC2
#endif
#ifdef BOOL_VEC3
#undef BOOL_VEC3
#endif
#ifdef BOOL_VEC4
#undef BOOL_VEC4
#endif
#ifdef FLOAT_MAT2
#undef FLOAT_MAT2
#endif
#ifdef FLOAT_MAT3
#undef FLOAT_MAT3
#endif
#ifdef FLOAT_MAT4
#undef FLOAT_MAT4
#endif
#ifdef SAMPLER_1D
#undef SAMPLER_1D
#endif
#ifdef SAMPLER_2D
#undef SAMPLER_2D
#endif
#ifdef SAMPLER_3D
#undef SAMPLER_3D
#endif
#ifdef SAMPLER_CUBE
#undef SAMPLER_CUBE
#endif
#ifdef SAMPLER_1D_SHADOW
#undef SAMPLER_1D_SHADOW
#endif
#ifdef SAMPLER_2D_SHADOW
#undef SAMPLER_2D_SHADOW
#endif
#ifdef DELETE_STATUS
#undef DELETE_STATUS
#endif
#ifdef COMPILE_STATUS
#undef COMPILE_STATUS
#endif
#ifdef LINK_STATUS
#undef LINK_STATUS
#endif
#ifdef VALIDATE_STATUS
#undef VALIDATE_STATUS
#endif
#ifdef INFO_LOG_LENGTH
#undef INFO_LOG_LENGTH
#endif
#ifdef ATTACHED_SHADERS
#undef ATTACHED_SHADERS
#endif
#ifdef ACTIVE_UNIFORMS
#undef ACTIVE_UNIFORMS
#endif
#ifdef ACTIVE_UNIFORM_MAX_LENGTH
#undef ACTIVE_UNIFORM_MAX_LENGTH
#endif
#ifdef SHADER_SOURCE_LENGTH
#undef SHADER_SOURCE_LENGTH
#endif
#ifdef ACTIVE_ATTRIBUTES
#undef ACTIVE_ATTRIBUTES
#endif
#ifdef ACTIVE_ATTRIBUTE_MAX_LENGTH
#undef ACTIVE_ATTRIBUTE_MAX_LENGTH
#endif
#ifdef FRAGMENT_SHADER_DERIVATIVE_HINT
#undef FRAGMENT_SHADER_DERIVATIVE_HINT
#endif
#ifdef SHADING_LANGUAGE_VERSION
#undef SHADING_LANGUAGE_VERSION
#endif
#ifdef CURRENT_PROGRAM
#undef CURRENT_PROGRAM
#endif
#ifdef POINT_SPRITE_COORD_ORIGIN
#undef POINT_SPRITE_COORD_ORIGIN
#endif
#ifdef LOWER_LEFT
#undef LOWER_LEFT
#endif
#ifdef UPPER_LEFT
#undef UPPER_LEFT
#endif
#ifdef STENCIL_BACK_REF
#undef STENCIL_BACK_REF
#endif
#ifdef STENCIL_BACK_VALUE_MASK
#undef STENCIL_BACK_VALUE_MASK
#endif
#ifdef STENCIL_BACK_WRITEMASK
#undef STENCIL_BACK_WRITEMASK
#endif
#ifdef PHONG_WIN
#undef PHONG_WIN
#endif
#ifdef PHONG_HINT_WIN
#undef PHONG_HINT_WIN
#endif
#ifdef FOG_SPECULAR_TEXTURE_WIN
#undef FOG_SPECULAR_TEXTURE_WIN
#endif
#ifdef SAMPLE_BUFFERS_3DFX
#undef SAMPLE_BUFFERS_3DFX
#endif
#ifdef SAMPLES_3DFX
#undef SAMPLES_3DFX
#endif
#ifdef FRONT_COLOR_BUFFER_BIT_ARB
#undef FRONT_COLOR_BUFFER_BIT_ARB
#endif
#ifdef BACK_COLOR_BUFFER_BIT_ARB
#undef BACK_COLOR_BUFFER_BIT_ARB
#endif
#ifdef DEPTH_BUFFER_BIT_ARB
#undef DEPTH_BUFFER_BIT_ARB
#endif
#ifdef STENCIL_BUFFER_BIT_ARB
#undef STENCIL_BUFFER_BIT_ARB
#endif
#ifdef SAMPLE_BUFFERS_ARB
#undef SAMPLE_BUFFERS_ARB
#endif
#ifdef SAMPLES_ARB
#undef SAMPLES_ARB
#endif
#ifdef DRAW_TO_PBUFFER_ARB
#undef DRAW_TO_PBUFFER_ARB
#endif
#ifdef MAX_PBUFFER_PIXELS_ARB
#undef MAX_PBUFFER_PIXELS_ARB
#endif
#ifdef MAX_PBUFFER_WIDTH_ARB
#undef MAX_PBUFFER_WIDTH_ARB
#endif
#ifdef MAX_PBUFFER_HEIGHT_ARB
#undef MAX_PBUFFER_HEIGHT_ARB
#endif
#ifdef PBUFFER_LARGEST_ARB
#undef PBUFFER_LARGEST_ARB
#endif
#ifdef PBUFFER_WIDTH_ARB
#undef PBUFFER_WIDTH_ARB
#endif
#ifdef PBUFFER_HEIGHT_ARB
#undef PBUFFER_HEIGHT_ARB
#endif
#ifdef PBUFFER_LOST_ARB
#undef PBUFFER_LOST_ARB
#endif
#ifdef NUMBER_PIXEL_FORMATS_ARB
#undef NUMBER_PIXEL_FORMATS_ARB
#endif
#ifdef DRAW_TO_WINDOW_ARB
#undef DRAW_TO_WINDOW_ARB
#endif
#ifdef DRAW_TO_BITMAP_ARB
#undef DRAW_TO_BITMAP_ARB
#endif
#ifdef ACCELERATION_ARB
#undef ACCELERATION_ARB
#endif
#ifdef NEED_PALETTE_ARB
#undef NEED_PALETTE_ARB
#endif
#ifdef NEED_SYSTEM_PALETTE_ARB
#undef NEED_SYSTEM_PALETTE_ARB
#endif
#ifdef SWAP_LAYER_BUFFERS_ARB
#undef SWAP_LAYER_BUFFERS_ARB
#endif
#ifdef SWAP_METHOD_ARB
#undef SWAP_METHOD_ARB
#endif
#ifdef NUMBER_OVERLAYS_ARB
#undef NUMBER_OVERLAYS_ARB
#endif
#ifdef NUMBER_UNDERLAYS_ARB
#undef NUMBER_UNDERLAYS_ARB
#endif
#ifdef TRANSPARENT_ARB
#undef TRANSPARENT_ARB
#endif
#ifdef TRANSPARENT_RED_VALUE_ARB
#undef TRANSPARENT_RED_VALUE_ARB
#endif
#ifdef TRANSPARENT_GREEN_VALUE_ARB
#undef TRANSPARENT_GREEN_VALUE_ARB
#endif
#ifdef TRANSPARENT_BLUE_VALUE_ARB
#undef TRANSPARENT_BLUE_VALUE_ARB
#endif
#ifdef TRANSPARENT_ALPHA_VALUE_ARB
#undef TRANSPARENT_ALPHA_VALUE_ARB
#endif
#ifdef TRANSPARENT_INDEX_VALUE_ARB
#undef TRANSPARENT_INDEX_VALUE_ARB
#endif
#ifdef SHARE_DEPTH_ARB
#undef SHARE_DEPTH_ARB
#endif
#ifdef SHARE_STENCIL_ARB
#undef SHARE_STENCIL_ARB
#endif
#ifdef SHARE_ACCUM_ARB
#undef SHARE_ACCUM_ARB
#endif
#ifdef SUPPORT_GDI_ARB
#undef SUPPORT_GDI_ARB
#endif
#ifdef SUPPORT_OPENGL_ARB
#undef SUPPORT_OPENGL_ARB
#endif
#ifdef DOUBLE_BUFFER_ARB
#undef DOUBLE_BUFFER_ARB
#endif
#ifdef STEREO_ARB
#undef STEREO_ARB
#endif
#ifdef PIXEL_TYPE_ARB
#undef PIXEL_TYPE_ARB
#endif
#ifdef COLOR_BITS_ARB
#undef COLOR_BITS_ARB
#endif
#ifdef RED_BITS_ARB
#undef RED_BITS_ARB
#endif
#ifdef RED_SHIFT_ARB
#undef RED_SHIFT_ARB
#endif
#ifdef GREEN_BITS_ARB
#undef GREEN_BITS_ARB
#endif
#ifdef GREEN_SHIFT_ARB
#undef GREEN_SHIFT_ARB
#endif
#ifdef BLUE_BITS_ARB
#undef BLUE_BITS_ARB
#endif
#ifdef BLUE_SHIFT_ARB
#undef BLUE_SHIFT_ARB
#endif
#ifdef ALPHA_BITS_ARB
#undef ALPHA_BITS_ARB
#endif
#ifdef ALPHA_SHIFT_ARB
#undef ALPHA_SHIFT_ARB
#endif
#ifdef ACCUM_BITS_ARB
#undef ACCUM_BITS_ARB
#endif
#ifdef ACCUM_RED_BITS_ARB
#undef ACCUM_RED_BITS_ARB
#endif
#ifdef ACCUM_GREEN_BITS_ARB
#undef ACCUM_GREEN_BITS_ARB
#endif
#ifdef ACCUM_BLUE_BITS_ARB
#undef ACCUM_BLUE_BITS_ARB
#endif
#ifdef ACCUM_ALPHA_BITS_ARB
#undef ACCUM_ALPHA_BITS_ARB
#endif
#ifdef DEPTH_BITS_ARB
#undef DEPTH_BITS_ARB
#endif
#ifdef STENCIL_BITS_ARB
#undef STENCIL_BITS_ARB
#endif
#ifdef AUX_BUFFERS_ARB
#undef AUX_BUFFERS_ARB
#endif
#ifdef NO_ACCELERATION_ARB
#undef NO_ACCELERATION_ARB
#endif
#ifdef GENERIC_ACCELERATION_ARB
#undef GENERIC_ACCELERATION_ARB
#endif
#ifdef FULL_ACCELERATION_ARB
#undef FULL_ACCELERATION_ARB
#endif
#ifdef SWAP_EXCHANGE_ARB
#undef SWAP_EXCHANGE_ARB
#endif
#ifdef SWAP_COPY_ARB
#undef SWAP_COPY_ARB
#endif
#ifdef SWAP_UNDEFINED_ARB
#undef SWAP_UNDEFINED_ARB
#endif
#ifdef TYPE_RGBA_ARB
#undef TYPE_RGBA_ARB
#endif
#ifdef TYPE_COLORINDEX_ARB
#undef TYPE_COLORINDEX_ARB
#endif
#ifdef TYPE_RGBA_FLOAT_ARB
#undef TYPE_RGBA_FLOAT_ARB
#endif
#ifdef BIND_TO_TEXTURE_RGB_ARB
#undef BIND_TO_TEXTURE_RGB_ARB
#endif
#ifdef BIND_TO_TEXTURE_RGBA_ARB
#undef BIND_TO_TEXTURE_RGBA_ARB
#endif
#ifdef TEXTURE_FORMAT_ARB
#undef TEXTURE_FORMAT_ARB
#endif
#ifdef TEXTURE_TARGET_ARB
#undef TEXTURE_TARGET_ARB
#endif
#ifdef MIPMAP_TEXTURE_ARB
#undef MIPMAP_TEXTURE_ARB
#endif
#ifdef TEXTURE_RGB_ARB
#undef TEXTURE_RGB_ARB
#endif
#ifdef TEXTURE_RGBA_ARB
#undef TEXTURE_RGBA_ARB
#endif
#ifdef NO_TEXTURE_ARB
#undef NO_TEXTURE_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_ARB
#undef TEXTURE_CUBE_MAP_ARB
#endif
#ifdef TEXTURE_1D_ARB
#undef TEXTURE_1D_ARB
#endif
#ifdef TEXTURE_2D_ARB
#undef TEXTURE_2D_ARB
#endif
#ifdef MIPMAP_LEVEL_ARB
#undef MIPMAP_LEVEL_ARB
#endif
#ifdef CUBE_MAP_FACE_ARB
#undef CUBE_MAP_FACE_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#undef TEXTURE_CUBE_MAP_POSITIVE_X_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#undef TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#undef TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#undef TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#undef TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
#endif
#ifdef TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#undef TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
#endif
#ifdef FRONT_LEFT_ARB
#undef FRONT_LEFT_ARB
#endif
#ifdef FRONT_RIGHT_ARB
#undef FRONT_RIGHT_ARB
#endif
#ifdef BACK_LEFT_ARB
#undef BACK_LEFT_ARB
#endif
#ifdef BACK_RIGHT_ARB
#undef BACK_RIGHT_ARB
#endif
#ifdef AUX0_ARB
#undef AUX0_ARB
#endif
#ifdef AUX1_ARB
#undef AUX1_ARB
#endif
#ifdef AUX2_ARB
#undef AUX2_ARB
#endif
#ifdef AUX3_ARB
#undef AUX3_ARB
#endif
#ifdef AUX4_ARB
#undef AUX4_ARB
#endif
#ifdef AUX5_ARB
#undef AUX5_ARB
#endif
#ifdef AUX6_ARB
#undef AUX6_ARB
#endif
#ifdef AUX7_ARB
#undef AUX7_ARB
#endif
#ifdef AUX8_ARB
#undef AUX8_ARB
#endif
#ifdef AUX9_ARB
#undef AUX9_ARB
#endif
#ifdef TYPE_RGBA_FLOAT_ATI
#undef TYPE_RGBA_FLOAT_ATI
#endif
#ifdef DEPTH_FLOAT_EXT
#undef DEPTH_FLOAT_EXT
#endif
#ifdef SAMPLE_BUFFERS_EXT
#undef SAMPLE_BUFFERS_EXT
#endif
#ifdef SAMPLES_EXT
#undef SAMPLES_EXT
#endif
#ifdef DRAW_TO_PBUFFER_EXT
#undef DRAW_TO_PBUFFER_EXT
#endif
#ifdef MAX_PBUFFER_PIXELS_EXT
#undef MAX_PBUFFER_PIXELS_EXT
#endif
#ifdef MAX_PBUFFER_WIDTH_EXT
#undef MAX_PBUFFER_WIDTH_EXT
#endif
#ifdef MAX_PBUFFER_HEIGHT_EXT
#undef MAX_PBUFFER_HEIGHT_EXT
#endif
#ifdef OPTIMAL_PBUFFER_WIDTH_EXT
#undef OPTIMAL_PBUFFER_WIDTH_EXT
#endif
#ifdef OPTIMAL_PBUFFER_HEIGHT_EXT
#undef OPTIMAL_PBUFFER_HEIGHT_EXT
#endif
#ifdef PBUFFER_LARGEST_EXT
#undef PBUFFER_LARGEST_EXT
#endif
#ifdef PBUFFER_WIDTH_EXT
#undef PBUFFER_WIDTH_EXT
#endif
#ifdef PBUFFER_HEIGHT_EXT
#undef PBUFFER_HEIGHT_EXT
#endif
#ifdef NUMBER_PIXEL_FORMATS_EXT
#undef NUMBER_PIXEL_FORMATS_EXT
#endif
#ifdef DRAW_TO_WINDOW_EXT
#undef DRAW_TO_WINDOW_EXT
#endif
#ifdef DRAW_TO_BITMAP_EXT
#undef DRAW_TO_BITMAP_EXT
#endif
#ifdef ACCELERATION_EXT
#undef ACCELERATION_EXT
#endif
#ifdef NEED_PALETTE_EXT
#undef NEED_PALETTE_EXT
#endif
#ifdef NEED_SYSTEM_PALETTE_EXT
#undef NEED_SYSTEM_PALETTE_EXT
#endif
#ifdef SWAP_LAYER_BUFFERS_EXT
#undef SWAP_LAYER_BUFFERS_EXT
#endif
#ifdef SWAP_METHOD_EXT
#undef SWAP_METHOD_EXT
#endif
#ifdef NUMBER_OVERLAYS_EXT
#undef NUMBER_OVERLAYS_EXT
#endif
#ifdef NUMBER_UNDERLAYS_EXT
#undef NUMBER_UNDERLAYS_EXT
#endif
#ifdef TRANSPARENT_EXT
#undef TRANSPARENT_EXT
#endif
#ifdef TRANSPARENT_VALUE_EXT
#undef TRANSPARENT_VALUE_EXT
#endif
#ifdef SHARE_DEPTH_EXT
#undef SHARE_DEPTH_EXT
#endif
#ifdef SHARE_STENCIL_EXT
#undef SHARE_STENCIL_EXT
#endif
#ifdef SHARE_ACCUM_EXT
#undef SHARE_ACCUM_EXT
#endif
#ifdef SUPPORT_GDI_EXT
#undef SUPPORT_GDI_EXT
#endif
#ifdef SUPPORT_OPENGL_EXT
#undef SUPPORT_OPENGL_EXT
#endif
#ifdef DOUBLE_BUFFER_EXT
#undef DOUBLE_BUFFER_EXT
#endif
#ifdef STEREO_EXT
#undef STEREO_EXT
#endif
#ifdef PIXEL_TYPE_EXT
#undef PIXEL_TYPE_EXT
#endif
#ifdef COLOR_BITS_EXT
#undef COLOR_BITS_EXT
#endif
#ifdef RED_BITS_EXT
#undef RED_BITS_EXT
#endif
#ifdef RED_SHIFT_EXT
#undef RED_SHIFT_EXT
#endif
#ifdef GREEN_BITS_EXT
#undef GREEN_BITS_EXT
#endif
#ifdef GREEN_SHIFT_EXT
#undef GREEN_SHIFT_EXT
#endif
#ifdef BLUE_BITS_EXT
#undef BLUE_BITS_EXT
#endif
#ifdef BLUE_SHIFT_EXT
#undef BLUE_SHIFT_EXT
#endif
#ifdef ALPHA_BITS_EXT
#undef ALPHA_BITS_EXT
#endif
#ifdef ALPHA_SHIFT_EXT
#undef ALPHA_SHIFT_EXT
#endif
#ifdef ACCUM_BITS_EXT
#undef ACCUM_BITS_EXT
#endif
#ifdef ACCUM_RED_BITS_EXT
#undef ACCUM_RED_BITS_EXT
#endif
#ifdef ACCUM_GREEN_BITS_EXT
#undef ACCUM_GREEN_BITS_EXT
#endif
#ifdef ACCUM_BLUE_BITS_EXT
#undef ACCUM_BLUE_BITS_EXT
#endif
#ifdef ACCUM_ALPHA_BITS_EXT
#undef ACCUM_ALPHA_BITS_EXT
#endif
#ifdef DEPTH_BITS_EXT
#undef DEPTH_BITS_EXT
#endif
#ifdef STENCIL_BITS_EXT
#undef STENCIL_BITS_EXT
#endif
#ifdef AUX_BUFFERS_EXT
#undef AUX_BUFFERS_EXT
#endif
#ifdef NO_ACCELERATION_EXT
#undef NO_ACCELERATION_EXT
#endif
#ifdef GENERIC_ACCELERATION_EXT
#undef GENERIC_ACCELERATION_EXT
#endif
#ifdef FULL_ACCELERATION_EXT
#undef FULL_ACCELERATION_EXT
#endif
#ifdef SWAP_EXCHANGE_EXT
#undef SWAP_EXCHANGE_EXT
#endif
#ifdef SWAP_COPY_EXT
#undef SWAP_COPY_EXT
#endif
#ifdef SWAP_UNDEFINED_EXT
#undef SWAP_UNDEFINED_EXT
#endif
#ifdef TYPE_RGBA_EXT
#undef TYPE_RGBA_EXT
#endif
#ifdef TYPE_COLORINDEX_EXT
#undef TYPE_COLORINDEX_EXT
#endif
#ifdef DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D
#undef DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D
#endif
#ifdef DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D
#undef DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D
#endif
#ifdef DIGITAL_VIDEO_CURSOR_INCLUDED_I3D
#undef DIGITAL_VIDEO_CURSOR_INCLUDED_I3D
#endif
#ifdef DIGITAL_VIDEO_GAMMA_CORRECTED_I3D
#undef DIGITAL_VIDEO_GAMMA_CORRECTED_I3D
#endif
#ifdef GAMMA_TABLE_SIZE_I3D
#undef GAMMA_TABLE_SIZE_I3D
#endif
#ifdef GAMMA_EXCLUDE_DESKTOP_I3D
#undef GAMMA_EXCLUDE_DESKTOP_I3D
#endif
#ifdef GENLOCK_SOURCE_MULTIVIEW_I3D
#undef GENLOCK_SOURCE_MULTIVIEW_I3D
#endif
#ifdef GENLOCK_SOURCE_EXTENAL_SYNC_I3D
#undef GENLOCK_SOURCE_EXTENAL_SYNC_I3D
#endif
#ifdef GENLOCK_SOURCE_EXTENAL_FIELD_I3D
#undef GENLOCK_SOURCE_EXTENAL_FIELD_I3D
#endif
#ifdef GENLOCK_SOURCE_EXTENAL_TTL_I3D
#undef GENLOCK_SOURCE_EXTENAL_TTL_I3D
#endif
#ifdef GENLOCK_SOURCE_DIGITAL_SYNC_I3D
#undef GENLOCK_SOURCE_DIGITAL_SYNC_I3D
#endif
#ifdef GENLOCK_SOURCE_DIGITAL_FIELD_I3D
#undef GENLOCK_SOURCE_DIGITAL_FIELD_I3D
#endif
#ifdef GENLOCK_SOURCE_EDGE_FALLING_I3D
#undef GENLOCK_SOURCE_EDGE_FALLING_I3D
#endif
#ifdef GENLOCK_SOURCE_EDGE_RISING_I3D
#undef GENLOCK_SOURCE_EDGE_RISING_I3D
#endif
#ifdef GENLOCK_SOURCE_EDGE_BOTH_I3D
#undef GENLOCK_SOURCE_EDGE_BOTH_I3D
#endif
#ifdef IMAGE_BUFFER_MIN_ACCESS_I3D
#undef IMAGE_BUFFER_MIN_ACCESS_I3D
#endif
#ifdef IMAGE_BUFFER_LOCK_I3D
#undef IMAGE_BUFFER_LOCK_I3D
#endif
#ifdef FLOAT_COMPONENTS_NV
#undef FLOAT_COMPONENTS_NV
#endif
#ifdef BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV
#undef BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV
#endif
#ifdef BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV
#undef BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV
#endif
#ifdef BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV
#undef BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV
#endif
#ifdef BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV
#undef BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV
#endif
#ifdef TEXTURE_FLOAT_R_NV
#undef TEXTURE_FLOAT_R_NV
#endif
#ifdef TEXTURE_FLOAT_RG_NV
#undef TEXTURE_FLOAT_RG_NV
#endif
#ifdef TEXTURE_FLOAT_RGB_NV
#undef TEXTURE_FLOAT_RGB_NV
#endif
#ifdef TEXTURE_FLOAT_RGBA_NV
#undef TEXTURE_FLOAT_RGBA_NV
#endif
#ifdef BIND_TO_TEXTURE_DEPTH_NV
#undef BIND_TO_TEXTURE_DEPTH_NV
#endif
#ifdef BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV
#undef BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV
#endif
#ifdef DEPTH_TEXTURE_FORMAT_NV
#undef DEPTH_TEXTURE_FORMAT_NV
#endif
#ifdef TEXTURE_DEPTH_COMPONENT_NV
#undef TEXTURE_DEPTH_COMPONENT_NV
#endif
#ifdef DEPTH_COMPONENT_NV
#undef DEPTH_COMPONENT_NV
#endif
#ifdef BIND_TO_TEXTURE_RECTANGLE_RGB_NV
#undef BIND_TO_TEXTURE_RECTANGLE_RGB_NV
#endif
#ifdef BIND_TO_TEXTURE_RECTANGLE_RGBA_NV
#undef BIND_TO_TEXTURE_RECTANGLE_RGBA_NV
#endif
#ifdef TEXTURE_RECTANGLE_NV
#undef TEXTURE_RECTANGLE_NV
#endif

namespace vtkgl {
  //Definitions for GL_VERSION_1_2
  enum GL_VERSION_1_2_consts {
    UNSIGNED_BYTE_3_3_2 = 0x8032,
    UNSIGNED_SHORT_4_4_4_4 = 0x8033,
    UNSIGNED_SHORT_5_5_5_1 = 0x8034,
    UNSIGNED_INT_8_8_8_8 = 0x8035,
    UNSIGNED_INT_10_10_10_2 = 0x8036,
    RESCALE_NORMAL = 0x803A,
    TEXTURE_BINDING_3D = 0x806A,
    PACK_SKIP_IMAGES = 0x806B,
    PACK_IMAGE_HEIGHT = 0x806C,
    UNPACK_SKIP_IMAGES = 0x806D,
    UNPACK_IMAGE_HEIGHT = 0x806E,
    TEXTURE_3D = 0x806F,
    PROXY_TEXTURE_3D = 0x8070,
    TEXTURE_DEPTH = 0x8071,
    TEXTURE_WRAP_R = 0x8072,
    MAX_3D_TEXTURE_SIZE = 0x8073,
    UNSIGNED_BYTE_2_3_3_REV = 0x8362,
    UNSIGNED_SHORT_5_6_5 = 0x8363,
    UNSIGNED_SHORT_5_6_5_REV = 0x8364,
    UNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
    UNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
    UNSIGNED_INT_8_8_8_8_REV = 0x8367,
    UNSIGNED_INT_2_10_10_10_REV = 0x8368,
    BGR = 0x80E0,
    BGRA = 0x80E1,
    MAX_ELEMENTS_VERTICES = 0x80E8,
    MAX_ELEMENTS_INDICES = 0x80E9,
    CLAMP_TO_EDGE = 0x812F,
    TEXTURE_MIN_LOD = 0x813A,
    TEXTURE_MAX_LOD = 0x813B,
    TEXTURE_BASE_LEVEL = 0x813C,
    TEXTURE_MAX_LEVEL = 0x813D,
    LIGHT_MODEL_COLOR_CONTROL = 0x81F8,
    SINGLE_COLOR = 0x81F9,
    SEPARATE_SPECULAR_COLOR = 0x81FA,
    SMOOTH_POINT_SIZE_RANGE = 0x0B12,
    SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13,
    SMOOTH_LINE_WIDTH_RANGE = 0x0B22,
    SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23,
    ALIASED_POINT_SIZE_RANGE = 0x846D,
    ALIASED_LINE_WIDTH_RANGE = 0x846E
  };
  typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);
  typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
  typedef void (APIENTRYP PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
  typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
  typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
  typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
  typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
  typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
  typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
  typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
  typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
  typedef void (APIENTRYP PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
  typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC) (GLenum target);
  typedef void (APIENTRYP PFNGLRESETMINMAXPROC) (GLenum target);
  typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
  typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  extern VTK_RENDERING_EXPORT PFNGLBLENDCOLORPROC BlendColor;
  extern VTK_RENDERING_EXPORT PFNGLBLENDEQUATIONPROC BlendEquation;
  extern VTK_RENDERING_EXPORT PFNGLDRAWRANGEELEMENTSPROC DrawRangeElements;
  extern VTK_RENDERING_EXPORT PFNGLCOLORTABLEPROC ColorTable;
  extern VTK_RENDERING_EXPORT PFNGLCOLORTABLEPARAMETERFVPROC ColorTableParameterfv;
  extern VTK_RENDERING_EXPORT PFNGLCOLORTABLEPARAMETERIVPROC ColorTableParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCOLORTABLEPROC CopyColorTable;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEPROC GetColorTable;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEPARAMETERFVPROC GetColorTableParameterfv;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEPARAMETERIVPROC GetColorTableParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLCOLORSUBTABLEPROC ColorSubTable;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCOLORSUBTABLEPROC CopyColorSubTable;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONFILTER1DPROC ConvolutionFilter1D;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONFILTER2DPROC ConvolutionFilter2D;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERFPROC ConvolutionParameterf;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERFVPROC ConvolutionParameterfv;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERIPROC ConvolutionParameteri;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERIVPROC ConvolutionParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DPROC CopyConvolutionFilter1D;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DPROC CopyConvolutionFilter2D;
  extern VTK_RENDERING_EXPORT PFNGLGETCONVOLUTIONFILTERPROC GetConvolutionFilter;
  extern VTK_RENDERING_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVPROC GetConvolutionParameterfv;
  extern VTK_RENDERING_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVPROC GetConvolutionParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLGETSEPARABLEFILTERPROC GetSeparableFilter;
  extern VTK_RENDERING_EXPORT PFNGLSEPARABLEFILTER2DPROC SeparableFilter2D;
  extern VTK_RENDERING_EXPORT PFNGLGETHISTOGRAMPROC GetHistogram;
  extern VTK_RENDERING_EXPORT PFNGLGETHISTOGRAMPARAMETERFVPROC GetHistogramParameterfv;
  extern VTK_RENDERING_EXPORT PFNGLGETHISTOGRAMPARAMETERIVPROC GetHistogramParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLGETMINMAXPROC GetMinmax;
  extern VTK_RENDERING_EXPORT PFNGLGETMINMAXPARAMETERFVPROC GetMinmaxParameterfv;
  extern VTK_RENDERING_EXPORT PFNGLGETMINMAXPARAMETERIVPROC GetMinmaxParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLHISTOGRAMPROC Histogram;
  extern VTK_RENDERING_EXPORT PFNGLMINMAXPROC Minmax;
  extern VTK_RENDERING_EXPORT PFNGLRESETHISTOGRAMPROC ResetHistogram;
  extern VTK_RENDERING_EXPORT PFNGLRESETMINMAXPROC ResetMinmax;
  extern VTK_RENDERING_EXPORT PFNGLTEXIMAGE3DPROC TexImage3D;
  extern VTK_RENDERING_EXPORT PFNGLTEXSUBIMAGE3DPROC TexSubImage3D;
  extern VTK_RENDERING_EXPORT PFNGLCOPYTEXSUBIMAGE3DPROC CopyTexSubImage3D;
  //Definitions for GL_ARB_imaging
  enum GL_ARB_imaging_consts {
    CONSTANT_COLOR = 0x8001,
    ONE_MINUS_CONSTANT_COLOR = 0x8002,
    CONSTANT_ALPHA = 0x8003,
    ONE_MINUS_CONSTANT_ALPHA = 0x8004,
    BLEND_COLOR = 0x8005,
    FUNC_ADD = 0x8006,
    MIN = 0x8007,
    MAX = 0x8008,
    BLEND_EQUATION = 0x8009,
    FUNC_SUBTRACT = 0x800A,
    FUNC_REVERSE_SUBTRACT = 0x800B,
    CONVOLUTION_1D = 0x8010,
    CONVOLUTION_2D = 0x8011,
    SEPARABLE_2D = 0x8012,
    CONVOLUTION_BORDER_MODE = 0x8013,
    CONVOLUTION_FILTER_SCALE = 0x8014,
    CONVOLUTION_FILTER_BIAS = 0x8015,
    REDUCE = 0x8016,
    CONVOLUTION_FORMAT = 0x8017,
    CONVOLUTION_WIDTH = 0x8018,
    CONVOLUTION_HEIGHT = 0x8019,
    MAX_CONVOLUTION_WIDTH = 0x801A,
    MAX_CONVOLUTION_HEIGHT = 0x801B,
    POST_CONVOLUTION_RED_SCALE = 0x801C,
    POST_CONVOLUTION_GREEN_SCALE = 0x801D,
    POST_CONVOLUTION_BLUE_SCALE = 0x801E,
    POST_CONVOLUTION_ALPHA_SCALE = 0x801F,
    POST_CONVOLUTION_RED_BIAS = 0x8020,
    POST_CONVOLUTION_GREEN_BIAS = 0x8021,
    POST_CONVOLUTION_BLUE_BIAS = 0x8022,
    POST_CONVOLUTION_ALPHA_BIAS = 0x8023,
    HISTOGRAM = 0x8024,
    PROXY_HISTOGRAM = 0x8025,
    HISTOGRAM_WIDTH = 0x8026,
    HISTOGRAM_FORMAT = 0x8027,
    HISTOGRAM_RED_SIZE = 0x8028,
    HISTOGRAM_GREEN_SIZE = 0x8029,
    HISTOGRAM_BLUE_SIZE = 0x802A,
    HISTOGRAM_ALPHA_SIZE = 0x802B,
    HISTOGRAM_LUMINANCE_SIZE = 0x802C,
    HISTOGRAM_SINK = 0x802D,
    MINMAX = 0x802E,
    MINMAX_FORMAT = 0x802F,
    MINMAX_SINK = 0x8030,
    TABLE_TOO_LARGE = 0x8031,
    COLOR_MATRIX = 0x80B1,
    COLOR_MATRIX_STACK_DEPTH = 0x80B2,
    MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3,
    POST_COLOR_MATRIX_RED_SCALE = 0x80B4,
    POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5,
    POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6,
    POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7,
    POST_COLOR_MATRIX_RED_BIAS = 0x80B8,
    POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9,
    POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA,
    POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB,
    COLOR_TABLE = 0x80D0,
    POST_CONVOLUTION_COLOR_TABLE = 0x80D1,
    POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2,
    PROXY_COLOR_TABLE = 0x80D3,
    PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4,
    PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5,
    COLOR_TABLE_SCALE = 0x80D6,
    COLOR_TABLE_BIAS = 0x80D7,
    COLOR_TABLE_FORMAT = 0x80D8,
    COLOR_TABLE_WIDTH = 0x80D9,
    COLOR_TABLE_RED_SIZE = 0x80DA,
    COLOR_TABLE_GREEN_SIZE = 0x80DB,
    COLOR_TABLE_BLUE_SIZE = 0x80DC,
    COLOR_TABLE_ALPHA_SIZE = 0x80DD,
    COLOR_TABLE_LUMINANCE_SIZE = 0x80DE,
    COLOR_TABLE_INTENSITY_SIZE = 0x80DF,
    CONSTANT_BORDER = 0x8151,
    REPLICATE_BORDER = 0x8153,
    CONVOLUTION_BORDER_COLOR = 0x8154
  };
  //Definitions for GL_VERSION_1_3
  enum GL_VERSION_1_3_consts {
    TEXTURE0 = 0x84C0,
    TEXTURE1 = 0x84C1,
    TEXTURE2 = 0x84C2,
    TEXTURE3 = 0x84C3,
    TEXTURE4 = 0x84C4,
    TEXTURE5 = 0x84C5,
    TEXTURE6 = 0x84C6,
    TEXTURE7 = 0x84C7,
    TEXTURE8 = 0x84C8,
    TEXTURE9 = 0x84C9,
    TEXTURE10 = 0x84CA,
    TEXTURE11 = 0x84CB,
    TEXTURE12 = 0x84CC,
    TEXTURE13 = 0x84CD,
    TEXTURE14 = 0x84CE,
    TEXTURE15 = 0x84CF,
    TEXTURE16 = 0x84D0,
    TEXTURE17 = 0x84D1,
    TEXTURE18 = 0x84D2,
    TEXTURE19 = 0x84D3,
    TEXTURE20 = 0x84D4,
    TEXTURE21 = 0x84D5,
    TEXTURE22 = 0x84D6,
    TEXTURE23 = 0x84D7,
    TEXTURE24 = 0x84D8,
    TEXTURE25 = 0x84D9,
    TEXTURE26 = 0x84DA,
    TEXTURE27 = 0x84DB,
    TEXTURE28 = 0x84DC,
    TEXTURE29 = 0x84DD,
    TEXTURE30 = 0x84DE,
    TEXTURE31 = 0x84DF,
    ACTIVE_TEXTURE = 0x84E0,
    CLIENT_ACTIVE_TEXTURE = 0x84E1,
    MAX_TEXTURE_UNITS = 0x84E2,
    TRANSPOSE_MODELVIEW_MATRIX = 0x84E3,
    TRANSPOSE_PROJECTION_MATRIX = 0x84E4,
    TRANSPOSE_TEXTURE_MATRIX = 0x84E5,
    TRANSPOSE_COLOR_MATRIX = 0x84E6,
    MULTISAMPLE = 0x809D,
    SAMPLE_ALPHA_TO_COVERAGE = 0x809E,
    SAMPLE_ALPHA_TO_ONE = 0x809F,
    SAMPLE_COVERAGE = 0x80A0,
    SAMPLE_BUFFERS = 0x80A8,
    SAMPLES = 0x80A9,
    SAMPLE_COVERAGE_VALUE = 0x80AA,
    SAMPLE_COVERAGE_INVERT = 0x80AB,
    MULTISAMPLE_BIT = 0x20000000,
    NORMAL_MAP = 0x8511,
    REFLECTION_MAP = 0x8512,
    TEXTURE_CUBE_MAP = 0x8513,
    TEXTURE_BINDING_CUBE_MAP = 0x8514,
    TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515,
    TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516,
    TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517,
    TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518,
    TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519,
    TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A,
    PROXY_TEXTURE_CUBE_MAP = 0x851B,
    MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
    COMPRESSED_ALPHA = 0x84E9,
    COMPRESSED_LUMINANCE = 0x84EA,
    COMPRESSED_LUMINANCE_ALPHA = 0x84EB,
    COMPRESSED_INTENSITY = 0x84EC,
    COMPRESSED_RGB = 0x84ED,
    COMPRESSED_RGBA = 0x84EE,
    TEXTURE_COMPRESSION_HINT = 0x84EF,
    TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0,
    TEXTURE_COMPRESSED = 0x86A1,
    NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
    COMPRESSED_TEXTURE_FORMATS = 0x86A3,
    CLAMP_TO_BORDER = 0x812D,
    COMBINE = 0x8570,
    COMBINE_RGB = 0x8571,
    COMBINE_ALPHA = 0x8572,
    SOURCE0_RGB = 0x8580,
    SOURCE1_RGB = 0x8581,
    SOURCE2_RGB = 0x8582,
    SOURCE0_ALPHA = 0x8588,
    SOURCE1_ALPHA = 0x8589,
    SOURCE2_ALPHA = 0x858A,
    OPERAND0_RGB = 0x8590,
    OPERAND1_RGB = 0x8591,
    OPERAND2_RGB = 0x8592,
    OPERAND0_ALPHA = 0x8598,
    OPERAND1_ALPHA = 0x8599,
    OPERAND2_ALPHA = 0x859A,
    RGB_SCALE = 0x8573,
    ADD_SIGNED = 0x8574,
    INTERPOLATE = 0x8575,
    SUBTRACT = 0x84E7,
    CONSTANT = 0x8576,
    PRIMARY_COLOR = 0x8577,
    PREVIOUS = 0x8578,
    DOT3_RGB = 0x86AE,
    DOT3_RGBA = 0x86AF
  };
  typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);
  typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
  typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);
  typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);
  typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m);
  typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m);
  typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);
  extern VTK_RENDERING_EXPORT PFNGLACTIVETEXTUREPROC ActiveTexture;
  extern VTK_RENDERING_EXPORT PFNGLCLIENTACTIVETEXTUREPROC ClientActiveTexture;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1DPROC MultiTexCoord1d;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1DVPROC MultiTexCoord1dv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1FPROC MultiTexCoord1f;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1FVPROC MultiTexCoord1fv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1IPROC MultiTexCoord1i;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1IVPROC MultiTexCoord1iv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1SPROC MultiTexCoord1s;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1SVPROC MultiTexCoord1sv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2DPROC MultiTexCoord2d;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2DVPROC MultiTexCoord2dv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2FPROC MultiTexCoord2f;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2FVPROC MultiTexCoord2fv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2IPROC MultiTexCoord2i;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2IVPROC MultiTexCoord2iv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2SPROC MultiTexCoord2s;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2SVPROC MultiTexCoord2sv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3DPROC MultiTexCoord3d;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3DVPROC MultiTexCoord3dv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3FPROC MultiTexCoord3f;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3FVPROC MultiTexCoord3fv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3IPROC MultiTexCoord3i;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3IVPROC MultiTexCoord3iv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3SPROC MultiTexCoord3s;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3SVPROC MultiTexCoord3sv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4DPROC MultiTexCoord4d;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4DVPROC MultiTexCoord4dv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4FPROC MultiTexCoord4f;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4FVPROC MultiTexCoord4fv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4IPROC MultiTexCoord4i;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4IVPROC MultiTexCoord4iv;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4SPROC MultiTexCoord4s;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4SVPROC MultiTexCoord4sv;
  extern VTK_RENDERING_EXPORT PFNGLLOADTRANSPOSEMATRIXFPROC LoadTransposeMatrixf;
  extern VTK_RENDERING_EXPORT PFNGLLOADTRANSPOSEMATRIXDPROC LoadTransposeMatrixd;
  extern VTK_RENDERING_EXPORT PFNGLMULTTRANSPOSEMATRIXFPROC MultTransposeMatrixf;
  extern VTK_RENDERING_EXPORT PFNGLMULTTRANSPOSEMATRIXDPROC MultTransposeMatrixd;
  extern VTK_RENDERING_EXPORT PFNGLSAMPLECOVERAGEPROC SampleCoverage;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DPROC CompressedTexImage3D;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DPROC CompressedTexImage1D;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC CompressedTexSubImage3D;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC CompressedTexSubImage1D;
  extern VTK_RENDERING_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEPROC GetCompressedTexImage;
  //Definitions for GL_VERSION_1_4
  enum GL_VERSION_1_4_consts {
    BLEND_DST_RGB = 0x80C8,
    BLEND_SRC_RGB = 0x80C9,
    BLEND_DST_ALPHA = 0x80CA,
    BLEND_SRC_ALPHA = 0x80CB,
    POINT_SIZE_MIN = 0x8126,
    POINT_SIZE_MAX = 0x8127,
    POINT_FADE_THRESHOLD_SIZE = 0x8128,
    POINT_DISTANCE_ATTENUATION = 0x8129,
    GENERATE_MIPMAP = 0x8191,
    GENERATE_MIPMAP_HINT = 0x8192,
    DEPTH_COMPONENT16 = 0x81A5,
    DEPTH_COMPONENT24 = 0x81A6,
    DEPTH_COMPONENT32 = 0x81A7,
    MIRRORED_REPEAT = 0x8370,
    FOG_COORDINATE_SOURCE = 0x8450,
    FOG_COORDINATE = 0x8451,
    FRAGMENT_DEPTH = 0x8452,
    CURRENT_FOG_COORDINATE = 0x8453,
    FOG_COORDINATE_ARRAY_TYPE = 0x8454,
    FOG_COORDINATE_ARRAY_STRIDE = 0x8455,
    FOG_COORDINATE_ARRAY_POINTER = 0x8456,
    FOG_COORDINATE_ARRAY = 0x8457,
    COLOR_SUM = 0x8458,
    CURRENT_SECONDARY_COLOR = 0x8459,
    SECONDARY_COLOR_ARRAY_SIZE = 0x845A,
    SECONDARY_COLOR_ARRAY_TYPE = 0x845B,
    SECONDARY_COLOR_ARRAY_STRIDE = 0x845C,
    SECONDARY_COLOR_ARRAY_POINTER = 0x845D,
    SECONDARY_COLOR_ARRAY = 0x845E,
    MAX_TEXTURE_LOD_BIAS = 0x84FD,
    TEXTURE_FILTER_CONTROL = 0x8500,
    TEXTURE_LOD_BIAS = 0x8501,
    INCR_WRAP = 0x8507,
    DECR_WRAP = 0x8508,
    TEXTURE_DEPTH_SIZE = 0x884A,
    DEPTH_TEXTURE_MODE = 0x884B,
    TEXTURE_COMPARE_MODE = 0x884C,
    TEXTURE_COMPARE_FUNC = 0x884D,
    COMPARE_R_TO_TEXTURE = 0x884E
  };
  typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  typedef void (APIENTRYP PFNGLFOGCOORDFPROC) (GLfloat coord);
  typedef void (APIENTRYP PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
  typedef void (APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord);
  typedef void (APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
  typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
  typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC) (const GLshort *v);
  extern VTK_RENDERING_EXPORT PFNGLBLENDFUNCSEPARATEPROC BlendFuncSeparate;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDFPROC FogCoordf;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDFVPROC FogCoordfv;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDDPROC FogCoordd;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDDVPROC FogCoorddv;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDPOINTERPROC FogCoordPointer;
  extern VTK_RENDERING_EXPORT PFNGLMULTIDRAWARRAYSPROC MultiDrawArrays;
  extern VTK_RENDERING_EXPORT PFNGLMULTIDRAWELEMENTSPROC MultiDrawElements;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFPROC PointParameterf;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFVPROC PointParameterfv;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERIPROC PointParameteri;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERIVPROC PointParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3BPROC SecondaryColor3b;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3BVPROC SecondaryColor3bv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3DPROC SecondaryColor3d;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3DVPROC SecondaryColor3dv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3FPROC SecondaryColor3f;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3FVPROC SecondaryColor3fv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3IPROC SecondaryColor3i;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3IVPROC SecondaryColor3iv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3SPROC SecondaryColor3s;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3SVPROC SecondaryColor3sv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UBPROC SecondaryColor3ub;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UBVPROC SecondaryColor3ubv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UIPROC SecondaryColor3ui;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UIVPROC SecondaryColor3uiv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3USPROC SecondaryColor3us;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3USVPROC SecondaryColor3usv;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLORPOINTERPROC SecondaryColorPointer;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2DPROC WindowPos2d;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2DVPROC WindowPos2dv;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2FPROC WindowPos2f;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2FVPROC WindowPos2fv;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2IPROC WindowPos2i;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2IVPROC WindowPos2iv;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2SPROC WindowPos2s;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2SVPROC WindowPos2sv;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3DPROC WindowPos3d;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3DVPROC WindowPos3dv;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3FPROC WindowPos3f;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3FVPROC WindowPos3fv;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3IPROC WindowPos3i;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3IVPROC WindowPos3iv;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3SPROC WindowPos3s;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3SVPROC WindowPos3sv;
  //Definitions for GL_VERSION_1_5
  enum GL_VERSION_1_5_consts {
    BUFFER_SIZE = 0x8764,
    BUFFER_USAGE = 0x8765,
    QUERY_COUNTER_BITS = 0x8864,
    CURRENT_QUERY = 0x8865,
    QUERY_RESULT = 0x8866,
    QUERY_RESULT_AVAILABLE = 0x8867,
    ARRAY_BUFFER = 0x8892,
    ELEMENT_ARRAY_BUFFER = 0x8893,
    ARRAY_BUFFER_BINDING = 0x8894,
    ELEMENT_ARRAY_BUFFER_BINDING = 0x8895,
    VERTEX_ARRAY_BUFFER_BINDING = 0x8896,
    NORMAL_ARRAY_BUFFER_BINDING = 0x8897,
    COLOR_ARRAY_BUFFER_BINDING = 0x8898,
    INDEX_ARRAY_BUFFER_BINDING = 0x8899,
    TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A,
    EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B,
    SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C,
    FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D,
    WEIGHT_ARRAY_BUFFER_BINDING = 0x889E,
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,
    READ_ONLY = 0x88B8,
    WRITE_ONLY = 0x88B9,
    READ_WRITE = 0x88BA,
    BUFFER_ACCESS = 0x88BB,
    BUFFER_MAPPED = 0x88BC,
    BUFFER_MAP_POINTER = 0x88BD,
    STREAM_DRAW = 0x88E0,
    STREAM_READ = 0x88E1,
    STREAM_COPY = 0x88E2,
    STATIC_DRAW = 0x88E4,
    STATIC_READ = 0x88E5,
    STATIC_COPY = 0x88E6,
    DYNAMIC_DRAW = 0x88E8,
    DYNAMIC_READ = 0x88E9,
    DYNAMIC_COPY = 0x88EA,
    SAMPLES_PASSED = 0x8914,
    FOG_COORD_SRC = 0x8450,
    FOG_COORD = 0x8451,
    CURRENT_FOG_COORD = 0x8453,
    FOG_COORD_ARRAY_TYPE = 0x8454,
    FOG_COORD_ARRAY_STRIDE = 0x8455,
    FOG_COORD_ARRAY_POINTER = 0x8456,
    FOG_COORD_ARRAY = 0x8457,
    FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D,
    SRC0_RGB = 0x8580,
    SRC1_RGB = 0x8581,
    SRC2_RGB = 0x8582,
    SRC0_ALPHA = 0x8588,
    SRC1_ALPHA = 0x8589,
    SRC2_ALPHA = 0x858A
  };
  typedef ptrdiff_t GLintptr;
  typedef ptrdiff_t GLsizeiptr;
  typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
  typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
  typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
  typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);
  typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
  typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
  typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
  typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
  typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);
  typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
  typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
  typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
  typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
  typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);
  typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *params);
  extern VTK_RENDERING_EXPORT PFNGLGENQUERIESPROC GenQueries;
  extern VTK_RENDERING_EXPORT PFNGLDELETEQUERIESPROC DeleteQueries;
  extern VTK_RENDERING_EXPORT PFNGLISQUERYPROC IsQuery;
  extern VTK_RENDERING_EXPORT PFNGLBEGINQUERYPROC BeginQuery;
  extern VTK_RENDERING_EXPORT PFNGLENDQUERYPROC EndQuery;
  extern VTK_RENDERING_EXPORT PFNGLGETQUERYIVPROC GetQueryiv;
  extern VTK_RENDERING_EXPORT PFNGLGETQUERYOBJECTIVPROC GetQueryObjectiv;
  extern VTK_RENDERING_EXPORT PFNGLGETQUERYOBJECTUIVPROC GetQueryObjectuiv;
  extern VTK_RENDERING_EXPORT PFNGLBINDBUFFERPROC BindBuffer;
  extern VTK_RENDERING_EXPORT PFNGLDELETEBUFFERSPROC DeleteBuffers;
  extern VTK_RENDERING_EXPORT PFNGLGENBUFFERSPROC GenBuffers;
  extern VTK_RENDERING_EXPORT PFNGLISBUFFERPROC IsBuffer;
  extern VTK_RENDERING_EXPORT PFNGLBUFFERDATAPROC BufferData;
  extern VTK_RENDERING_EXPORT PFNGLBUFFERSUBDATAPROC BufferSubData;
  extern VTK_RENDERING_EXPORT PFNGLGETBUFFERSUBDATAPROC GetBufferSubData;
  extern VTK_RENDERING_EXPORT PFNGLMAPBUFFERPROC MapBuffer;
  extern VTK_RENDERING_EXPORT PFNGLUNMAPBUFFERPROC UnmapBuffer;
  extern VTK_RENDERING_EXPORT PFNGLGETBUFFERPARAMETERIVPROC GetBufferParameteriv;
  extern VTK_RENDERING_EXPORT PFNGLGETBUFFERPOINTERVPROC GetBufferPointerv;
  //Definitions for GL_VERSION_2_0
  enum GL_VERSION_2_0_consts {
    BLEND_EQUATION_RGB = 0x8009,
    VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
    VERTEX_ATTRIB_ARRAY_SIZE = 0x8623,
    VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624,
    VERTEX_ATTRIB_ARRAY_TYPE = 0x8625,
    CURRENT_VERTEX_ATTRIB = 0x8626,
    VERTEX_PROGRAM_POINT_SIZE = 0x8642,
    VERTEX_PROGRAM_TWO_SIDE = 0x8643,
    VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,
    STENCIL_BACK_FUNC = 0x8800,
    STENCIL_BACK_FAIL = 0x8801,
    STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802,
    STENCIL_BACK_PASS_DEPTH_PASS = 0x8803,
    MAX_DRAW_BUFFERS = 0x8824,
    DRAW_BUFFER0 = 0x8825,
    DRAW_BUFFER1 = 0x8826,
    DRAW_BUFFER2 = 0x8827,
    DRAW_BUFFER3 = 0x8828,
    DRAW_BUFFER4 = 0x8829,
    DRAW_BUFFER5 = 0x882A,
    DRAW_BUFFER6 = 0x882B,
    DRAW_BUFFER7 = 0x882C,
    DRAW_BUFFER8 = 0x882D,
    DRAW_BUFFER9 = 0x882E,
    DRAW_BUFFER10 = 0x882F,
    DRAW_BUFFER11 = 0x8830,
    DRAW_BUFFER12 = 0x8831,
    DRAW_BUFFER13 = 0x8832,
    DRAW_BUFFER14 = 0x8833,
    DRAW_BUFFER15 = 0x8834,
    BLEND_EQUATION_ALPHA = 0x883D,
    POINT_SPRITE = 0x8861,
    COORD_REPLACE = 0x8862,
    MAX_VERTEX_ATTRIBS = 0x8869,
    VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
    MAX_TEXTURE_COORDS = 0x8871,
    MAX_TEXTURE_IMAGE_UNITS = 0x8872,
    FRAGMENT_SHADER = 0x8B30,
    VERTEX_SHADER = 0x8B31,
    MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
    MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,
    MAX_VARYING_FLOATS = 0x8B4B,
    MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
    MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
    SHADER_TYPE = 0x8B4F,
    FLOAT_VEC2 = 0x8B50,
    FLOAT_VEC3 = 0x8B51,
    FLOAT_VEC4 = 0x8B52,
    INT_VEC2 = 0x8B53,
    INT_VEC3 = 0x8B54,
    INT_VEC4 = 0x8B55,
    BOOL = 0x8B56,
    BOOL_VEC2 = 0x8B57,
    BOOL_VEC3 = 0x8B58,
    BOOL_VEC4 = 0x8B59,
    FLOAT_MAT2 = 0x8B5A,
    FLOAT_MAT3 = 0x8B5B,
    FLOAT_MAT4 = 0x8B5C,
    SAMPLER_1D = 0x8B5D,
    SAMPLER_2D = 0x8B5E,
    SAMPLER_3D = 0x8B5F,
    SAMPLER_CUBE = 0x8B60,
    SAMPLER_1D_SHADOW = 0x8B61,
    SAMPLER_2D_SHADOW = 0x8B62,
    DELETE_STATUS = 0x8B80,
    COMPILE_STATUS = 0x8B81,
    LINK_STATUS = 0x8B82,
    VALIDATE_STATUS = 0x8B83,
    INFO_LOG_LENGTH = 0x8B84,
    ATTACHED_SHADERS = 0x8B85,
    ACTIVE_UNIFORMS = 0x8B86,
    ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87,
    SHADER_SOURCE_LENGTH = 0x8B88,
    ACTIVE_ATTRIBUTES = 0x8B89,
    ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A,
    FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
    SHADING_LANGUAGE_VERSION = 0x8B8C,
    CURRENT_PROGRAM = 0x8B8D,
    POINT_SPRITE_COORD_ORIGIN = 0x8CA0,
    LOWER_LEFT = 0x8CA1,
    UPPER_LEFT = 0x8CA2,
    STENCIL_BACK_REF = 0x8CA3,
    STENCIL_BACK_VALUE_MASK = 0x8CA4,
    STENCIL_BACK_WRITEMASK = 0x8CA5
  };
  typedef char GLchar;                    /* native character */
  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
  typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
  typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
  typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
  typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
  typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
  typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
  typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);
  typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);
  typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
  typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);
  typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
  typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
  typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
  typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
  typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
  typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
  typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
  typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
  typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
  typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
  typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
  typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);
  typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);
  typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
  typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
  typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);
  typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
  typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
  typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
  typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
  typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
  typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLBLENDEQUATIONSEPARATEPROC BlendEquationSeparate;
  extern VTK_RENDERING_EXPORT PFNGLDRAWBUFFERSPROC DrawBuffers;
  extern VTK_RENDERING_EXPORT PFNGLSTENCILOPSEPARATEPROC StencilOpSeparate;
  extern VTK_RENDERING_EXPORT PFNGLSTENCILFUNCSEPARATEPROC StencilFuncSeparate;
  extern VTK_RENDERING_EXPORT PFNGLSTENCILMASKSEPARATEPROC StencilMaskSeparate;
  extern VTK_RENDERING_EXPORT PFNGLATTACHSHADERPROC AttachShader;
  extern VTK_RENDERING_EXPORT PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation;
  extern VTK_RENDERING_EXPORT PFNGLCOMPILESHADERPROC CompileShader;
  extern VTK_RENDERING_EXPORT PFNGLCREATEPROGRAMPROC CreateProgram;
  extern VTK_RENDERING_EXPORT PFNGLCREATESHADERPROC CreateShader;
  extern VTK_RENDERING_EXPORT PFNGLDELETEPROGRAMPROC DeleteProgram;
  extern VTK_RENDERING_EXPORT PFNGLDELETESHADERPROC DeleteShader;
  extern VTK_RENDERING_EXPORT PFNGLDETACHSHADERPROC DetachShader;
  extern VTK_RENDERING_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;
  extern VTK_RENDERING_EXPORT PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;
  extern VTK_RENDERING_EXPORT PFNGLGETACTIVEATTRIBPROC GetActiveAttrib;
  extern VTK_RENDERING_EXPORT PFNGLGETACTIVEUNIFORMPROC GetActiveUniform;
  extern VTK_RENDERING_EXPORT PFNGLGETATTACHEDSHADERSPROC GetAttachedShaders;
  extern VTK_RENDERING_EXPORT PFNGLGETATTRIBLOCATIONPROC GetAttribLocation;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMIVPROC GetProgramiv;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;
  extern VTK_RENDERING_EXPORT PFNGLGETSHADERIVPROC GetShaderiv;
  extern VTK_RENDERING_EXPORT PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;
  extern VTK_RENDERING_EXPORT PFNGLGETSHADERSOURCEPROC GetShaderSource;
  extern VTK_RENDERING_EXPORT PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation;
  extern VTK_RENDERING_EXPORT PFNGLGETUNIFORMFVPROC GetUniformfv;
  extern VTK_RENDERING_EXPORT PFNGLGETUNIFORMIVPROC GetUniformiv;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBDVPROC GetVertexAttribdv;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBFVPROC GetVertexAttribfv;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBIVPROC GetVertexAttribiv;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBPOINTERVPROC GetVertexAttribPointerv;
  extern VTK_RENDERING_EXPORT PFNGLISPROGRAMPROC IsProgram;
  extern VTK_RENDERING_EXPORT PFNGLISSHADERPROC IsShader;
  extern VTK_RENDERING_EXPORT PFNGLLINKPROGRAMPROC LinkProgram;
  extern VTK_RENDERING_EXPORT PFNGLSHADERSOURCEPROC ShaderSource;
  extern VTK_RENDERING_EXPORT PFNGLUSEPROGRAMPROC UseProgram;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1FPROC Uniform1f;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2FPROC Uniform2f;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3FPROC Uniform3f;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4FPROC Uniform4f;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1IPROC Uniform1i;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2IPROC Uniform2i;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3IPROC Uniform3i;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4IPROC Uniform4i;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1FVPROC Uniform1fv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2FVPROC Uniform2fv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3FVPROC Uniform3fv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4FVPROC Uniform4fv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1IVPROC Uniform1iv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2IVPROC Uniform2iv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3IVPROC Uniform3iv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4IVPROC Uniform4iv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORMMATRIX2FVPROC UniformMatrix2fv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORMMATRIX3FVPROC UniformMatrix3fv;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv;
  extern VTK_RENDERING_EXPORT PFNGLVALIDATEPROGRAMPROC ValidateProgram;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1DPROC VertexAttrib1d;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1DVPROC VertexAttrib1dv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1FPROC VertexAttrib1f;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1FVPROC VertexAttrib1fv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1SPROC VertexAttrib1s;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1SVPROC VertexAttrib1sv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2DPROC VertexAttrib2d;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2DVPROC VertexAttrib2dv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2FPROC VertexAttrib2f;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2FVPROC VertexAttrib2fv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2SPROC VertexAttrib2s;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2SVPROC VertexAttrib2sv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3DPROC VertexAttrib3d;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3DVPROC VertexAttrib3dv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3FPROC VertexAttrib3f;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3FVPROC VertexAttrib3fv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3SPROC VertexAttrib3s;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3SVPROC VertexAttrib3sv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NBVPROC VertexAttrib4Nbv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NIVPROC VertexAttrib4Niv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NSVPROC VertexAttrib4Nsv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUBPROC VertexAttrib4Nub;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUBVPROC VertexAttrib4Nubv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUIVPROC VertexAttrib4Nuiv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUSVPROC VertexAttrib4Nusv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4BVPROC VertexAttrib4bv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4DPROC VertexAttrib4d;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4DVPROC VertexAttrib4dv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4FPROC VertexAttrib4f;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4FVPROC VertexAttrib4fv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4IVPROC VertexAttrib4iv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4SPROC VertexAttrib4s;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4SVPROC VertexAttrib4sv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4UBVPROC VertexAttrib4ubv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4UIVPROC VertexAttrib4uiv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4USVPROC VertexAttrib4usv;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer;
  //Definitions for GL_ARB_multitexture
  enum GL_ARB_multitexture_consts {
    TEXTURE0_ARB = 0x84C0,
    TEXTURE1_ARB = 0x84C1,
    TEXTURE2_ARB = 0x84C2,
    TEXTURE3_ARB = 0x84C3,
    TEXTURE4_ARB = 0x84C4,
    TEXTURE5_ARB = 0x84C5,
    TEXTURE6_ARB = 0x84C6,
    TEXTURE7_ARB = 0x84C7,
    TEXTURE8_ARB = 0x84C8,
    TEXTURE9_ARB = 0x84C9,
    TEXTURE10_ARB = 0x84CA,
    TEXTURE11_ARB = 0x84CB,
    TEXTURE12_ARB = 0x84CC,
    TEXTURE13_ARB = 0x84CD,
    TEXTURE14_ARB = 0x84CE,
    TEXTURE15_ARB = 0x84CF,
    TEXTURE16_ARB = 0x84D0,
    TEXTURE17_ARB = 0x84D1,
    TEXTURE18_ARB = 0x84D2,
    TEXTURE19_ARB = 0x84D3,
    TEXTURE20_ARB = 0x84D4,
    TEXTURE21_ARB = 0x84D5,
    TEXTURE22_ARB = 0x84D6,
    TEXTURE23_ARB = 0x84D7,
    TEXTURE24_ARB = 0x84D8,
    TEXTURE25_ARB = 0x84D9,
    TEXTURE26_ARB = 0x84DA,
    TEXTURE27_ARB = 0x84DB,
    TEXTURE28_ARB = 0x84DC,
    TEXTURE29_ARB = 0x84DD,
    TEXTURE30_ARB = 0x84DE,
    TEXTURE31_ARB = 0x84DF,
    ACTIVE_TEXTURE_ARB = 0x84E0,
    CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1,
    MAX_TEXTURE_UNITS_ARB = 0x84E2
  };
  typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
  typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
  extern VTK_RENDERING_EXPORT PFNGLACTIVETEXTUREARBPROC ActiveTextureARB;
  extern VTK_RENDERING_EXPORT PFNGLCLIENTACTIVETEXTUREARBPROC ClientActiveTextureARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1DARBPROC MultiTexCoord1dARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1DVARBPROC MultiTexCoord1dvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1FARBPROC MultiTexCoord1fARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1FVARBPROC MultiTexCoord1fvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1IARBPROC MultiTexCoord1iARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1IVARBPROC MultiTexCoord1ivARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1SARBPROC MultiTexCoord1sARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1SVARBPROC MultiTexCoord1svARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2DARBPROC MultiTexCoord2dARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2DVARBPROC MultiTexCoord2dvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2FARBPROC MultiTexCoord2fARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2FVARBPROC MultiTexCoord2fvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2IARBPROC MultiTexCoord2iARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2IVARBPROC MultiTexCoord2ivARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2SARBPROC MultiTexCoord2sARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2SVARBPROC MultiTexCoord2svARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3DARBPROC MultiTexCoord3dARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3DVARBPROC MultiTexCoord3dvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3FARBPROC MultiTexCoord3fARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3FVARBPROC MultiTexCoord3fvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3IARBPROC MultiTexCoord3iARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3IVARBPROC MultiTexCoord3ivARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3SARBPROC MultiTexCoord3sARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3SVARBPROC MultiTexCoord3svARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4DARBPROC MultiTexCoord4dARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4DVARBPROC MultiTexCoord4dvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4FARBPROC MultiTexCoord4fARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4FVARBPROC MultiTexCoord4fvARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4IARBPROC MultiTexCoord4iARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4IVARBPROC MultiTexCoord4ivARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4SARBPROC MultiTexCoord4sARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4SVARBPROC MultiTexCoord4svARB;
  //Definitions for GL_ARB_transpose_matrix
  enum GL_ARB_transpose_matrix_consts {
    TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3,
    TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4,
    TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5,
    TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6
  };
  typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
  typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
  typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
  typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
  extern VTK_RENDERING_EXPORT PFNGLLOADTRANSPOSEMATRIXFARBPROC LoadTransposeMatrixfARB;
  extern VTK_RENDERING_EXPORT PFNGLLOADTRANSPOSEMATRIXDARBPROC LoadTransposeMatrixdARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTTRANSPOSEMATRIXFARBPROC MultTransposeMatrixfARB;
  extern VTK_RENDERING_EXPORT PFNGLMULTTRANSPOSEMATRIXDARBPROC MultTransposeMatrixdARB;
  //Definitions for GL_ARB_multisample
  enum GL_ARB_multisample_consts {
    MULTISAMPLE_ARB = 0x809D,
    SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E,
    SAMPLE_ALPHA_TO_ONE_ARB = 0x809F,
    SAMPLE_COVERAGE_ARB = 0x80A0,
    SAMPLE_BUFFERS_ARB = 0x80A8,
    SAMPLES_ARB = 0x80A9,
    SAMPLE_COVERAGE_VALUE_ARB = 0x80AA,
    SAMPLE_COVERAGE_INVERT_ARB = 0x80AB,
    MULTISAMPLE_BIT_ARB = 0x20000000
  };
  typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
  extern VTK_RENDERING_EXPORT PFNGLSAMPLECOVERAGEARBPROC SampleCoverageARB;
  //Definitions for GL_ARB_texture_env_add
  //Definitions for GL_ARB_texture_cube_map
  enum GL_ARB_texture_cube_map_consts {
    NORMAL_MAP_ARB = 0x8511,
    REFLECTION_MAP_ARB = 0x8512,
    TEXTURE_CUBE_MAP_ARB = 0x8513,
    TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514,
    TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515,
    TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516,
    TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517,
    TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518,
    TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519,
    TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A,
    PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B,
    MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C
  };
  //Definitions for GL_ARB_texture_compression
  enum GL_ARB_texture_compression_consts {
    COMPRESSED_ALPHA_ARB = 0x84E9,
    COMPRESSED_LUMINANCE_ARB = 0x84EA,
    COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB,
    COMPRESSED_INTENSITY_ARB = 0x84EC,
    COMPRESSED_RGB_ARB = 0x84ED,
    COMPRESSED_RGBA_ARB = 0x84EE,
    TEXTURE_COMPRESSION_HINT_ARB = 0x84EF,
    TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0,
    TEXTURE_COMPRESSED_ARB = 0x86A1,
    NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2,
    COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3
  };
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
  typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, GLvoid *img);
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXIMAGE3DARBPROC CompressedTexImage3DARB;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXIMAGE2DARBPROC CompressedTexImage2DARB;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXIMAGE1DARBPROC CompressedTexImage1DARB;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC CompressedTexSubImage3DARB;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC CompressedTexSubImage2DARB;
  extern VTK_RENDERING_EXPORT PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC CompressedTexSubImage1DARB;
  extern VTK_RENDERING_EXPORT PFNGLGETCOMPRESSEDTEXIMAGEARBPROC GetCompressedTexImageARB;
  //Definitions for GL_ARB_texture_border_clamp
  enum GL_ARB_texture_border_clamp_consts {
    CLAMP_TO_BORDER_ARB = 0x812D
  };
  //Definitions for GL_ARB_point_parameters
  enum GL_ARB_point_parameters_consts {
    POINT_SIZE_MIN_ARB = 0x8126,
    POINT_SIZE_MAX_ARB = 0x8127,
    POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128,
    POINT_DISTANCE_ATTENUATION_ARB = 0x8129
  };
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFARBPROC PointParameterfARB;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFVARBPROC PointParameterfvARB;
  //Definitions for GL_ARB_vertex_blend
  enum GL_ARB_vertex_blend_consts {
    MAX_VERTEX_UNITS_ARB = 0x86A4,
    ACTIVE_VERTEX_UNITS_ARB = 0x86A5,
    WEIGHT_SUM_UNITY_ARB = 0x86A6,
    VERTEX_BLEND_ARB = 0x86A7,
    CURRENT_WEIGHT_ARB = 0x86A8,
    WEIGHT_ARRAY_TYPE_ARB = 0x86A9,
    WEIGHT_ARRAY_STRIDE_ARB = 0x86AA,
    WEIGHT_ARRAY_SIZE_ARB = 0x86AB,
    WEIGHT_ARRAY_POINTER_ARB = 0x86AC,
    WEIGHT_ARRAY_ARB = 0x86AD,
    MODELVIEW0_ARB = 0x1700,
    MODELVIEW1_ARB = 0x850A,
    MODELVIEW2_ARB = 0x8722,
    MODELVIEW3_ARB = 0x8723,
    MODELVIEW4_ARB = 0x8724,
    MODELVIEW5_ARB = 0x8725,
    MODELVIEW6_ARB = 0x8726,
    MODELVIEW7_ARB = 0x8727,
    MODELVIEW8_ARB = 0x8728,
    MODELVIEW9_ARB = 0x8729,
    MODELVIEW10_ARB = 0x872A,
    MODELVIEW11_ARB = 0x872B,
    MODELVIEW12_ARB = 0x872C,
    MODELVIEW13_ARB = 0x872D,
    MODELVIEW14_ARB = 0x872E,
    MODELVIEW15_ARB = 0x872F,
    MODELVIEW16_ARB = 0x8730,
    MODELVIEW17_ARB = 0x8731,
    MODELVIEW18_ARB = 0x8732,
    MODELVIEW19_ARB = 0x8733,
    MODELVIEW20_ARB = 0x8734,
    MODELVIEW21_ARB = 0x8735,
    MODELVIEW22_ARB = 0x8736,
    MODELVIEW23_ARB = 0x8737,
    MODELVIEW24_ARB = 0x8738,
    MODELVIEW25_ARB = 0x8739,
    MODELVIEW26_ARB = 0x873A,
    MODELVIEW27_ARB = 0x873B,
    MODELVIEW28_ARB = 0x873C,
    MODELVIEW29_ARB = 0x873D,
    MODELVIEW30_ARB = 0x873E,
    MODELVIEW31_ARB = 0x873F
  };
  typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
  typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
  typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
  typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
  typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
  typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
  typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
  typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
  typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count);
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTBVARBPROC WeightbvARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTSVARBPROC WeightsvARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTIVARBPROC WeightivARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTFVARBPROC WeightfvARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTDVARBPROC WeightdvARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTUBVARBPROC WeightubvARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTUSVARBPROC WeightusvARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTUIVARBPROC WeightuivARB;
  extern VTK_RENDERING_EXPORT PFNGLWEIGHTPOINTERARBPROC WeightPointerARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXBLENDARBPROC VertexBlendARB;
  //Definitions for GL_ARB_matrix_palette
  enum GL_ARB_matrix_palette_consts {
    MATRIX_PALETTE_ARB = 0x8840,
    MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841,
    MAX_PALETTE_MATRICES_ARB = 0x8842,
    CURRENT_PALETTE_MATRIX_ARB = 0x8843,
    MATRIX_INDEX_ARRAY_ARB = 0x8844,
    CURRENT_MATRIX_INDEX_ARB = 0x8845,
    MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846,
    MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847,
    MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848,
    MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849
  };
  typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
  typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
  typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
  typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
  typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLCURRENTPALETTEMATRIXARBPROC CurrentPaletteMatrixARB;
  extern VTK_RENDERING_EXPORT PFNGLMATRIXINDEXUBVARBPROC MatrixIndexubvARB;
  extern VTK_RENDERING_EXPORT PFNGLMATRIXINDEXUSVARBPROC MatrixIndexusvARB;
  extern VTK_RENDERING_EXPORT PFNGLMATRIXINDEXUIVARBPROC MatrixIndexuivARB;
  extern VTK_RENDERING_EXPORT PFNGLMATRIXINDEXPOINTERARBPROC MatrixIndexPointerARB;
  //Definitions for GL_ARB_texture_env_combine
  enum GL_ARB_texture_env_combine_consts {
    COMBINE_ARB = 0x8570,
    COMBINE_RGB_ARB = 0x8571,
    COMBINE_ALPHA_ARB = 0x8572,
    SOURCE0_RGB_ARB = 0x8580,
    SOURCE1_RGB_ARB = 0x8581,
    SOURCE2_RGB_ARB = 0x8582,
    SOURCE0_ALPHA_ARB = 0x8588,
    SOURCE1_ALPHA_ARB = 0x8589,
    SOURCE2_ALPHA_ARB = 0x858A,
    OPERAND0_RGB_ARB = 0x8590,
    OPERAND1_RGB_ARB = 0x8591,
    OPERAND2_RGB_ARB = 0x8592,
    OPERAND0_ALPHA_ARB = 0x8598,
    OPERAND1_ALPHA_ARB = 0x8599,
    OPERAND2_ALPHA_ARB = 0x859A,
    RGB_SCALE_ARB = 0x8573,
    ADD_SIGNED_ARB = 0x8574,
    INTERPOLATE_ARB = 0x8575,
    SUBTRACT_ARB = 0x84E7,
    CONSTANT_ARB = 0x8576,
    PRIMARY_COLOR_ARB = 0x8577,
    PREVIOUS_ARB = 0x8578
  };
  //Definitions for GL_ARB_texture_env_crossbar
  //Definitions for GL_ARB_texture_env_dot3
  enum GL_ARB_texture_env_dot3_consts {
    DOT3_RGB_ARB = 0x86AE,
    DOT3_RGBA_ARB = 0x86AF
  };
  //Definitions for GL_ARB_texture_mirrored_repeat
  enum GL_ARB_texture_mirrored_repeat_consts {
    MIRRORED_REPEAT_ARB = 0x8370
  };
  //Definitions for GL_ARB_depth_texture
  enum GL_ARB_depth_texture_consts {
    DEPTH_COMPONENT16_ARB = 0x81A5,
    DEPTH_COMPONENT24_ARB = 0x81A6,
    DEPTH_COMPONENT32_ARB = 0x81A7,
    TEXTURE_DEPTH_SIZE_ARB = 0x884A,
    DEPTH_TEXTURE_MODE_ARB = 0x884B
  };
  //Definitions for GL_ARB_shadow
  enum GL_ARB_shadow_consts {
    TEXTURE_COMPARE_MODE_ARB = 0x884C,
    TEXTURE_COMPARE_FUNC_ARB = 0x884D,
    COMPARE_R_TO_TEXTURE_ARB = 0x884E
  };
  //Definitions for GL_ARB_shadow_ambient
  enum GL_ARB_shadow_ambient_consts {
    TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF
  };
  //Definitions for GL_ARB_window_pos
  typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2DARBPROC WindowPos2dARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2DVARBPROC WindowPos2dvARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2FARBPROC WindowPos2fARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2FVARBPROC WindowPos2fvARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2IARBPROC WindowPos2iARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2IVARBPROC WindowPos2ivARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2SARBPROC WindowPos2sARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2SVARBPROC WindowPos2svARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3DARBPROC WindowPos3dARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3DVARBPROC WindowPos3dvARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3FARBPROC WindowPos3fARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3FVARBPROC WindowPos3fvARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3IARBPROC WindowPos3iARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3IVARBPROC WindowPos3ivARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3SARBPROC WindowPos3sARB;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3SVARBPROC WindowPos3svARB;
  //Definitions for GL_ARB_vertex_program
  enum GL_ARB_vertex_program_consts {
    COLOR_SUM_ARB = 0x8458,
    VERTEX_PROGRAM_ARB = 0x8620,
    VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622,
    VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623,
    VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624,
    VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625,
    CURRENT_VERTEX_ATTRIB_ARB = 0x8626,
    PROGRAM_LENGTH_ARB = 0x8627,
    PROGRAM_STRING_ARB = 0x8628,
    MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E,
    MAX_PROGRAM_MATRICES_ARB = 0x862F,
    CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640,
    CURRENT_MATRIX_ARB = 0x8641,
    VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642,
    VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643,
    VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645,
    PROGRAM_ERROR_POSITION_ARB = 0x864B,
    PROGRAM_BINDING_ARB = 0x8677,
    MAX_VERTEX_ATTRIBS_ARB = 0x8869,
    VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A,
    PROGRAM_ERROR_STRING_ARB = 0x8874,
    PROGRAM_FORMAT_ASCII_ARB = 0x8875,
    PROGRAM_FORMAT_ARB = 0x8876,
    PROGRAM_INSTRUCTIONS_ARB = 0x88A0,
    MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1,
    PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2,
    MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3,
    PROGRAM_TEMPORARIES_ARB = 0x88A4,
    MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5,
    PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6,
    MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7,
    PROGRAM_PARAMETERS_ARB = 0x88A8,
    MAX_PROGRAM_PARAMETERS_ARB = 0x88A9,
    PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA,
    MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB,
    PROGRAM_ATTRIBS_ARB = 0x88AC,
    MAX_PROGRAM_ATTRIBS_ARB = 0x88AD,
    PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE,
    MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF,
    PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0,
    MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1,
    PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2,
    MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3,
    MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4,
    MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5,
    PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6,
    TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7,
    MATRIX0_ARB = 0x88C0,
    MATRIX1_ARB = 0x88C1,
    MATRIX2_ARB = 0x88C2,
    MATRIX3_ARB = 0x88C3,
    MATRIX4_ARB = 0x88C4,
    MATRIX5_ARB = 0x88C5,
    MATRIX6_ARB = 0x88C6,
    MATRIX7_ARB = 0x88C7,
    MATRIX8_ARB = 0x88C8,
    MATRIX9_ARB = 0x88C9,
    MATRIX10_ARB = 0x88CA,
    MATRIX11_ARB = 0x88CB,
    MATRIX12_ARB = 0x88CC,
    MATRIX13_ARB = 0x88CD,
    MATRIX14_ARB = 0x88CE,
    MATRIX15_ARB = 0x88CF,
    MATRIX16_ARB = 0x88D0,
    MATRIX17_ARB = 0x88D1,
    MATRIX18_ARB = 0x88D2,
    MATRIX19_ARB = 0x88D3,
    MATRIX20_ARB = 0x88D4,
    MATRIX21_ARB = 0x88D5,
    MATRIX22_ARB = 0x88D6,
    MATRIX23_ARB = 0x88D7,
    MATRIX24_ARB = 0x88D8,
    MATRIX25_ARB = 0x88D9,
    MATRIX26_ARB = 0x88DA,
    MATRIX27_ARB = 0x88DB,
    MATRIX28_ARB = 0x88DC,
    MATRIX29_ARB = 0x88DD,
    MATRIX30_ARB = 0x88DE,
    MATRIX31_ARB = 0x88DF
  };
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
  typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
  typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
  typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
  typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
  typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
  typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
  typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
  typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
  typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, GLvoid *string);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
  typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program);
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1DARBPROC VertexAttrib1dARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1DVARBPROC VertexAttrib1dvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1FARBPROC VertexAttrib1fARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1FVARBPROC VertexAttrib1fvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1SARBPROC VertexAttrib1sARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1SVARBPROC VertexAttrib1svARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2DARBPROC VertexAttrib2dARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2DVARBPROC VertexAttrib2dvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2FARBPROC VertexAttrib2fARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2FVARBPROC VertexAttrib2fvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2SARBPROC VertexAttrib2sARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2SVARBPROC VertexAttrib2svARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3DARBPROC VertexAttrib3dARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3DVARBPROC VertexAttrib3dvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3FARBPROC VertexAttrib3fARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3FVARBPROC VertexAttrib3fvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3SARBPROC VertexAttrib3sARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3SVARBPROC VertexAttrib3svARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NBVARBPROC VertexAttrib4NbvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NIVARBPROC VertexAttrib4NivARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NSVARBPROC VertexAttrib4NsvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUBARBPROC VertexAttrib4NubARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUBVARBPROC VertexAttrib4NubvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUIVARBPROC VertexAttrib4NuivARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4NUSVARBPROC VertexAttrib4NusvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4BVARBPROC VertexAttrib4bvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4DARBPROC VertexAttrib4dARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4DVARBPROC VertexAttrib4dvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4FARBPROC VertexAttrib4fARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4FVARBPROC VertexAttrib4fvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4IVARBPROC VertexAttrib4ivARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4SARBPROC VertexAttrib4sARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4SVARBPROC VertexAttrib4svARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4UBVARBPROC VertexAttrib4ubvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4UIVARBPROC VertexAttrib4uivARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4USVARBPROC VertexAttrib4usvARB;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBPOINTERARBPROC VertexAttribPointerARB;
  extern VTK_RENDERING_EXPORT PFNGLENABLEVERTEXATTRIBARRAYARBPROC EnableVertexAttribArrayARB;
  extern VTK_RENDERING_EXPORT PFNGLDISABLEVERTEXATTRIBARRAYARBPROC DisableVertexAttribArrayARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMSTRINGARBPROC ProgramStringARB;
  extern VTK_RENDERING_EXPORT PFNGLBINDPROGRAMARBPROC BindProgramARB;
  extern VTK_RENDERING_EXPORT PFNGLDELETEPROGRAMSARBPROC DeleteProgramsARB;
  extern VTK_RENDERING_EXPORT PFNGLGENPROGRAMSARBPROC GenProgramsARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMENVPARAMETER4DARBPROC ProgramEnvParameter4dARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMENVPARAMETER4DVARBPROC ProgramEnvParameter4dvARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMENVPARAMETER4FARBPROC ProgramEnvParameter4fARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMENVPARAMETER4FVARBPROC ProgramEnvParameter4fvARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMLOCALPARAMETER4DARBPROC ProgramLocalParameter4dARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMLOCALPARAMETER4DVARBPROC ProgramLocalParameter4dvARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMLOCALPARAMETER4FARBPROC ProgramLocalParameter4fARB;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMLOCALPARAMETER4FVARBPROC ProgramLocalParameter4fvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMENVPARAMETERDVARBPROC GetProgramEnvParameterdvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMENVPARAMETERFVARBPROC GetProgramEnvParameterfvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GetProgramLocalParameterdvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GetProgramLocalParameterfvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMIVARBPROC GetProgramivARB;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMSTRINGARBPROC GetProgramStringARB;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBDVARBPROC GetVertexAttribdvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBFVARBPROC GetVertexAttribfvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBIVARBPROC GetVertexAttribivARB;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBPOINTERVARBPROC GetVertexAttribPointervARB;
  extern VTK_RENDERING_EXPORT PFNGLISPROGRAMARBPROC IsProgramARB;
  //Definitions for GL_ARB_fragment_program
  enum GL_ARB_fragment_program_consts {
    FRAGMENT_PROGRAM_ARB = 0x8804,
    PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805,
    PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806,
    PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807,
    PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808,
    PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809,
    PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A,
    MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B,
    MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C,
    MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D,
    MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E,
    MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F,
    MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810,
    MAX_TEXTURE_COORDS_ARB = 0x8871,
    MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872
  };
  //Definitions for GL_ARB_vertex_buffer_object
  enum GL_ARB_vertex_buffer_object_consts {
    BUFFER_SIZE_ARB = 0x8764,
    BUFFER_USAGE_ARB = 0x8765,
    ARRAY_BUFFER_ARB = 0x8892,
    ELEMENT_ARRAY_BUFFER_ARB = 0x8893,
    ARRAY_BUFFER_BINDING_ARB = 0x8894,
    ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895,
    VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896,
    NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897,
    COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898,
    INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899,
    TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A,
    EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B,
    SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C,
    FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D,
    WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E,
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F,
    READ_ONLY_ARB = 0x88B8,
    WRITE_ONLY_ARB = 0x88B9,
    READ_WRITE_ARB = 0x88BA,
    BUFFER_ACCESS_ARB = 0x88BB,
    BUFFER_MAPPED_ARB = 0x88BC,
    BUFFER_MAP_POINTER_ARB = 0x88BD,
    STREAM_DRAW_ARB = 0x88E0,
    STREAM_READ_ARB = 0x88E1,
    STREAM_COPY_ARB = 0x88E2,
    STATIC_DRAW_ARB = 0x88E4,
    STATIC_READ_ARB = 0x88E5,
    STATIC_COPY_ARB = 0x88E6,
    DYNAMIC_DRAW_ARB = 0x88E8,
    DYNAMIC_READ_ARB = 0x88E9,
    DYNAMIC_COPY_ARB = 0x88EA
  };
  typedef ptrdiff_t GLintptrARB;
  typedef ptrdiff_t GLsizeiptrARB;
  typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
  typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
  typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
  typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer);
  typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
  typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
  typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
  typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
  typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target);
  typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid* *params);
  extern VTK_RENDERING_EXPORT PFNGLBINDBUFFERARBPROC BindBufferARB;
  extern VTK_RENDERING_EXPORT PFNGLDELETEBUFFERSARBPROC DeleteBuffersARB;
  extern VTK_RENDERING_EXPORT PFNGLGENBUFFERSARBPROC GenBuffersARB;
  extern VTK_RENDERING_EXPORT PFNGLISBUFFERARBPROC IsBufferARB;
  extern VTK_RENDERING_EXPORT PFNGLBUFFERDATAARBPROC BufferDataARB;
  extern VTK_RENDERING_EXPORT PFNGLBUFFERSUBDATAARBPROC BufferSubDataARB;
  extern VTK_RENDERING_EXPORT PFNGLGETBUFFERSUBDATAARBPROC GetBufferSubDataARB;
  extern VTK_RENDERING_EXPORT PFNGLMAPBUFFERARBPROC MapBufferARB;
  extern VTK_RENDERING_EXPORT PFNGLUNMAPBUFFERARBPROC UnmapBufferARB;
  extern VTK_RENDERING_EXPORT PFNGLGETBUFFERPARAMETERIVARBPROC GetBufferParameterivARB;
  extern VTK_RENDERING_EXPORT PFNGLGETBUFFERPOINTERVARBPROC GetBufferPointervARB;
  //Definitions for GL_ARB_occlusion_query
  enum GL_ARB_occlusion_query_consts {
    QUERY_COUNTER_BITS_ARB = 0x8864,
    CURRENT_QUERY_ARB = 0x8865,
    QUERY_RESULT_ARB = 0x8866,
    QUERY_RESULT_AVAILABLE_ARB = 0x8867,
    SAMPLES_PASSED_ARB = 0x8914
  };
  typedef void (APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);
  typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);
  typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
  typedef void (APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target);
  typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);
  extern VTK_RENDERING_EXPORT PFNGLGENQUERIESARBPROC GenQueriesARB;
  extern VTK_RENDERING_EXPORT PFNGLDELETEQUERIESARBPROC DeleteQueriesARB;
  extern VTK_RENDERING_EXPORT PFNGLISQUERYARBPROC IsQueryARB;
  extern VTK_RENDERING_EXPORT PFNGLBEGINQUERYARBPROC BeginQueryARB;
  extern VTK_RENDERING_EXPORT PFNGLENDQUERYARBPROC EndQueryARB;
  extern VTK_RENDERING_EXPORT PFNGLGETQUERYIVARBPROC GetQueryivARB;
  extern VTK_RENDERING_EXPORT PFNGLGETQUERYOBJECTIVARBPROC GetQueryObjectivARB;
  extern VTK_RENDERING_EXPORT PFNGLGETQUERYOBJECTUIVARBPROC GetQueryObjectuivARB;
  //Definitions for GL_ARB_shader_objects
  enum GL_ARB_shader_objects_consts {
    PROGRAM_OBJECT_ARB = 0x8B40,
    SHADER_OBJECT_ARB = 0x8B48,
    OBJECT_TYPE_ARB = 0x8B4E,
    OBJECT_SUBTYPE_ARB = 0x8B4F,
    FLOAT_VEC2_ARB = 0x8B50,
    FLOAT_VEC3_ARB = 0x8B51,
    FLOAT_VEC4_ARB = 0x8B52,
    INT_VEC2_ARB = 0x8B53,
    INT_VEC3_ARB = 0x8B54,
    INT_VEC4_ARB = 0x8B55,
    BOOL_ARB = 0x8B56,
    BOOL_VEC2_ARB = 0x8B57,
    BOOL_VEC3_ARB = 0x8B58,
    BOOL_VEC4_ARB = 0x8B59,
    FLOAT_MAT2_ARB = 0x8B5A,
    FLOAT_MAT3_ARB = 0x8B5B,
    FLOAT_MAT4_ARB = 0x8B5C,
    SAMPLER_1D_ARB = 0x8B5D,
    SAMPLER_2D_ARB = 0x8B5E,
    SAMPLER_3D_ARB = 0x8B5F,
    SAMPLER_CUBE_ARB = 0x8B60,
    SAMPLER_1D_SHADOW_ARB = 0x8B61,
    SAMPLER_2D_SHADOW_ARB = 0x8B62,
    SAMPLER_2D_RECT_ARB = 0x8B63,
    SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64,
    OBJECT_DELETE_STATUS_ARB = 0x8B80,
    OBJECT_COMPILE_STATUS_ARB = 0x8B81,
    OBJECT_LINK_STATUS_ARB = 0x8B82,
    OBJECT_VALIDATE_STATUS_ARB = 0x8B83,
    OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84,
    OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85,
    OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86,
    OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87,
    OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88
  };
  typedef char GLcharARB;         /* native character */
  typedef unsigned int GLhandleARB;       /* shader object handle */
  typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
  typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname);
  typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
  typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
  typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
  typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
  typedef GLhandleARB (APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
  typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
  typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
  typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
  typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
  typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
  typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
  typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
  typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
  typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
  typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
  typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
  typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
  typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
  typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
  typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
  typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
  typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
  typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
  typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
  typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
  extern VTK_RENDERING_EXPORT PFNGLDELETEOBJECTARBPROC DeleteObjectARB;
  extern VTK_RENDERING_EXPORT PFNGLGETHANDLEARBPROC GetHandleARB;
  extern VTK_RENDERING_EXPORT PFNGLDETACHOBJECTARBPROC DetachObjectARB;
  extern VTK_RENDERING_EXPORT PFNGLCREATESHADEROBJECTARBPROC CreateShaderObjectARB;
  extern VTK_RENDERING_EXPORT PFNGLSHADERSOURCEARBPROC ShaderSourceARB;
  extern VTK_RENDERING_EXPORT PFNGLCOMPILESHADERARBPROC CompileShaderARB;
  extern VTK_RENDERING_EXPORT PFNGLCREATEPROGRAMOBJECTARBPROC CreateProgramObjectARB;
  extern VTK_RENDERING_EXPORT PFNGLATTACHOBJECTARBPROC AttachObjectARB;
  extern VTK_RENDERING_EXPORT PFNGLLINKPROGRAMARBPROC LinkProgramARB;
  extern VTK_RENDERING_EXPORT PFNGLUSEPROGRAMOBJECTARBPROC UseProgramObjectARB;
  extern VTK_RENDERING_EXPORT PFNGLVALIDATEPROGRAMARBPROC ValidateProgramARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1FARBPROC Uniform1fARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2FARBPROC Uniform2fARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3FARBPROC Uniform3fARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4FARBPROC Uniform4fARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1IARBPROC Uniform1iARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2IARBPROC Uniform2iARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3IARBPROC Uniform3iARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4IARBPROC Uniform4iARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1FVARBPROC Uniform1fvARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2FVARBPROC Uniform2fvARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3FVARBPROC Uniform3fvARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4FVARBPROC Uniform4fvARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM1IVARBPROC Uniform1ivARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM2IVARBPROC Uniform2ivARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM3IVARBPROC Uniform3ivARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORM4IVARBPROC Uniform4ivARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORMMATRIX2FVARBPROC UniformMatrix2fvARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORMMATRIX3FVARBPROC UniformMatrix3fvARB;
  extern VTK_RENDERING_EXPORT PFNGLUNIFORMMATRIX4FVARBPROC UniformMatrix4fvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETOBJECTPARAMETERFVARBPROC GetObjectParameterfvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETOBJECTPARAMETERIVARBPROC GetObjectParameterivARB;
  extern VTK_RENDERING_EXPORT PFNGLGETINFOLOGARBPROC GetInfoLogARB;
  extern VTK_RENDERING_EXPORT PFNGLGETATTACHEDOBJECTSARBPROC GetAttachedObjectsARB;
  extern VTK_RENDERING_EXPORT PFNGLGETUNIFORMLOCATIONARBPROC GetUniformLocationARB;
  extern VTK_RENDERING_EXPORT PFNGLGETACTIVEUNIFORMARBPROC GetActiveUniformARB;
  extern VTK_RENDERING_EXPORT PFNGLGETUNIFORMFVARBPROC GetUniformfvARB;
  extern VTK_RENDERING_EXPORT PFNGLGETUNIFORMIVARBPROC GetUniformivARB;
  extern VTK_RENDERING_EXPORT PFNGLGETSHADERSOURCEARBPROC GetShaderSourceARB;
  //Definitions for GL_ARB_vertex_shader
  enum GL_ARB_vertex_shader_consts {
    VERTEX_SHADER_ARB = 0x8B31,
    MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A,
    MAX_VARYING_FLOATS_ARB = 0x8B4B,
    MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C,
    MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D,
    OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89,
    OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A
  };
  typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
  typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
  typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
  extern VTK_RENDERING_EXPORT PFNGLBINDATTRIBLOCATIONARBPROC BindAttribLocationARB;
  extern VTK_RENDERING_EXPORT PFNGLGETACTIVEATTRIBARBPROC GetActiveAttribARB;
  extern VTK_RENDERING_EXPORT PFNGLGETATTRIBLOCATIONARBPROC GetAttribLocationARB;
  //Definitions for GL_ARB_fragment_shader
  enum GL_ARB_fragment_shader_consts {
    FRAGMENT_SHADER_ARB = 0x8B30,
    MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49,
    FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B
  };
  //Definitions for GL_ARB_shading_language_100
  enum GL_ARB_shading_language_100_consts {
    SHADING_LANGUAGE_VERSION_ARB = 0x8B8C
  };
  //Definitions for GL_ARB_texture_non_power_of_two
  //Definitions for GL_ARB_point_sprite
  enum GL_ARB_point_sprite_consts {
    POINT_SPRITE_ARB = 0x8861,
    COORD_REPLACE_ARB = 0x8862
  };
  //Definitions for GL_ARB_fragment_program_shadow
  //Definitions for GL_ARB_draw_buffers
  enum GL_ARB_draw_buffers_consts {
    MAX_DRAW_BUFFERS_ARB = 0x8824,
    DRAW_BUFFER0_ARB = 0x8825,
    DRAW_BUFFER1_ARB = 0x8826,
    DRAW_BUFFER2_ARB = 0x8827,
    DRAW_BUFFER3_ARB = 0x8828,
    DRAW_BUFFER4_ARB = 0x8829,
    DRAW_BUFFER5_ARB = 0x882A,
    DRAW_BUFFER6_ARB = 0x882B,
    DRAW_BUFFER7_ARB = 0x882C,
    DRAW_BUFFER8_ARB = 0x882D,
    DRAW_BUFFER9_ARB = 0x882E,
    DRAW_BUFFER10_ARB = 0x882F,
    DRAW_BUFFER11_ARB = 0x8830,
    DRAW_BUFFER12_ARB = 0x8831,
    DRAW_BUFFER13_ARB = 0x8832,
    DRAW_BUFFER14_ARB = 0x8833,
    DRAW_BUFFER15_ARB = 0x8834
  };
  typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);
  extern VTK_RENDERING_EXPORT PFNGLDRAWBUFFERSARBPROC DrawBuffersARB;
  //Definitions for GL_ARB_texture_rectangle
  enum GL_ARB_texture_rectangle_consts {
    TEXTURE_RECTANGLE_ARB = 0x84F5,
    TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6,
    PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7,
    MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8
  };
  //Definitions for GL_ARB_color_buffer_float
  enum GL_ARB_color_buffer_float_consts {
    RGBA_FLOAT_MODE_ARB = 0x8820,
    CLAMP_VERTEX_COLOR_ARB = 0x891A,
    CLAMP_FRAGMENT_COLOR_ARB = 0x891B,
    CLAMP_READ_COLOR_ARB = 0x891C,
    FIXED_ONLY_ARB = 0x891D
  };
  typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
  extern VTK_RENDERING_EXPORT PFNGLCLAMPCOLORARBPROC ClampColorARB;
  //Definitions for GL_ARB_half_float_pixel
  enum GL_ARB_half_float_pixel_consts {
    HALF_FLOAT_ARB = 0x140B
  };
  typedef unsigned short GLhalfARB;
  //Definitions for GL_ARB_texture_float
  enum GL_ARB_texture_float_consts {
    TEXTURE_RED_TYPE_ARB = 0x8C10,
    TEXTURE_GREEN_TYPE_ARB = 0x8C11,
    TEXTURE_BLUE_TYPE_ARB = 0x8C12,
    TEXTURE_ALPHA_TYPE_ARB = 0x8C13,
    TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14,
    TEXTURE_INTENSITY_TYPE_ARB = 0x8C15,
    TEXTURE_DEPTH_TYPE_ARB = 0x8C16,
    UNSIGNED_NORMALIZED_ARB = 0x8C17,
    RGBA32F_ARB = 0x8814,
    RGB32F_ARB = 0x8815,
    ALPHA32F_ARB = 0x8816,
    INTENSITY32F_ARB = 0x8817,
    LUMINANCE32F_ARB = 0x8818,
    LUMINANCE_ALPHA32F_ARB = 0x8819,
    RGBA16F_ARB = 0x881A,
    RGB16F_ARB = 0x881B,
    ALPHA16F_ARB = 0x881C,
    INTENSITY16F_ARB = 0x881D,
    LUMINANCE16F_ARB = 0x881E,
    LUMINANCE_ALPHA16F_ARB = 0x881F
  };
  //Definitions for GL_ARB_pixel_buffer_object
  enum GL_ARB_pixel_buffer_object_consts {
    PIXEL_PACK_BUFFER_ARB = 0x88EB,
    PIXEL_UNPACK_BUFFER_ARB = 0x88EC,
    PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED,
    PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF
  };
  //Definitions for GL_EXT_abgr
  enum GL_EXT_abgr_consts {
    ABGR_EXT = 0x8000
  };
  //Definitions for GL_EXT_blend_color
  enum GL_EXT_blend_color_consts {
    CONSTANT_COLOR_EXT = 0x8001,
    ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002,
    CONSTANT_ALPHA_EXT = 0x8003,
    ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004,
    BLEND_COLOR_EXT = 0x8005
  };
  typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
  extern VTK_RENDERING_EXPORT PFNGLBLENDCOLOREXTPROC BlendColorEXT;
  //Definitions for GL_EXT_polygon_offset
  enum GL_EXT_polygon_offset_consts {
    POLYGON_OFFSET_EXT = 0x8037,
    POLYGON_OFFSET_FACTOR_EXT = 0x8038,
    POLYGON_OFFSET_BIAS_EXT = 0x8039
  };
  typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
  extern VTK_RENDERING_EXPORT PFNGLPOLYGONOFFSETEXTPROC PolygonOffsetEXT;
  //Definitions for GL_EXT_texture
  enum GL_EXT_texture_consts {
    ALPHA4_EXT = 0x803B,
    ALPHA8_EXT = 0x803C,
    ALPHA12_EXT = 0x803D,
    ALPHA16_EXT = 0x803E,
    LUMINANCE4_EXT = 0x803F,
    LUMINANCE8_EXT = 0x8040,
    LUMINANCE12_EXT = 0x8041,
    LUMINANCE16_EXT = 0x8042,
    LUMINANCE4_ALPHA4_EXT = 0x8043,
    LUMINANCE6_ALPHA2_EXT = 0x8044,
    LUMINANCE8_ALPHA8_EXT = 0x8045,
    LUMINANCE12_ALPHA4_EXT = 0x8046,
    LUMINANCE12_ALPHA12_EXT = 0x8047,
    LUMINANCE16_ALPHA16_EXT = 0x8048,
    INTENSITY_EXT = 0x8049,
    INTENSITY4_EXT = 0x804A,
    INTENSITY8_EXT = 0x804B,
    INTENSITY12_EXT = 0x804C,
    INTENSITY16_EXT = 0x804D,
    RGB2_EXT = 0x804E,
    RGB4_EXT = 0x804F,
    RGB5_EXT = 0x8050,
    RGB8_EXT = 0x8051,
    RGB10_EXT = 0x8052,
    RGB12_EXT = 0x8053,
    RGB16_EXT = 0x8054,
    RGBA2_EXT = 0x8055,
    RGBA4_EXT = 0x8056,
    RGB5_A1_EXT = 0x8057,
    RGBA8_EXT = 0x8058,
    RGB10_A2_EXT = 0x8059,
    RGBA12_EXT = 0x805A,
    RGBA16_EXT = 0x805B,
    TEXTURE_RED_SIZE_EXT = 0x805C,
    TEXTURE_GREEN_SIZE_EXT = 0x805D,
    TEXTURE_BLUE_SIZE_EXT = 0x805E,
    TEXTURE_ALPHA_SIZE_EXT = 0x805F,
    TEXTURE_LUMINANCE_SIZE_EXT = 0x8060,
    TEXTURE_INTENSITY_SIZE_EXT = 0x8061,
    REPLACE_EXT = 0x8062,
    PROXY_TEXTURE_1D_EXT = 0x8063,
    PROXY_TEXTURE_2D_EXT = 0x8064,
    TEXTURE_TOO_LARGE_EXT = 0x8065
  };
  //Definitions for GL_EXT_texture3D
  enum GL_EXT_texture3D_consts {
    PACK_SKIP_IMAGES_EXT = 0x806B,
    PACK_IMAGE_HEIGHT_EXT = 0x806C,
    UNPACK_SKIP_IMAGES_EXT = 0x806D,
    UNPACK_IMAGE_HEIGHT_EXT = 0x806E,
    TEXTURE_3D_EXT = 0x806F,
    PROXY_TEXTURE_3D_EXT = 0x8070,
    TEXTURE_DEPTH_EXT = 0x8071,
    TEXTURE_WRAP_R_EXT = 0x8072,
    MAX_3D_TEXTURE_SIZE_EXT = 0x8073
  };
  typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
  extern VTK_RENDERING_EXPORT PFNGLTEXIMAGE3DEXTPROC TexImage3DEXT;
  extern VTK_RENDERING_EXPORT PFNGLTEXSUBIMAGE3DEXTPROC TexSubImage3DEXT;
  //Definitions for GL_SGIS_texture_filter4
  enum GL_SGIS_texture_filter4_consts {
    FILTER4_SGIS = 0x8146,
    TEXTURE_FILTER4_SIZE_SGIS = 0x8147
  };
  typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
  typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
  extern VTK_RENDERING_EXPORT PFNGLGETTEXFILTERFUNCSGISPROC GetTexFilterFuncSGIS;
  extern VTK_RENDERING_EXPORT PFNGLTEXFILTERFUNCSGISPROC TexFilterFuncSGIS;
  //Definitions for GL_EXT_subtexture
  typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
  typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
  extern VTK_RENDERING_EXPORT PFNGLTEXSUBIMAGE1DEXTPROC TexSubImage1DEXT;
  extern VTK_RENDERING_EXPORT PFNGLTEXSUBIMAGE2DEXTPROC TexSubImage2DEXT;
  //Definitions for GL_EXT_copy_texture
  typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
  typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
  typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
  typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
  extern VTK_RENDERING_EXPORT PFNGLCOPYTEXIMAGE1DEXTPROC CopyTexImage1DEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOPYTEXIMAGE2DEXTPROC CopyTexImage2DEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOPYTEXSUBIMAGE1DEXTPROC CopyTexSubImage1DEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOPYTEXSUBIMAGE2DEXTPROC CopyTexSubImage2DEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOPYTEXSUBIMAGE3DEXTPROC CopyTexSubImage3DEXT;
  //Definitions for GL_EXT_histogram
  enum GL_EXT_histogram_consts {
    HISTOGRAM_EXT = 0x8024,
    PROXY_HISTOGRAM_EXT = 0x8025,
    HISTOGRAM_WIDTH_EXT = 0x8026,
    HISTOGRAM_FORMAT_EXT = 0x8027,
    HISTOGRAM_RED_SIZE_EXT = 0x8028,
    HISTOGRAM_GREEN_SIZE_EXT = 0x8029,
    HISTOGRAM_BLUE_SIZE_EXT = 0x802A,
    HISTOGRAM_ALPHA_SIZE_EXT = 0x802B,
    HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C,
    HISTOGRAM_SINK_EXT = 0x802D,
    MINMAX_EXT = 0x802E,
    MINMAX_FORMAT_EXT = 0x802F,
    MINMAX_SINK_EXT = 0x8030,
    TABLE_TOO_LARGE_EXT = 0x8031
  };
  typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
  typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
  typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
  typedef void (APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
  typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
  typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target);
  extern VTK_RENDERING_EXPORT PFNGLGETHISTOGRAMEXTPROC GetHistogramEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETHISTOGRAMPARAMETERFVEXTPROC GetHistogramParameterfvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETHISTOGRAMPARAMETERIVEXTPROC GetHistogramParameterivEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETMINMAXEXTPROC GetMinmaxEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETMINMAXPARAMETERFVEXTPROC GetMinmaxParameterfvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETMINMAXPARAMETERIVEXTPROC GetMinmaxParameterivEXT;
  extern VTK_RENDERING_EXPORT PFNGLHISTOGRAMEXTPROC HistogramEXT;
  extern VTK_RENDERING_EXPORT PFNGLMINMAXEXTPROC MinmaxEXT;
  extern VTK_RENDERING_EXPORT PFNGLRESETHISTOGRAMEXTPROC ResetHistogramEXT;
  extern VTK_RENDERING_EXPORT PFNGLRESETMINMAXEXTPROC ResetMinmaxEXT;
  //Definitions for GL_EXT_convolution
  enum GL_EXT_convolution_consts {
    CONVOLUTION_1D_EXT = 0x8010,
    CONVOLUTION_2D_EXT = 0x8011,
    SEPARABLE_2D_EXT = 0x8012,
    CONVOLUTION_BORDER_MODE_EXT = 0x8013,
    CONVOLUTION_FILTER_SCALE_EXT = 0x8014,
    CONVOLUTION_FILTER_BIAS_EXT = 0x8015,
    REDUCE_EXT = 0x8016,
    CONVOLUTION_FORMAT_EXT = 0x8017,
    CONVOLUTION_WIDTH_EXT = 0x8018,
    CONVOLUTION_HEIGHT_EXT = 0x8019,
    MAX_CONVOLUTION_WIDTH_EXT = 0x801A,
    MAX_CONVOLUTION_HEIGHT_EXT = 0x801B,
    POST_CONVOLUTION_RED_SCALE_EXT = 0x801C,
    POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D,
    POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E,
    POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F,
    POST_CONVOLUTION_RED_BIAS_EXT = 0x8020,
    POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021,
    POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022,
    POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023
  };
  typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
  typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
  typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
  typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
  typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
  typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONFILTER1DEXTPROC ConvolutionFilter1DEXT;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONFILTER2DEXTPROC ConvolutionFilter2DEXT;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERFEXTPROC ConvolutionParameterfEXT;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERFVEXTPROC ConvolutionParameterfvEXT;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERIEXTPROC ConvolutionParameteriEXT;
  extern VTK_RENDERING_EXPORT PFNGLCONVOLUTIONPARAMETERIVEXTPROC ConvolutionParameterivEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC CopyConvolutionFilter1DEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC CopyConvolutionFilter2DEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETCONVOLUTIONFILTEREXTPROC GetConvolutionFilterEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC GetConvolutionParameterfvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC GetConvolutionParameterivEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETSEPARABLEFILTEREXTPROC GetSeparableFilterEXT;
  extern VTK_RENDERING_EXPORT PFNGLSEPARABLEFILTER2DEXTPROC SeparableFilter2DEXT;
  //Definitions for GL_SGI_color_matrix
  enum GL_SGI_color_matrix_consts {
    COLOR_MATRIX_SGI = 0x80B1,
    COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2,
    MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3,
    POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4,
    POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5,
    POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6,
    POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7,
    POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8,
    POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9,
    POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA,
    POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB
  };
  //Definitions for GL_SGI_color_table
  enum GL_SGI_color_table_consts {
    COLOR_TABLE_SGI = 0x80D0,
    POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1,
    POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2,
    PROXY_COLOR_TABLE_SGI = 0x80D3,
    PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4,
    PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5,
    COLOR_TABLE_SCALE_SGI = 0x80D6,
    COLOR_TABLE_BIAS_SGI = 0x80D7,
    COLOR_TABLE_FORMAT_SGI = 0x80D8,
    COLOR_TABLE_WIDTH_SGI = 0x80D9,
    COLOR_TABLE_RED_SIZE_SGI = 0x80DA,
    COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB,
    COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC,
    COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD,
    COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE,
    COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF
  };
  typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
  typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
  typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);
  extern VTK_RENDERING_EXPORT PFNGLCOLORTABLESGIPROC ColorTableSGI;
  extern VTK_RENDERING_EXPORT PFNGLCOLORTABLEPARAMETERFVSGIPROC ColorTableParameterfvSGI;
  extern VTK_RENDERING_EXPORT PFNGLCOLORTABLEPARAMETERIVSGIPROC ColorTableParameterivSGI;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCOLORTABLESGIPROC CopyColorTableSGI;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLESGIPROC GetColorTableSGI;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEPARAMETERFVSGIPROC GetColorTableParameterfvSGI;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEPARAMETERIVSGIPROC GetColorTableParameterivSGI;
  //Definitions for GL_SGIS_pixel_texture
  enum GL_SGIS_pixel_texture_consts {
    PIXEL_TEXTURE_SGIS = 0x8353,
    PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354,
    PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355,
    PIXEL_GROUP_COLOR_SGIS = 0x8356
  };
  typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLPIXELTEXGENPARAMETERISGISPROC PixelTexGenParameteriSGIS;
  extern VTK_RENDERING_EXPORT PFNGLPIXELTEXGENPARAMETERIVSGISPROC PixelTexGenParameterivSGIS;
  extern VTK_RENDERING_EXPORT PFNGLPIXELTEXGENPARAMETERFSGISPROC PixelTexGenParameterfSGIS;
  extern VTK_RENDERING_EXPORT PFNGLPIXELTEXGENPARAMETERFVSGISPROC PixelTexGenParameterfvSGIS;
  extern VTK_RENDERING_EXPORT PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC GetPixelTexGenParameterivSGIS;
  extern VTK_RENDERING_EXPORT PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC GetPixelTexGenParameterfvSGIS;
  //Definitions for GL_SGIX_pixel_texture
  enum GL_SGIX_pixel_texture_consts {
    PIXEL_TEX_GEN_SGIX = 0x8139,
    PIXEL_TEX_GEN_MODE_SGIX = 0x832B
  };
  typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
  extern VTK_RENDERING_EXPORT PFNGLPIXELTEXGENSGIXPROC PixelTexGenSGIX;
  //Definitions for GL_SGIS_texture4D
  enum GL_SGIS_texture4D_consts {
    PACK_SKIP_VOLUMES_SGIS = 0x8130,
    PACK_IMAGE_DEPTH_SGIS = 0x8131,
    UNPACK_SKIP_VOLUMES_SGIS = 0x8132,
    UNPACK_IMAGE_DEPTH_SGIS = 0x8133,
    TEXTURE_4D_SGIS = 0x8134,
    PROXY_TEXTURE_4D_SGIS = 0x8135,
    TEXTURE_4DSIZE_SGIS = 0x8136,
    TEXTURE_WRAP_Q_SGIS = 0x8137,
    MAX_4D_TEXTURE_SIZE_SGIS = 0x8138,
    TEXTURE_4D_BINDING_SGIS = 0x814F
  };
  typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
  typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
  extern VTK_RENDERING_EXPORT PFNGLTEXIMAGE4DSGISPROC TexImage4DSGIS;
  extern VTK_RENDERING_EXPORT PFNGLTEXSUBIMAGE4DSGISPROC TexSubImage4DSGIS;
  //Definitions for GL_SGI_texture_color_table
  enum GL_SGI_texture_color_table_consts {
    TEXTURE_COLOR_TABLE_SGI = 0x80BC,
    PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD
  };
  //Definitions for GL_EXT_cmyka
  enum GL_EXT_cmyka_consts {
    CMYK_EXT = 0x800C,
    CMYKA_EXT = 0x800D,
    PACK_CMYK_HINT_EXT = 0x800E,
    UNPACK_CMYK_HINT_EXT = 0x800F
  };
  //Definitions for GL_EXT_texture_object
  enum GL_EXT_texture_object_consts {
    TEXTURE_PRIORITY_EXT = 0x8066,
    TEXTURE_RESIDENT_EXT = 0x8067,
    TEXTURE_1D_BINDING_EXT = 0x8068,
    TEXTURE_2D_BINDING_EXT = 0x8069,
    TEXTURE_3D_BINDING_EXT = 0x806A
  };
  typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
  typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
  typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
  typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
  typedef GLboolean (APIENTRYP PFNGLISTEXTUREEXTPROC) (GLuint texture);
  typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
  extern VTK_RENDERING_EXPORT PFNGLARETEXTURESRESIDENTEXTPROC AreTexturesResidentEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINDTEXTUREEXTPROC BindTextureEXT;
  extern VTK_RENDERING_EXPORT PFNGLDELETETEXTURESEXTPROC DeleteTexturesEXT;
  extern VTK_RENDERING_EXPORT PFNGLGENTEXTURESEXTPROC GenTexturesEXT;
  extern VTK_RENDERING_EXPORT PFNGLISTEXTUREEXTPROC IsTextureEXT;
  extern VTK_RENDERING_EXPORT PFNGLPRIORITIZETEXTURESEXTPROC PrioritizeTexturesEXT;
  //Definitions for GL_SGIS_detail_texture
  enum GL_SGIS_detail_texture_consts {
    DETAIL_TEXTURE_2D_SGIS = 0x8095,
    DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096,
    LINEAR_DETAIL_SGIS = 0x8097,
    LINEAR_DETAIL_ALPHA_SGIS = 0x8098,
    LINEAR_DETAIL_COLOR_SGIS = 0x8099,
    DETAIL_TEXTURE_LEVEL_SGIS = 0x809A,
    DETAIL_TEXTURE_MODE_SGIS = 0x809B,
    DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C
  };
  typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
  typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
  extern VTK_RENDERING_EXPORT PFNGLDETAILTEXFUNCSGISPROC DetailTexFuncSGIS;
  extern VTK_RENDERING_EXPORT PFNGLGETDETAILTEXFUNCSGISPROC GetDetailTexFuncSGIS;
  //Definitions for GL_SGIS_sharpen_texture
  enum GL_SGIS_sharpen_texture_consts {
    LINEAR_SHARPEN_SGIS = 0x80AD,
    LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE,
    LINEAR_SHARPEN_COLOR_SGIS = 0x80AF,
    SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0
  };
  typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
  typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
  extern VTK_RENDERING_EXPORT PFNGLSHARPENTEXFUNCSGISPROC SharpenTexFuncSGIS;
  extern VTK_RENDERING_EXPORT PFNGLGETSHARPENTEXFUNCSGISPROC GetSharpenTexFuncSGIS;
  //Definitions for GL_EXT_packed_pixels
  enum GL_EXT_packed_pixels_consts {
    UNSIGNED_BYTE_3_3_2_EXT = 0x8032,
    UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033,
    UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034,
    UNSIGNED_INT_8_8_8_8_EXT = 0x8035,
    UNSIGNED_INT_10_10_10_2_EXT = 0x8036
  };
  //Definitions for GL_SGIS_texture_lod
  enum GL_SGIS_texture_lod_consts {
    TEXTURE_MIN_LOD_SGIS = 0x813A,
    TEXTURE_MAX_LOD_SGIS = 0x813B,
    TEXTURE_BASE_LEVEL_SGIS = 0x813C,
    TEXTURE_MAX_LEVEL_SGIS = 0x813D
  };
  //Definitions for GL_SGIS_multisample
  enum GL_SGIS_multisample_consts {
    MULTISAMPLE_SGIS = 0x809D,
    SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E,
    SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F,
    SAMPLE_MASK_SGIS = 0x80A0,
    _1PASS_SGIS = 0x80A1,
    _2PASS_0_SGIS = 0x80A2,
    _2PASS_1_SGIS = 0x80A3,
    _4PASS_0_SGIS = 0x80A4,
    _4PASS_1_SGIS = 0x80A5,
    _4PASS_2_SGIS = 0x80A6,
    _4PASS_3_SGIS = 0x80A7,
    SAMPLE_BUFFERS_SGIS = 0x80A8,
    SAMPLES_SGIS = 0x80A9,
    SAMPLE_MASK_VALUE_SGIS = 0x80AA,
    SAMPLE_MASK_INVERT_SGIS = 0x80AB,
    SAMPLE_PATTERN_SGIS = 0x80AC
  };
  typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
  typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
  extern VTK_RENDERING_EXPORT PFNGLSAMPLEMASKSGISPROC SampleMaskSGIS;
  extern VTK_RENDERING_EXPORT PFNGLSAMPLEPATTERNSGISPROC SamplePatternSGIS;
  //Definitions for GL_EXT_rescale_normal
  enum GL_EXT_rescale_normal_consts {
    RESCALE_NORMAL_EXT = 0x803A
  };
  //Definitions for GL_EXT_vertex_array
  enum GL_EXT_vertex_array_consts {
    VERTEX_ARRAY_EXT = 0x8074,
    NORMAL_ARRAY_EXT = 0x8075,
    COLOR_ARRAY_EXT = 0x8076,
    INDEX_ARRAY_EXT = 0x8077,
    TEXTURE_COORD_ARRAY_EXT = 0x8078,
    EDGE_FLAG_ARRAY_EXT = 0x8079,
    VERTEX_ARRAY_SIZE_EXT = 0x807A,
    VERTEX_ARRAY_TYPE_EXT = 0x807B,
    VERTEX_ARRAY_STRIDE_EXT = 0x807C,
    VERTEX_ARRAY_COUNT_EXT = 0x807D,
    NORMAL_ARRAY_TYPE_EXT = 0x807E,
    NORMAL_ARRAY_STRIDE_EXT = 0x807F,
    NORMAL_ARRAY_COUNT_EXT = 0x8080,
    COLOR_ARRAY_SIZE_EXT = 0x8081,
    COLOR_ARRAY_TYPE_EXT = 0x8082,
    COLOR_ARRAY_STRIDE_EXT = 0x8083,
    COLOR_ARRAY_COUNT_EXT = 0x8084,
    INDEX_ARRAY_TYPE_EXT = 0x8085,
    INDEX_ARRAY_STRIDE_EXT = 0x8086,
    INDEX_ARRAY_COUNT_EXT = 0x8087,
    TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088,
    TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089,
    TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A,
    TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B,
    EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C,
    EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D,
    VERTEX_ARRAY_POINTER_EXT = 0x808E,
    NORMAL_ARRAY_POINTER_EXT = 0x808F,
    COLOR_ARRAY_POINTER_EXT = 0x8090,
    INDEX_ARRAY_POINTER_EXT = 0x8091,
    TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092,
    EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093
  };
  typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i);
  typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
  typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
  typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);
  typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLARRAYELEMENTEXTPROC ArrayElementEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOLORPOINTEREXTPROC ColorPointerEXT;
  extern VTK_RENDERING_EXPORT PFNGLDRAWARRAYSEXTPROC DrawArraysEXT;
  extern VTK_RENDERING_EXPORT PFNGLEDGEFLAGPOINTEREXTPROC EdgeFlagPointerEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETPOINTERVEXTPROC GetPointervEXT;
  extern VTK_RENDERING_EXPORT PFNGLINDEXPOINTEREXTPROC IndexPointerEXT;
  extern VTK_RENDERING_EXPORT PFNGLNORMALPOINTEREXTPROC NormalPointerEXT;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORDPOINTEREXTPROC TexCoordPointerEXT;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXPOINTEREXTPROC VertexPointerEXT;
  //Definitions for GL_EXT_misc_attribute
  //Definitions for GL_SGIS_generate_mipmap
  enum GL_SGIS_generate_mipmap_consts {
    GENERATE_MIPMAP_SGIS = 0x8191,
    GENERATE_MIPMAP_HINT_SGIS = 0x8192
  };
  //Definitions for GL_SGIX_clipmap
  enum GL_SGIX_clipmap_consts {
    LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170,
    TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171,
    TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172,
    TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173,
    TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174,
    TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175,
    TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176,
    MAX_CLIPMAP_DEPTH_SGIX = 0x8177,
    MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178,
    NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D,
    NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E,
    LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F
  };
  //Definitions for GL_SGIX_shadow
  enum GL_SGIX_shadow_consts {
    TEXTURE_COMPARE_SGIX = 0x819A,
    TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B,
    TEXTURE_LEQUAL_R_SGIX = 0x819C,
    TEXTURE_GEQUAL_R_SGIX = 0x819D
  };
  //Definitions for GL_SGIS_texture_edge_clamp
  enum GL_SGIS_texture_edge_clamp_consts {
    CLAMP_TO_EDGE_SGIS = 0x812F
  };
  //Definitions for GL_SGIS_texture_border_clamp
  enum GL_SGIS_texture_border_clamp_consts {
    CLAMP_TO_BORDER_SGIS = 0x812D
  };
  //Definitions for GL_EXT_blend_minmax
  enum GL_EXT_blend_minmax_consts {
    FUNC_ADD_EXT = 0x8006,
    MIN_EXT = 0x8007,
    MAX_EXT = 0x8008,
    BLEND_EQUATION_EXT = 0x8009
  };
  typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
  extern VTK_RENDERING_EXPORT PFNGLBLENDEQUATIONEXTPROC BlendEquationEXT;
  //Definitions for GL_EXT_blend_subtract
  enum GL_EXT_blend_subtract_consts {
    FUNC_SUBTRACT_EXT = 0x800A,
    FUNC_REVERSE_SUBTRACT_EXT = 0x800B
  };
  //Definitions for GL_EXT_blend_logic_op
  //Definitions for GL_SGIX_interlace
  enum GL_SGIX_interlace_consts {
    INTERLACE_SGIX = 0x8094
  };
  //Definitions for GL_SGIX_pixel_tiles
  enum GL_SGIX_pixel_tiles_consts {
    PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E,
    PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F,
    PIXEL_TILE_WIDTH_SGIX = 0x8140,
    PIXEL_TILE_HEIGHT_SGIX = 0x8141,
    PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142,
    PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143,
    PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144,
    PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145
  };
  //Definitions for GL_SGIS_texture_select
  enum GL_SGIS_texture_select_consts {
    DUAL_ALPHA4_SGIS = 0x8110,
    DUAL_ALPHA8_SGIS = 0x8111,
    DUAL_ALPHA12_SGIS = 0x8112,
    DUAL_ALPHA16_SGIS = 0x8113,
    DUAL_LUMINANCE4_SGIS = 0x8114,
    DUAL_LUMINANCE8_SGIS = 0x8115,
    DUAL_LUMINANCE12_SGIS = 0x8116,
    DUAL_LUMINANCE16_SGIS = 0x8117,
    DUAL_INTENSITY4_SGIS = 0x8118,
    DUAL_INTENSITY8_SGIS = 0x8119,
    DUAL_INTENSITY12_SGIS = 0x811A,
    DUAL_INTENSITY16_SGIS = 0x811B,
    DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C,
    DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D,
    QUAD_ALPHA4_SGIS = 0x811E,
    QUAD_ALPHA8_SGIS = 0x811F,
    QUAD_LUMINANCE4_SGIS = 0x8120,
    QUAD_LUMINANCE8_SGIS = 0x8121,
    QUAD_INTENSITY4_SGIS = 0x8122,
    QUAD_INTENSITY8_SGIS = 0x8123,
    DUAL_TEXTURE_SELECT_SGIS = 0x8124,
    QUAD_TEXTURE_SELECT_SGIS = 0x8125
  };
  //Definitions for GL_SGIX_sprite
  enum GL_SGIX_sprite_consts {
    SPRITE_SGIX = 0x8148,
    SPRITE_MODE_SGIX = 0x8149,
    SPRITE_AXIS_SGIX = 0x814A,
    SPRITE_TRANSLATION_SGIX = 0x814B,
    SPRITE_AXIAL_SGIX = 0x814C,
    SPRITE_OBJECT_ALIGNED_SGIX = 0x814D,
    SPRITE_EYE_ALIGNED_SGIX = 0x814E
  };
  typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);
  extern VTK_RENDERING_EXPORT PFNGLSPRITEPARAMETERFSGIXPROC SpriteParameterfSGIX;
  extern VTK_RENDERING_EXPORT PFNGLSPRITEPARAMETERFVSGIXPROC SpriteParameterfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLSPRITEPARAMETERISGIXPROC SpriteParameteriSGIX;
  extern VTK_RENDERING_EXPORT PFNGLSPRITEPARAMETERIVSGIXPROC SpriteParameterivSGIX;
  //Definitions for GL_SGIX_texture_multi_buffer
  enum GL_SGIX_texture_multi_buffer_consts {
    TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E
  };
  //Definitions for GL_EXT_point_parameters
  enum GL_EXT_point_parameters_consts {
    POINT_SIZE_MIN_EXT = 0x8126,
    POINT_SIZE_MAX_EXT = 0x8127,
    POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128,
    DISTANCE_ATTENUATION_EXT = 0x8129
  };
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFEXTPROC PointParameterfEXT;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFVEXTPROC PointParameterfvEXT;
  //Definitions for GL_SGIS_point_parameters
  enum GL_SGIS_point_parameters_consts {
    POINT_SIZE_MIN_SGIS = 0x8126,
    POINT_SIZE_MAX_SGIS = 0x8127,
    POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128,
    DISTANCE_ATTENUATION_SGIS = 0x8129
  };
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFSGISPROC PointParameterfSGIS;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERFVSGISPROC PointParameterfvSGIS;
  //Definitions for GL_SGIX_instruments
  enum GL_SGIX_instruments_consts {
    INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180,
    INSTRUMENT_MEASUREMENTS_SGIX = 0x8181
  };
  typedef GLint (APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC) (void);
  typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
  typedef GLint (APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
  typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
  typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
  typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
  extern VTK_RENDERING_EXPORT PFNGLGETINSTRUMENTSSGIXPROC GetInstrumentsSGIX;
  extern VTK_RENDERING_EXPORT PFNGLINSTRUMENTSBUFFERSGIXPROC InstrumentsBufferSGIX;
  extern VTK_RENDERING_EXPORT PFNGLPOLLINSTRUMENTSSGIXPROC PollInstrumentsSGIX;
  extern VTK_RENDERING_EXPORT PFNGLREADINSTRUMENTSSGIXPROC ReadInstrumentsSGIX;
  extern VTK_RENDERING_EXPORT PFNGLSTARTINSTRUMENTSSGIXPROC StartInstrumentsSGIX;
  extern VTK_RENDERING_EXPORT PFNGLSTOPINSTRUMENTSSGIXPROC StopInstrumentsSGIX;
  //Definitions for GL_SGIX_texture_scale_bias
  enum GL_SGIX_texture_scale_bias_consts {
    POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179,
    POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A,
    POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B,
    POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C
  };
  //Definitions for GL_SGIX_framezoom
  enum GL_SGIX_framezoom_consts {
    FRAMEZOOM_SGIX = 0x818B,
    FRAMEZOOM_FACTOR_SGIX = 0x818C,
    MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D
  };
  typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
  extern VTK_RENDERING_EXPORT PFNGLFRAMEZOOMSGIXPROC FrameZoomSGIX;
  //Definitions for GL_SGIX_tag_sample_buffer
  typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
  extern VTK_RENDERING_EXPORT PFNGLTAGSAMPLEBUFFERSGIXPROC TagSampleBufferSGIX;
  //Definitions for GL_FfdMaskSGIX
  enum GL_FfdMaskSGIX_consts {
    TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001,
    GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002
  };
  //Definitions for GL_SGIX_polynomial_ffd
  enum GL_SGIX_polynomial_ffd_consts {
    GEOMETRY_DEFORMATION_SGIX = 0x8194,
    TEXTURE_DEFORMATION_SGIX = 0x8195,
    DEFORMATIONS_MASK_SGIX = 0x8196,
    MAX_DEFORMATION_ORDER_SGIX = 0x8197
  };
  typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
  typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
  typedef void (APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask);
  typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);
  extern VTK_RENDERING_EXPORT PFNGLDEFORMATIONMAP3DSGIXPROC DeformationMap3dSGIX;
  extern VTK_RENDERING_EXPORT PFNGLDEFORMATIONMAP3FSGIXPROC DeformationMap3fSGIX;
  extern VTK_RENDERING_EXPORT PFNGLDEFORMSGIXPROC DeformSGIX;
  extern VTK_RENDERING_EXPORT PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC LoadIdentityDeformationMapSGIX;
  //Definitions for GL_SGIX_reference_plane
  enum GL_SGIX_reference_plane_consts {
    REFERENCE_PLANE_SGIX = 0x817D,
    REFERENCE_PLANE_EQUATION_SGIX = 0x817E
  };
  typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);
  extern VTK_RENDERING_EXPORT PFNGLREFERENCEPLANESGIXPROC ReferencePlaneSGIX;
  //Definitions for GL_SGIX_flush_raster
  typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC) (void);
  extern VTK_RENDERING_EXPORT PFNGLFLUSHRASTERSGIXPROC FlushRasterSGIX;
  //Definitions for GL_SGIX_depth_texture
  enum GL_SGIX_depth_texture_consts {
    DEPTH_COMPONENT16_SGIX = 0x81A5,
    DEPTH_COMPONENT24_SGIX = 0x81A6,
    DEPTH_COMPONENT32_SGIX = 0x81A7
  };
  //Definitions for GL_SGIS_fog_function
  enum GL_SGIS_fog_function_consts {
    FOG_FUNC_SGIS = 0x812A,
    FOG_FUNC_POINTS_SGIS = 0x812B,
    MAX_FOG_FUNC_POINTS_SGIS = 0x812C
  };
  typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
  typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
  extern VTK_RENDERING_EXPORT PFNGLFOGFUNCSGISPROC FogFuncSGIS;
  extern VTK_RENDERING_EXPORT PFNGLGETFOGFUNCSGISPROC GetFogFuncSGIS;
  //Definitions for GL_SGIX_fog_offset
  enum GL_SGIX_fog_offset_consts {
    FOG_OFFSET_SGIX = 0x8198,
    FOG_OFFSET_VALUE_SGIX = 0x8199
  };
  //Definitions for GL_HP_image_transform
  enum GL_HP_image_transform_consts {
    IMAGE_SCALE_X_HP = 0x8155,
    IMAGE_SCALE_Y_HP = 0x8156,
    IMAGE_TRANSLATE_X_HP = 0x8157,
    IMAGE_TRANSLATE_Y_HP = 0x8158,
    IMAGE_ROTATE_ANGLE_HP = 0x8159,
    IMAGE_ROTATE_ORIGIN_X_HP = 0x815A,
    IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B,
    IMAGE_MAG_FILTER_HP = 0x815C,
    IMAGE_MIN_FILTER_HP = 0x815D,
    IMAGE_CUBIC_WEIGHT_HP = 0x815E,
    CUBIC_HP = 0x815F,
    AVERAGE_HP = 0x8160,
    IMAGE_TRANSFORM_2D_HP = 0x8161,
    POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162,
    PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163
  };
  typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLIMAGETRANSFORMPARAMETERIHPPROC ImageTransformParameteriHP;
  extern VTK_RENDERING_EXPORT PFNGLIMAGETRANSFORMPARAMETERFHPPROC ImageTransformParameterfHP;
  extern VTK_RENDERING_EXPORT PFNGLIMAGETRANSFORMPARAMETERIVHPPROC ImageTransformParameterivHP;
  extern VTK_RENDERING_EXPORT PFNGLIMAGETRANSFORMPARAMETERFVHPPROC ImageTransformParameterfvHP;
  extern VTK_RENDERING_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC GetImageTransformParameterivHP;
  extern VTK_RENDERING_EXPORT PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC GetImageTransformParameterfvHP;
  //Definitions for GL_HP_convolution_border_modes
  enum GL_HP_convolution_border_modes_consts {
    IGNORE_BORDER_HP = 0x8150,
    CONSTANT_BORDER_HP = 0x8151,
    REPLICATE_BORDER_HP = 0x8153,
    CONVOLUTION_BORDER_COLOR_HP = 0x8154
  };
  //Definitions for GL_INGR_palette_buffer
  //Definitions for GL_SGIX_texture_add_env
  enum GL_SGIX_texture_add_env_consts {
    TEXTURE_ENV_BIAS_SGIX = 0x80BE
  };
  //Definitions for GL_EXT_color_subtable
  typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
  typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
  extern VTK_RENDERING_EXPORT PFNGLCOLORSUBTABLEEXTPROC ColorSubTableEXT;
  extern VTK_RENDERING_EXPORT PFNGLCOPYCOLORSUBTABLEEXTPROC CopyColorSubTableEXT;
  //Definitions for GL_PGI_vertex_hints
  enum GL_PGI_vertex_hints_consts {
    VERTEX_DATA_HINT_PGI = 0x1A22A,
    VERTEX_CONSISTENT_HINT_PGI = 0x1A22B,
    MATERIAL_SIDE_HINT_PGI = 0x1A22C,
    MAX_VERTEX_HINT_PGI = 0x1A22D,
    COLOR3_BIT_PGI = 0x00010000,
    COLOR4_BIT_PGI = 0x00020000,
    EDGEFLAG_BIT_PGI = 0x00040000,
    INDEX_BIT_PGI = 0x00080000,
    MAT_AMBIENT_BIT_PGI = 0x00100000,
    MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000,
    MAT_DIFFUSE_BIT_PGI = 0x00400000,
    MAT_EMISSION_BIT_PGI = 0x00800000,
    MAT_COLOR_INDEXES_BIT_PGI = 0x01000000,
    MAT_SHININESS_BIT_PGI = 0x02000000,
    MAT_SPECULAR_BIT_PGI = 0x04000000,
    NORMAL_BIT_PGI = 0x08000000,
    TEXCOORD1_BIT_PGI = 0x10000000,
    TEXCOORD2_BIT_PGI = 0x20000000,
    TEXCOORD3_BIT_PGI = 0x40000000,
    TEXCOORD4_BIT_PGI = 0x80000000,
    VERTEX23_BIT_PGI = 0x00000004,
    VERTEX4_BIT_PGI = 0x00000008
  };
  //Definitions for GL_PGI_misc_hints
  enum GL_PGI_misc_hints_consts {
    PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8,
    CONSERVE_MEMORY_HINT_PGI = 0x1A1FD,
    RECLAIM_MEMORY_HINT_PGI = 0x1A1FE,
    NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202,
    NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203,
    NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204,
    ALWAYS_FAST_HINT_PGI = 0x1A20C,
    ALWAYS_SOFT_HINT_PGI = 0x1A20D,
    ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E,
    ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F,
    ALLOW_DRAW_FRG_HINT_PGI = 0x1A210,
    ALLOW_DRAW_MEM_HINT_PGI = 0x1A211,
    STRICT_DEPTHFUNC_HINT_PGI = 0x1A216,
    STRICT_LIGHTING_HINT_PGI = 0x1A217,
    STRICT_SCISSOR_HINT_PGI = 0x1A218,
    FULL_STIPPLE_HINT_PGI = 0x1A219,
    CLIP_NEAR_HINT_PGI = 0x1A220,
    CLIP_FAR_HINT_PGI = 0x1A221,
    WIDE_LINE_HINT_PGI = 0x1A222,
    BACK_NORMALS_HINT_PGI = 0x1A223
  };
  typedef void (APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode);
  extern VTK_RENDERING_EXPORT PFNGLHINTPGIPROC HintPGI;
  //Definitions for GL_EXT_paletted_texture
  enum GL_EXT_paletted_texture_consts {
    COLOR_INDEX1_EXT = 0x80E2,
    COLOR_INDEX2_EXT = 0x80E3,
    COLOR_INDEX4_EXT = 0x80E4,
    COLOR_INDEX8_EXT = 0x80E5,
    COLOR_INDEX12_EXT = 0x80E6,
    COLOR_INDEX16_EXT = 0x80E7,
    TEXTURE_INDEX_SIZE_EXT = 0x80ED
  };
  typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *data);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLCOLORTABLEEXTPROC ColorTableEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEEXTPROC GetColorTableEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEPARAMETERIVEXTPROC GetColorTableParameterivEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETCOLORTABLEPARAMETERFVEXTPROC GetColorTableParameterfvEXT;
  //Definitions for GL_EXT_clip_volume_hint
  enum GL_EXT_clip_volume_hint_consts {
    CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0
  };
  //Definitions for GL_SGIX_list_priority
  enum GL_SGIX_list_priority_consts {
    LIST_PRIORITY_SGIX = 0x8182
  };
  typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);
  extern VTK_RENDERING_EXPORT PFNGLGETLISTPARAMETERFVSGIXPROC GetListParameterfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLGETLISTPARAMETERIVSGIXPROC GetListParameterivSGIX;
  extern VTK_RENDERING_EXPORT PFNGLLISTPARAMETERFSGIXPROC ListParameterfSGIX;
  extern VTK_RENDERING_EXPORT PFNGLLISTPARAMETERFVSGIXPROC ListParameterfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLLISTPARAMETERISGIXPROC ListParameteriSGIX;
  extern VTK_RENDERING_EXPORT PFNGLLISTPARAMETERIVSGIXPROC ListParameterivSGIX;
  //Definitions for GL_SGIX_ir_instrument1
  enum GL_SGIX_ir_instrument1_consts {
    IR_INSTRUMENT1_SGIX = 0x817F
  };
  //Definitions for GL_SGIX_calligraphic_fragment
  enum GL_SGIX_calligraphic_fragment_consts {
    CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183
  };
  //Definitions for GL_SGIX_texture_lod_bias
  enum GL_SGIX_texture_lod_bias_consts {
    TEXTURE_LOD_BIAS_S_SGIX = 0x818E,
    TEXTURE_LOD_BIAS_T_SGIX = 0x818F,
    TEXTURE_LOD_BIAS_R_SGIX = 0x8190
  };
  //Definitions for GL_SGIX_shadow_ambient
  enum GL_SGIX_shadow_ambient_consts {
    SHADOW_AMBIENT_SGIX = 0x80BF
  };
  //Definitions for GL_EXT_index_texture
  //Definitions for GL_EXT_index_material
  enum GL_EXT_index_material_consts {
    INDEX_MATERIAL_EXT = 0x81B8,
    INDEX_MATERIAL_PARAMETER_EXT = 0x81B9,
    INDEX_MATERIAL_FACE_EXT = 0x81BA
  };
  typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
  extern VTK_RENDERING_EXPORT PFNGLINDEXMATERIALEXTPROC IndexMaterialEXT;
  //Definitions for GL_EXT_index_func
  enum GL_EXT_index_func_consts {
    INDEX_TEST_EXT = 0x81B5,
    INDEX_TEST_FUNC_EXT = 0x81B6,
    INDEX_TEST_REF_EXT = 0x81B7
  };
  typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
  extern VTK_RENDERING_EXPORT PFNGLINDEXFUNCEXTPROC IndexFuncEXT;
  //Definitions for GL_EXT_index_array_formats
  enum GL_EXT_index_array_formats_consts {
    IUI_V2F_EXT = 0x81AD,
    IUI_V3F_EXT = 0x81AE,
    IUI_N3F_V2F_EXT = 0x81AF,
    IUI_N3F_V3F_EXT = 0x81B0,
    T2F_IUI_V2F_EXT = 0x81B1,
    T2F_IUI_V3F_EXT = 0x81B2,
    T2F_IUI_N3F_V2F_EXT = 0x81B3,
    T2F_IUI_N3F_V3F_EXT = 0x81B4
  };
  //Definitions for GL_EXT_compiled_vertex_array
  enum GL_EXT_compiled_vertex_array_consts {
    ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8,
    ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9
  };
  typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
  typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC) (void);
  extern VTK_RENDERING_EXPORT PFNGLLOCKARRAYSEXTPROC LockArraysEXT;
  extern VTK_RENDERING_EXPORT PFNGLUNLOCKARRAYSEXTPROC UnlockArraysEXT;
  //Definitions for GL_EXT_cull_vertex
  enum GL_EXT_cull_vertex_consts {
    CULL_VERTEX_EXT = 0x81AA,
    CULL_VERTEX_EYE_POSITION_EXT = 0x81AB,
    CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC
  };
  typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
  typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLCULLPARAMETERDVEXTPROC CullParameterdvEXT;
  extern VTK_RENDERING_EXPORT PFNGLCULLPARAMETERFVEXTPROC CullParameterfvEXT;
  //Definitions for GL_SGIX_ycrcb
  enum GL_SGIX_ycrcb_consts {
    YCRCB_422_SGIX = 0x81BB,
    YCRCB_444_SGIX = 0x81BC
  };
  //Definitions for GL_SGIX_fragment_lighting
  enum GL_SGIX_fragment_lighting_consts {
    FRAGMENT_LIGHTING_SGIX = 0x8400,
    FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401,
    FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402,
    FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403,
    MAX_FRAGMENT_LIGHTS_SGIX = 0x8404,
    MAX_ACTIVE_LIGHTS_SGIX = 0x8405,
    CURRENT_RASTER_NORMAL_SGIX = 0x8406,
    LIGHT_ENV_MODE_SGIX = 0x8407,
    FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408,
    FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409,
    FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A,
    FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B,
    FRAGMENT_LIGHT0_SGIX = 0x840C,
    FRAGMENT_LIGHT1_SGIX = 0x840D,
    FRAGMENT_LIGHT2_SGIX = 0x840E,
    FRAGMENT_LIGHT3_SGIX = 0x840F,
    FRAGMENT_LIGHT4_SGIX = 0x8410,
    FRAGMENT_LIGHT5_SGIX = 0x8411,
    FRAGMENT_LIGHT6_SGIX = 0x8412,
    FRAGMENT_LIGHT7_SGIX = 0x8413
  };
  typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTCOLORMATERIALSGIXPROC FragmentColorMaterialSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTFSGIXPROC FragmentLightfSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTFVSGIXPROC FragmentLightfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTISGIXPROC FragmentLightiSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTIVSGIXPROC FragmentLightivSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTMODELFSGIXPROC FragmentLightModelfSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTMODELFVSGIXPROC FragmentLightModelfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTMODELISGIXPROC FragmentLightModeliSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTLIGHTMODELIVSGIXPROC FragmentLightModelivSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTMATERIALFSGIXPROC FragmentMaterialfSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTMATERIALFVSGIXPROC FragmentMaterialfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTMATERIALISGIXPROC FragmentMaterialiSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFRAGMENTMATERIALIVSGIXPROC FragmentMaterialivSGIX;
  extern VTK_RENDERING_EXPORT PFNGLGETFRAGMENTLIGHTFVSGIXPROC GetFragmentLightfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLGETFRAGMENTLIGHTIVSGIXPROC GetFragmentLightivSGIX;
  extern VTK_RENDERING_EXPORT PFNGLGETFRAGMENTMATERIALFVSGIXPROC GetFragmentMaterialfvSGIX;
  extern VTK_RENDERING_EXPORT PFNGLGETFRAGMENTMATERIALIVSGIXPROC GetFragmentMaterialivSGIX;
  extern VTK_RENDERING_EXPORT PFNGLLIGHTENVISGIXPROC LightEnviSGIX;
  //Definitions for GL_IBM_rasterpos_clip
  enum GL_IBM_rasterpos_clip_consts {
    RASTER_POSITION_UNCLIPPED_IBM = 0x19262
  };
  //Definitions for GL_HP_texture_lighting
  enum GL_HP_texture_lighting_consts {
    TEXTURE_LIGHTING_MODE_HP = 0x8167,
    TEXTURE_POST_SPECULAR_HP = 0x8168,
    TEXTURE_PRE_SPECULAR_HP = 0x8169
  };
  //Definitions for GL_EXT_draw_range_elements
  enum GL_EXT_draw_range_elements_consts {
    MAX_ELEMENTS_VERTICES_EXT = 0x80E8,
    MAX_ELEMENTS_INDICES_EXT = 0x80E9
  };
  typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
  extern VTK_RENDERING_EXPORT PFNGLDRAWRANGEELEMENTSEXTPROC DrawRangeElementsEXT;
  //Definitions for GL_WIN_phong_shading
  enum GL_WIN_phong_shading_consts {
    PHONG_WIN = 0x80EA,
    PHONG_HINT_WIN = 0x80EB
  };
  //Definitions for GL_WIN_specular_fog
  enum GL_WIN_specular_fog_consts {
    FOG_SPECULAR_TEXTURE_WIN = 0x80EC
  };
  //Definitions for GL_EXT_light_texture
  enum GL_EXT_light_texture_consts {
    FRAGMENT_MATERIAL_EXT = 0x8349,
    FRAGMENT_NORMAL_EXT = 0x834A,
    FRAGMENT_COLOR_EXT = 0x834C,
    ATTENUATION_EXT = 0x834D,
    SHADOW_ATTENUATION_EXT = 0x834E,
    TEXTURE_APPLICATION_MODE_EXT = 0x834F,
    TEXTURE_LIGHT_EXT = 0x8350,
    TEXTURE_MATERIAL_FACE_EXT = 0x8351,
    TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352
  };
  typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
  typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
  typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
  extern VTK_RENDERING_EXPORT PFNGLAPPLYTEXTUREEXTPROC ApplyTextureEXT;
  extern VTK_RENDERING_EXPORT PFNGLTEXTURELIGHTEXTPROC TextureLightEXT;
  extern VTK_RENDERING_EXPORT PFNGLTEXTUREMATERIALEXTPROC TextureMaterialEXT;
  //Definitions for GL_SGIX_blend_alpha_minmax
  enum GL_SGIX_blend_alpha_minmax_consts {
    ALPHA_MIN_SGIX = 0x8320,
    ALPHA_MAX_SGIX = 0x8321
  };
  //Definitions for GL_SGIX_impact_pixel_texture
  enum GL_SGIX_impact_pixel_texture_consts {
    PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184,
    PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185,
    PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186,
    PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187,
    PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188,
    PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189,
    PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A
  };
  //Definitions for GL_EXT_bgra
  enum GL_EXT_bgra_consts {
    BGR_EXT = 0x80E0,
    BGRA_EXT = 0x80E1
  };
  //Definitions for GL_SGIX_async
  enum GL_SGIX_async_consts {
    ASYNC_MARKER_SGIX = 0x8329
  };
  typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
  typedef GLint (APIENTRYP PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
  typedef GLint (APIENTRYP PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
  typedef GLuint (APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
  typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
  typedef GLboolean (APIENTRYP PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
  extern VTK_RENDERING_EXPORT PFNGLASYNCMARKERSGIXPROC AsyncMarkerSGIX;
  extern VTK_RENDERING_EXPORT PFNGLFINISHASYNCSGIXPROC FinishAsyncSGIX;
  extern VTK_RENDERING_EXPORT PFNGLPOLLASYNCSGIXPROC PollAsyncSGIX;
  extern VTK_RENDERING_EXPORT PFNGLGENASYNCMARKERSSGIXPROC GenAsyncMarkersSGIX;
  extern VTK_RENDERING_EXPORT PFNGLDELETEASYNCMARKERSSGIXPROC DeleteAsyncMarkersSGIX;
  extern VTK_RENDERING_EXPORT PFNGLISASYNCMARKERSGIXPROC IsAsyncMarkerSGIX;
  //Definitions for GL_SGIX_async_pixel
  enum GL_SGIX_async_pixel_consts {
    ASYNC_TEX_IMAGE_SGIX = 0x835C,
    ASYNC_DRAW_PIXELS_SGIX = 0x835D,
    ASYNC_READ_PIXELS_SGIX = 0x835E,
    MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F,
    MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360,
    MAX_ASYNC_READ_PIXELS_SGIX = 0x8361
  };
  //Definitions for GL_SGIX_async_histogram
  enum GL_SGIX_async_histogram_consts {
    ASYNC_HISTOGRAM_SGIX = 0x832C,
    MAX_ASYNC_HISTOGRAM_SGIX = 0x832D
  };
  //Definitions for GL_INTEL_texture_scissor
  //Definitions for GL_INTEL_parallel_arrays
  enum GL_INTEL_parallel_arrays_consts {
    PARALLEL_ARRAYS_INTEL = 0x83F4,
    VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5,
    NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6,
    COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7,
    TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8
  };
  typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
  typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const GLvoid* *pointer);
  typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
  typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
  extern VTK_RENDERING_EXPORT PFNGLVERTEXPOINTERVINTELPROC VertexPointervINTEL;
  extern VTK_RENDERING_EXPORT PFNGLNORMALPOINTERVINTELPROC NormalPointervINTEL;
  extern VTK_RENDERING_EXPORT PFNGLCOLORPOINTERVINTELPROC ColorPointervINTEL;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORDPOINTERVINTELPROC TexCoordPointervINTEL;
  //Definitions for GL_HP_occlusion_test
  enum GL_HP_occlusion_test_consts {
    OCCLUSION_TEST_HP = 0x8165,
    OCCLUSION_TEST_RESULT_HP = 0x8166
  };
  //Definitions for GL_EXT_pixel_transform
  enum GL_EXT_pixel_transform_consts {
    PIXEL_TRANSFORM_2D_EXT = 0x8330,
    PIXEL_MAG_FILTER_EXT = 0x8331,
    PIXEL_MIN_FILTER_EXT = 0x8332,
    PIXEL_CUBIC_WEIGHT_EXT = 0x8333,
    CUBIC_EXT = 0x8334,
    AVERAGE_EXT = 0x8335,
    PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336,
    MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337,
    PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338
  };
  typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLPIXELTRANSFORMPARAMETERIEXTPROC PixelTransformParameteriEXT;
  extern VTK_RENDERING_EXPORT PFNGLPIXELTRANSFORMPARAMETERFEXTPROC PixelTransformParameterfEXT;
  extern VTK_RENDERING_EXPORT PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC PixelTransformParameterivEXT;
  extern VTK_RENDERING_EXPORT PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC PixelTransformParameterfvEXT;
  //Definitions for GL_EXT_pixel_transform_color_table
  //Definitions for GL_EXT_shared_texture_palette
  enum GL_EXT_shared_texture_palette_consts {
    SHARED_TEXTURE_PALETTE_EXT = 0x81FB
  };
  //Definitions for GL_EXT_separate_specular_color
  enum GL_EXT_separate_specular_color_consts {
    LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8,
    SINGLE_COLOR_EXT = 0x81F9,
    SEPARATE_SPECULAR_COLOR_EXT = 0x81FA
  };
  //Definitions for GL_EXT_secondary_color
  enum GL_EXT_secondary_color_consts {
    COLOR_SUM_EXT = 0x8458,
    CURRENT_SECONDARY_COLOR_EXT = 0x8459,
    SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A,
    SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B,
    SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C,
    SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D,
    SECONDARY_COLOR_ARRAY_EXT = 0x845E
  };
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
  typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3BEXTPROC SecondaryColor3bEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3BVEXTPROC SecondaryColor3bvEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3DEXTPROC SecondaryColor3dEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3DVEXTPROC SecondaryColor3dvEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3FEXTPROC SecondaryColor3fEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3FVEXTPROC SecondaryColor3fvEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3IEXTPROC SecondaryColor3iEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3IVEXTPROC SecondaryColor3ivEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3SEXTPROC SecondaryColor3sEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3SVEXTPROC SecondaryColor3svEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UBEXTPROC SecondaryColor3ubEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UBVEXTPROC SecondaryColor3ubvEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UIEXTPROC SecondaryColor3uiEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3UIVEXTPROC SecondaryColor3uivEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3USEXTPROC SecondaryColor3usEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3USVEXTPROC SecondaryColor3usvEXT;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLORPOINTEREXTPROC SecondaryColorPointerEXT;
  //Definitions for GL_EXT_texture_perturb_normal
  enum GL_EXT_texture_perturb_normal_consts {
    PERTURB_EXT = 0x85AE,
    TEXTURE_NORMAL_EXT = 0x85AF
  };
  typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
  extern VTK_RENDERING_EXPORT PFNGLTEXTURENORMALEXTPROC TextureNormalEXT;
  //Definitions for GL_EXT_multi_draw_arrays
  typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
  typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
  extern VTK_RENDERING_EXPORT PFNGLMULTIDRAWARRAYSEXTPROC MultiDrawArraysEXT;
  extern VTK_RENDERING_EXPORT PFNGLMULTIDRAWELEMENTSEXTPROC MultiDrawElementsEXT;
  //Definitions for GL_EXT_fog_coord
  enum GL_EXT_fog_coord_consts {
    FOG_COORDINATE_SOURCE_EXT = 0x8450,
    FOG_COORDINATE_EXT = 0x8451,
    FRAGMENT_DEPTH_EXT = 0x8452,
    CURRENT_FOG_COORDINATE_EXT = 0x8453,
    FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454,
    FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455,
    FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456,
    FOG_COORDINATE_ARRAY_EXT = 0x8457
  };
  typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
  typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
  typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
  typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
  typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDFEXTPROC FogCoordfEXT;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDFVEXTPROC FogCoordfvEXT;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDDEXTPROC FogCoorddEXT;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDDVEXTPROC FogCoorddvEXT;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDPOINTEREXTPROC FogCoordPointerEXT;
  //Definitions for GL_REND_screen_coordinates
  enum GL_REND_screen_coordinates_consts {
    SCREEN_COORDINATES_REND = 0x8490,
    INVERTED_SCREEN_W_REND = 0x8491
  };
  //Definitions for GL_EXT_coordinate_frame
  enum GL_EXT_coordinate_frame_consts {
    TANGENT_ARRAY_EXT = 0x8439,
    BINORMAL_ARRAY_EXT = 0x843A,
    CURRENT_TANGENT_EXT = 0x843B,
    CURRENT_BINORMAL_EXT = 0x843C,
    TANGENT_ARRAY_TYPE_EXT = 0x843E,
    TANGENT_ARRAY_STRIDE_EXT = 0x843F,
    BINORMAL_ARRAY_TYPE_EXT = 0x8440,
    BINORMAL_ARRAY_STRIDE_EXT = 0x8441,
    TANGENT_ARRAY_POINTER_EXT = 0x8442,
    BINORMAL_ARRAY_POINTER_EXT = 0x8443,
    MAP1_TANGENT_EXT = 0x8444,
    MAP2_TANGENT_EXT = 0x8445,
    MAP1_BINORMAL_EXT = 0x8446,
    MAP2_BINORMAL_EXT = 0x8447
  };
  typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
  typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
  typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
  typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
  typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
  typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
  typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
  typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
  typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
  typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
  typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
  typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
  typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3BEXTPROC Tangent3bEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3BVEXTPROC Tangent3bvEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3DEXTPROC Tangent3dEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3DVEXTPROC Tangent3dvEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3FEXTPROC Tangent3fEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3FVEXTPROC Tangent3fvEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3IEXTPROC Tangent3iEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3IVEXTPROC Tangent3ivEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3SEXTPROC Tangent3sEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENT3SVEXTPROC Tangent3svEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3BEXTPROC Binormal3bEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3BVEXTPROC Binormal3bvEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3DEXTPROC Binormal3dEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3DVEXTPROC Binormal3dvEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3FEXTPROC Binormal3fEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3FVEXTPROC Binormal3fvEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3IEXTPROC Binormal3iEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3IVEXTPROC Binormal3ivEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3SEXTPROC Binormal3sEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMAL3SVEXTPROC Binormal3svEXT;
  extern VTK_RENDERING_EXPORT PFNGLTANGENTPOINTEREXTPROC TangentPointerEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINORMALPOINTEREXTPROC BinormalPointerEXT;
  //Definitions for GL_EXT_texture_env_combine
  enum GL_EXT_texture_env_combine_consts {
    COMBINE_EXT = 0x8570,
    COMBINE_RGB_EXT = 0x8571,
    COMBINE_ALPHA_EXT = 0x8572,
    RGB_SCALE_EXT = 0x8573,
    ADD_SIGNED_EXT = 0x8574,
    INTERPOLATE_EXT = 0x8575,
    CONSTANT_EXT = 0x8576,
    PRIMARY_COLOR_EXT = 0x8577,
    PREVIOUS_EXT = 0x8578,
    SOURCE0_RGB_EXT = 0x8580,
    SOURCE1_RGB_EXT = 0x8581,
    SOURCE2_RGB_EXT = 0x8582,
    SOURCE0_ALPHA_EXT = 0x8588,
    SOURCE1_ALPHA_EXT = 0x8589,
    SOURCE2_ALPHA_EXT = 0x858A,
    OPERAND0_RGB_EXT = 0x8590,
    OPERAND1_RGB_EXT = 0x8591,
    OPERAND2_RGB_EXT = 0x8592,
    OPERAND0_ALPHA_EXT = 0x8598,
    OPERAND1_ALPHA_EXT = 0x8599,
    OPERAND2_ALPHA_EXT = 0x859A
  };
  //Definitions for GL_APPLE_specular_vector
  enum GL_APPLE_specular_vector_consts {
    LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0
  };
  //Definitions for GL_APPLE_transform_hint
  enum GL_APPLE_transform_hint_consts {
    TRANSFORM_HINT_APPLE = 0x85B1
  };
  //Definitions for GL_SGIX_fog_scale
  enum GL_SGIX_fog_scale_consts {
    FOG_SCALE_SGIX = 0x81FC,
    FOG_SCALE_VALUE_SGIX = 0x81FD
  };
  //Definitions for GL_SUNX_constant_data
  enum GL_SUNX_constant_data_consts {
    UNPACK_CONSTANT_DATA_SUNX = 0x81D5,
    TEXTURE_CONSTANT_DATA_SUNX = 0x81D6
  };
  typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC) (void);
  extern VTK_RENDERING_EXPORT PFNGLFINISHTEXTURESUNXPROC FinishTextureSUNX;
  //Definitions for GL_SUN_global_alpha
  enum GL_SUN_global_alpha_consts {
    GLOBAL_ALPHA_SUN = 0x81D9,
    GLOBAL_ALPHA_FACTOR_SUN = 0x81DA
  };
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
  typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORBSUNPROC GlobalAlphaFactorbSUN;
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORSSUNPROC GlobalAlphaFactorsSUN;
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORISUNPROC GlobalAlphaFactoriSUN;
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORFSUNPROC GlobalAlphaFactorfSUN;
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORDSUNPROC GlobalAlphaFactordSUN;
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORUBSUNPROC GlobalAlphaFactorubSUN;
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORUSSUNPROC GlobalAlphaFactorusSUN;
  extern VTK_RENDERING_EXPORT PFNGLGLOBALALPHAFACTORUISUNPROC GlobalAlphaFactoruiSUN;
  //Definitions for GL_SUN_triangle_list
  enum GL_SUN_triangle_list_consts {
    RESTART_SUN = 0x0001,
    REPLACE_MIDDLE_SUN = 0x0002,
    REPLACE_OLDEST_SUN = 0x0003,
    TRIANGLE_LIST_SUN = 0x81D7,
    REPLACEMENT_CODE_SUN = 0x81D8,
    REPLACEMENT_CODE_ARRAY_SUN = 0x85C0,
    REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1,
    REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2,
    REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3,
    R1UI_V3F_SUN = 0x85C4,
    R1UI_C4UB_V3F_SUN = 0x85C5,
    R1UI_C3F_V3F_SUN = 0x85C6,
    R1UI_N3F_V3F_SUN = 0x85C7,
    R1UI_C4F_N3F_V3F_SUN = 0x85C8,
    R1UI_T2F_V3F_SUN = 0x85C9,
    R1UI_T2F_N3F_V3F_SUN = 0x85CA,
    R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB
  };
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const GLvoid* *pointer);
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUISUNPROC ReplacementCodeuiSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUSSUNPROC ReplacementCodeusSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUBSUNPROC ReplacementCodeubSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUIVSUNPROC ReplacementCodeuivSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUSVSUNPROC ReplacementCodeusvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUBVSUNPROC ReplacementCodeubvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEPOINTERSUNPROC ReplacementCodePointerSUN;
  //Definitions for GL_SUN_vertex
  typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
  typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
  typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
  typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
  typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
  typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
  typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
  typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4UBVERTEX2FSUNPROC Color4ubVertex2fSUN;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4UBVERTEX2FVSUNPROC Color4ubVertex2fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4UBVERTEX3FSUNPROC Color4ubVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4UBVERTEX3FVSUNPROC Color4ubVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR3FVERTEX3FSUNPROC Color3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR3FVERTEX3FVSUNPROC Color3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLNORMAL3FVERTEX3FSUNPROC Normal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLNORMAL3FVERTEX3FVSUNPROC Normal3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC Color4fNormal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC Color4fNormal3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FVERTEX3FSUNPROC TexCoord2fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FVERTEX3FVSUNPROC TexCoord2fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD4FVERTEX4FSUNPROC TexCoord4fVertex4fSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD4FVERTEX4FVSUNPROC TexCoord4fVertex4fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC TexCoord2fColor4ubVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC TexCoord2fColor4ubVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC TexCoord2fColor3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC TexCoord2fColor3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC TexCoord2fNormal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC TexCoord2fNormal3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC TexCoord2fColor4fNormal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC TexCoord2fColor4fNormal3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC TexCoord4fColor4fNormal3fVertex4fSUN;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC TexCoord4fColor4fNormal3fVertex4fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC ReplacementCodeuiVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC ReplacementCodeuiVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC ReplacementCodeuiColor4ubVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC ReplacementCodeuiColor4ubVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC ReplacementCodeuiColor3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC ReplacementCodeuiColor3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC ReplacementCodeuiNormal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC ReplacementCodeuiNormal3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC ReplacementCodeuiColor4fNormal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC ReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC ReplacementCodeuiTexCoord2fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC ReplacementCodeuiTexCoord2fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  extern VTK_RENDERING_EXPORT PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  //Definitions for GL_EXT_blend_func_separate
  enum GL_EXT_blend_func_separate_consts {
    BLEND_DST_RGB_EXT = 0x80C8,
    BLEND_SRC_RGB_EXT = 0x80C9,
    BLEND_DST_ALPHA_EXT = 0x80CA,
    BLEND_SRC_ALPHA_EXT = 0x80CB
  };
  typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  extern VTK_RENDERING_EXPORT PFNGLBLENDFUNCSEPARATEEXTPROC BlendFuncSeparateEXT;
  //Definitions for GL_INGR_color_clamp
  enum GL_INGR_color_clamp_consts {
    RED_MIN_CLAMP_INGR = 0x8560,
    GREEN_MIN_CLAMP_INGR = 0x8561,
    BLUE_MIN_CLAMP_INGR = 0x8562,
    ALPHA_MIN_CLAMP_INGR = 0x8563,
    RED_MAX_CLAMP_INGR = 0x8564,
    GREEN_MAX_CLAMP_INGR = 0x8565,
    BLUE_MAX_CLAMP_INGR = 0x8566,
    ALPHA_MAX_CLAMP_INGR = 0x8567
  };
  //Definitions for GL_INGR_interlace_read
  enum GL_INGR_interlace_read_consts {
    INTERLACE_READ_INGR = 0x8568
  };
  //Definitions for GL_EXT_stencil_wrap
  enum GL_EXT_stencil_wrap_consts {
    INCR_WRAP_EXT = 0x8507,
    DECR_WRAP_EXT = 0x8508
  };
  //Definitions for GL_EXT_422_pixels
  enum GL_EXT_422_pixels_consts {
    _422_EXT = 0x80CC,
    _422_REV_EXT = 0x80CD,
    _422_AVERAGE_EXT = 0x80CE,
    _422_REV_AVERAGE_EXT = 0x80CF
  };
  //Definitions for GL_NV_texgen_reflection
  enum GL_NV_texgen_reflection_consts {
    NORMAL_MAP_NV = 0x8511,
    REFLECTION_MAP_NV = 0x8512
  };
  //Definitions for GL_EXT_texture_cube_map
  enum GL_EXT_texture_cube_map_consts {
    NORMAL_MAP_EXT = 0x8511,
    REFLECTION_MAP_EXT = 0x8512,
    TEXTURE_CUBE_MAP_EXT = 0x8513,
    TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514,
    TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515,
    TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516,
    TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517,
    TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518,
    TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519,
    TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A,
    PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B,
    MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C
  };
  //Definitions for GL_SUN_convolution_border_modes
  enum GL_SUN_convolution_border_modes_consts {
    WRAP_BORDER_SUN = 0x81D4
  };
  //Definitions for GL_EXT_texture_env_add
  //Definitions for GL_EXT_texture_lod_bias
  enum GL_EXT_texture_lod_bias_consts {
    MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD,
    TEXTURE_FILTER_CONTROL_EXT = 0x8500,
    TEXTURE_LOD_BIAS_EXT = 0x8501
  };
  //Definitions for GL_EXT_texture_filter_anisotropic
  enum GL_EXT_texture_filter_anisotropic_consts {
    TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE,
    MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF
  };
  //Definitions for GL_EXT_vertex_weighting
  enum GL_EXT_vertex_weighting_consts {
    MODELVIEW0_STACK_DEPTH_EXT = GL_MODELVIEW_STACK_DEPTH,
    MODELVIEW1_STACK_DEPTH_EXT = 0x8502,
    MODELVIEW0_MATRIX_EXT = GL_MODELVIEW_MATRIX,
    MODELVIEW1_MATRIX_EXT = 0x8506,
    VERTEX_WEIGHTING_EXT = 0x8509,
    MODELVIEW0_EXT = GL_MODELVIEW,
    MODELVIEW1_EXT = 0x850A,
    CURRENT_VERTEX_WEIGHT_EXT = 0x850B,
    VERTEX_WEIGHT_ARRAY_EXT = 0x850C,
    VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D,
    VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E,
    VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F,
    VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510
  };
  typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
  typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
  typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLVERTEXWEIGHTFEXTPROC VertexWeightfEXT;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXWEIGHTFVEXTPROC VertexWeightfvEXT;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXWEIGHTPOINTEREXTPROC VertexWeightPointerEXT;
  //Definitions for GL_NV_light_max_exponent
  enum GL_NV_light_max_exponent_consts {
    MAX_SHININESS_NV = 0x8504,
    MAX_SPOT_EXPONENT_NV = 0x8505
  };
  //Definitions for GL_NV_vertex_array_range
  enum GL_NV_vertex_array_range_consts {
    VERTEX_ARRAY_RANGE_NV = 0x851D,
    VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E,
    VERTEX_ARRAY_RANGE_VALID_NV = 0x851F,
    MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520,
    VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521
  };
  typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
  typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const GLvoid *pointer);
  extern VTK_RENDERING_EXPORT PFNGLFLUSHVERTEXARRAYRANGENVPROC FlushVertexArrayRangeNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXARRAYRANGENVPROC VertexArrayRangeNV;
  //Definitions for GL_NV_register_combiners
  enum GL_NV_register_combiners_consts {
    REGISTER_COMBINERS_NV = 0x8522,
    VARIABLE_A_NV = 0x8523,
    VARIABLE_B_NV = 0x8524,
    VARIABLE_C_NV = 0x8525,
    VARIABLE_D_NV = 0x8526,
    VARIABLE_E_NV = 0x8527,
    VARIABLE_F_NV = 0x8528,
    VARIABLE_G_NV = 0x8529,
    CONSTANT_COLOR0_NV = 0x852A,
    CONSTANT_COLOR1_NV = 0x852B,
    PRIMARY_COLOR_NV = 0x852C,
    SECONDARY_COLOR_NV = 0x852D,
    SPARE0_NV = 0x852E,
    SPARE1_NV = 0x852F,
    DISCARD_NV = 0x8530,
    E_TIMES_F_NV = 0x8531,
    SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532,
    UNSIGNED_IDENTITY_NV = 0x8536,
    UNSIGNED_INVERT_NV = 0x8537,
    EXPAND_NORMAL_NV = 0x8538,
    EXPAND_NEGATE_NV = 0x8539,
    HALF_BIAS_NORMAL_NV = 0x853A,
    HALF_BIAS_NEGATE_NV = 0x853B,
    SIGNED_IDENTITY_NV = 0x853C,
    SIGNED_NEGATE_NV = 0x853D,
    SCALE_BY_TWO_NV = 0x853E,
    SCALE_BY_FOUR_NV = 0x853F,
    SCALE_BY_ONE_HALF_NV = 0x8540,
    BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541,
    COMBINER_INPUT_NV = 0x8542,
    COMBINER_MAPPING_NV = 0x8543,
    COMBINER_COMPONENT_USAGE_NV = 0x8544,
    COMBINER_AB_DOT_PRODUCT_NV = 0x8545,
    COMBINER_CD_DOT_PRODUCT_NV = 0x8546,
    COMBINER_MUX_SUM_NV = 0x8547,
    COMBINER_SCALE_NV = 0x8548,
    COMBINER_BIAS_NV = 0x8549,
    COMBINER_AB_OUTPUT_NV = 0x854A,
    COMBINER_CD_OUTPUT_NV = 0x854B,
    COMBINER_SUM_OUTPUT_NV = 0x854C,
    MAX_GENERAL_COMBINERS_NV = 0x854D,
    NUM_GENERAL_COMBINERS_NV = 0x854E,
    COLOR_SUM_CLAMP_NV = 0x854F,
    COMBINER0_NV = 0x8550,
    COMBINER1_NV = 0x8551,
    COMBINER2_NV = 0x8552,
    COMBINER3_NV = 0x8553,
    COMBINER4_NV = 0x8554,
    COMBINER5_NV = 0x8555,
    COMBINER6_NV = 0x8556,
    COMBINER7_NV = 0x8557
  };
  typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
  typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
  typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
  typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
  typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);
  extern VTK_RENDERING_EXPORT PFNGLCOMBINERPARAMETERFVNVPROC CombinerParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLCOMBINERPARAMETERFNVPROC CombinerParameterfNV;
  extern VTK_RENDERING_EXPORT PFNGLCOMBINERPARAMETERIVNVPROC CombinerParameterivNV;
  extern VTK_RENDERING_EXPORT PFNGLCOMBINERPARAMETERINVPROC CombinerParameteriNV;
  extern VTK_RENDERING_EXPORT PFNGLCOMBINERINPUTNVPROC CombinerInputNV;
  extern VTK_RENDERING_EXPORT PFNGLCOMBINEROUTPUTNVPROC CombinerOutputNV;
  extern VTK_RENDERING_EXPORT PFNGLFINALCOMBINERINPUTNVPROC FinalCombinerInputNV;
  extern VTK_RENDERING_EXPORT PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC GetCombinerInputParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC GetCombinerInputParameterivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC GetCombinerOutputParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC GetCombinerOutputParameterivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC GetFinalCombinerInputParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC GetFinalCombinerInputParameterivNV;
  //Definitions for GL_NV_fog_distance
  enum GL_NV_fog_distance_consts {
    FOG_DISTANCE_MODE_NV = 0x855A,
    EYE_RADIAL_NV = 0x855B,
    EYE_PLANE_ABSOLUTE_NV = 0x855C
  };
  //Definitions for GL_NV_texgen_emboss
  enum GL_NV_texgen_emboss_consts {
    EMBOSS_LIGHT_NV = 0x855D,
    EMBOSS_CONSTANT_NV = 0x855E,
    EMBOSS_MAP_NV = 0x855F
  };
  //Definitions for GL_NV_blend_square
  //Definitions for GL_NV_texture_env_combine4
  enum GL_NV_texture_env_combine4_consts {
    COMBINE4_NV = 0x8503,
    SOURCE3_RGB_NV = 0x8583,
    SOURCE3_ALPHA_NV = 0x858B,
    OPERAND3_RGB_NV = 0x8593,
    OPERAND3_ALPHA_NV = 0x859B
  };
  //Definitions for GL_MESA_resize_buffers
  typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) (void);
  extern VTK_RENDERING_EXPORT PFNGLRESIZEBUFFERSMESAPROC ResizeBuffersMESA;
  //Definitions for GL_MESA_window_pos
  typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
  typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
  typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
  typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
  typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2DMESAPROC WindowPos2dMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2DVMESAPROC WindowPos2dvMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2FMESAPROC WindowPos2fMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2FVMESAPROC WindowPos2fvMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2IMESAPROC WindowPos2iMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2IVMESAPROC WindowPos2ivMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2SMESAPROC WindowPos2sMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS2SVMESAPROC WindowPos2svMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3DMESAPROC WindowPos3dMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3DVMESAPROC WindowPos3dvMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3FMESAPROC WindowPos3fMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3FVMESAPROC WindowPos3fvMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3IMESAPROC WindowPos3iMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3IVMESAPROC WindowPos3ivMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3SMESAPROC WindowPos3sMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS3SVMESAPROC WindowPos3svMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4DMESAPROC WindowPos4dMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4DVMESAPROC WindowPos4dvMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4FMESAPROC WindowPos4fMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4FVMESAPROC WindowPos4fvMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4IMESAPROC WindowPos4iMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4IVMESAPROC WindowPos4ivMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4SMESAPROC WindowPos4sMESA;
  extern VTK_RENDERING_EXPORT PFNGLWINDOWPOS4SVMESAPROC WindowPos4svMESA;
  //Definitions for GL_EXT_texture_compression_s3tc
  enum GL_EXT_texture_compression_s3tc_consts {
    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3
  };
  //Definitions for GL_IBM_cull_vertex
  enum GL_IBM_cull_vertex_consts {
    CULL_VERTEX_IBM = 103050
  };
  //Definitions for GL_IBM_multimode_draw_arrays
  typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
  typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
  extern VTK_RENDERING_EXPORT PFNGLMULTIMODEDRAWARRAYSIBMPROC MultiModeDrawArraysIBM;
  extern VTK_RENDERING_EXPORT PFNGLMULTIMODEDRAWELEMENTSIBMPROC MultiModeDrawElementsIBM;
  //Definitions for GL_IBM_vertex_array_lists
  enum GL_IBM_vertex_array_lists_consts {
    VERTEX_ARRAY_LIST_IBM = 103070,
    NORMAL_ARRAY_LIST_IBM = 103071,
    COLOR_ARRAY_LIST_IBM = 103072,
    INDEX_ARRAY_LIST_IBM = 103073,
    TEXTURE_COORD_ARRAY_LIST_IBM = 103074,
    EDGE_FLAG_ARRAY_LIST_IBM = 103075,
    FOG_COORDINATE_ARRAY_LIST_IBM = 103076,
    SECONDARY_COLOR_ARRAY_LIST_IBM = 103077,
    VERTEX_ARRAY_LIST_STRIDE_IBM = 103080,
    NORMAL_ARRAY_LIST_STRIDE_IBM = 103081,
    COLOR_ARRAY_LIST_STRIDE_IBM = 103082,
    INDEX_ARRAY_LIST_STRIDE_IBM = 103083,
    TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084,
    EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085,
    FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086,
    SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087
  };
  typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
  typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
  typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
  typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
  typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
  typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
  typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
  typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
  extern VTK_RENDERING_EXPORT PFNGLCOLORPOINTERLISTIBMPROC ColorPointerListIBM;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLORPOINTERLISTIBMPROC SecondaryColorPointerListIBM;
  extern VTK_RENDERING_EXPORT PFNGLEDGEFLAGPOINTERLISTIBMPROC EdgeFlagPointerListIBM;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDPOINTERLISTIBMPROC FogCoordPointerListIBM;
  extern VTK_RENDERING_EXPORT PFNGLINDEXPOINTERLISTIBMPROC IndexPointerListIBM;
  extern VTK_RENDERING_EXPORT PFNGLNORMALPOINTERLISTIBMPROC NormalPointerListIBM;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORDPOINTERLISTIBMPROC TexCoordPointerListIBM;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXPOINTERLISTIBMPROC VertexPointerListIBM;
  //Definitions for GL_SGIX_subsample
  enum GL_SGIX_subsample_consts {
    PACK_SUBSAMPLE_RATE_SGIX = 0x85A0,
    UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1,
    PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2,
    PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3,
    PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4
  };
  //Definitions for GL_SGIX_ycrcb_subsample
  //Definitions for GL_SGIX_ycrcba
  enum GL_SGIX_ycrcba_consts {
    YCRCB_SGIX = 0x8318,
    YCRCBA_SGIX = 0x8319
  };
  //Definitions for GL_SGI_depth_pass_instrument
  enum GL_SGI_depth_pass_instrument_consts {
    DEPTH_PASS_INSTRUMENT_SGIX = 0x8310,
    DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311,
    DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312
  };
  //Definitions for GL_3DFX_texture_compression_FXT1
  enum GL_3DFX_texture_compression_FXT1_consts {
    COMPRESSED_RGB_FXT1_3DFX = 0x86B0,
    COMPRESSED_RGBA_FXT1_3DFX = 0x86B1
  };
  //Definitions for GL_3DFX_multisample
  enum GL_3DFX_multisample_consts {
    MULTISAMPLE_3DFX = 0x86B2,
    SAMPLE_BUFFERS_3DFX = 0x86B3,
    SAMPLES_3DFX = 0x86B4,
    MULTISAMPLE_BIT_3DFX = 0x20000000
  };
  //Definitions for GL_3DFX_tbuffer
  typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
  extern VTK_RENDERING_EXPORT PFNGLTBUFFERMASK3DFXPROC TbufferMask3DFX;
  //Definitions for GL_EXT_multisample
  enum GL_EXT_multisample_consts {
    MULTISAMPLE_EXT = 0x809D,
    SAMPLE_ALPHA_TO_MASK_EXT = 0x809E,
    SAMPLE_ALPHA_TO_ONE_EXT = 0x809F,
    SAMPLE_MASK_EXT = 0x80A0,
    _1PASS_EXT = 0x80A1,
    _2PASS_0_EXT = 0x80A2,
    _2PASS_1_EXT = 0x80A3,
    _4PASS_0_EXT = 0x80A4,
    _4PASS_1_EXT = 0x80A5,
    _4PASS_2_EXT = 0x80A6,
    _4PASS_3_EXT = 0x80A7,
    SAMPLE_BUFFERS_EXT = 0x80A8,
    SAMPLES_EXT = 0x80A9,
    SAMPLE_MASK_VALUE_EXT = 0x80AA,
    SAMPLE_MASK_INVERT_EXT = 0x80AB,
    SAMPLE_PATTERN_EXT = 0x80AC,
    MULTISAMPLE_BIT_EXT = 0x20000000
  };
  typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
  typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
  extern VTK_RENDERING_EXPORT PFNGLSAMPLEMASKEXTPROC SampleMaskEXT;
  extern VTK_RENDERING_EXPORT PFNGLSAMPLEPATTERNEXTPROC SamplePatternEXT;
  //Definitions for GL_SGIX_vertex_preclip
  enum GL_SGIX_vertex_preclip_consts {
    VERTEX_PRECLIP_SGIX = 0x83EE,
    VERTEX_PRECLIP_HINT_SGIX = 0x83EF
  };
  //Definitions for GL_SGIX_convolution_accuracy
  enum GL_SGIX_convolution_accuracy_consts {
    CONVOLUTION_HINT_SGIX = 0x8316
  };
  //Definitions for GL_SGIX_resample
  enum GL_SGIX_resample_consts {
    PACK_RESAMPLE_SGIX = 0x842C,
    UNPACK_RESAMPLE_SGIX = 0x842D,
    RESAMPLE_REPLICATE_SGIX = 0x842E,
    RESAMPLE_ZERO_FILL_SGIX = 0x842F,
    RESAMPLE_DECIMATE_SGIX = 0x8430
  };
  //Definitions for GL_SGIS_point_line_texgen
  enum GL_SGIS_point_line_texgen_consts {
    EYE_DISTANCE_TO_POINT_SGIS = 0x81F0,
    OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1,
    EYE_DISTANCE_TO_LINE_SGIS = 0x81F2,
    OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3,
    EYE_POINT_SGIS = 0x81F4,
    OBJECT_POINT_SGIS = 0x81F5,
    EYE_LINE_SGIS = 0x81F6,
    OBJECT_LINE_SGIS = 0x81F7
  };
  //Definitions for GL_SGIS_texture_color_mask
  enum GL_SGIS_texture_color_mask_consts {
    TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF
  };
  typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
  extern VTK_RENDERING_EXPORT PFNGLTEXTURECOLORMASKSGISPROC TextureColorMaskSGIS;
  //Definitions for GL_EXT_texture_env_dot3
  enum GL_EXT_texture_env_dot3_consts {
    DOT3_RGB_EXT = 0x8740,
    DOT3_RGBA_EXT = 0x8741
  };
  //Definitions for GL_ATI_texture_mirror_once
  enum GL_ATI_texture_mirror_once_consts {
    MIRROR_CLAMP_ATI = 0x8742,
    MIRROR_CLAMP_TO_EDGE_ATI = 0x8743
  };
  //Definitions for GL_NV_fence
  enum GL_NV_fence_consts {
    ALL_COMPLETED_NV = 0x84F2,
    FENCE_STATUS_NV = 0x84F3,
    FENCE_CONDITION_NV = 0x84F4
  };
  typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
  typedef void (APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
  typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);
  typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);
  typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);
  typedef void (APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
  extern VTK_RENDERING_EXPORT PFNGLDELETEFENCESNVPROC DeleteFencesNV;
  extern VTK_RENDERING_EXPORT PFNGLGENFENCESNVPROC GenFencesNV;
  extern VTK_RENDERING_EXPORT PFNGLISFENCENVPROC IsFenceNV;
  extern VTK_RENDERING_EXPORT PFNGLTESTFENCENVPROC TestFenceNV;
  extern VTK_RENDERING_EXPORT PFNGLGETFENCEIVNVPROC GetFenceivNV;
  extern VTK_RENDERING_EXPORT PFNGLFINISHFENCENVPROC FinishFenceNV;
  extern VTK_RENDERING_EXPORT PFNGLSETFENCENVPROC SetFenceNV;
  //Definitions for GL_IBM_texture_mirrored_repeat
  enum GL_IBM_texture_mirrored_repeat_consts {
    MIRRORED_REPEAT_IBM = 0x8370
  };
  //Definitions for GL_NV_evaluators
  enum GL_NV_evaluators_consts {
    EVAL_2D_NV = 0x86C0,
    EVAL_TRIANGULAR_2D_NV = 0x86C1,
    MAP_TESSELLATION_NV = 0x86C2,
    MAP_ATTRIB_U_ORDER_NV = 0x86C3,
    MAP_ATTRIB_V_ORDER_NV = 0x86C4,
    EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5,
    EVAL_VERTEX_ATTRIB0_NV = 0x86C6,
    EVAL_VERTEX_ATTRIB1_NV = 0x86C7,
    EVAL_VERTEX_ATTRIB2_NV = 0x86C8,
    EVAL_VERTEX_ATTRIB3_NV = 0x86C9,
    EVAL_VERTEX_ATTRIB4_NV = 0x86CA,
    EVAL_VERTEX_ATTRIB5_NV = 0x86CB,
    EVAL_VERTEX_ATTRIB6_NV = 0x86CC,
    EVAL_VERTEX_ATTRIB7_NV = 0x86CD,
    EVAL_VERTEX_ATTRIB8_NV = 0x86CE,
    EVAL_VERTEX_ATTRIB9_NV = 0x86CF,
    EVAL_VERTEX_ATTRIB10_NV = 0x86D0,
    EVAL_VERTEX_ATTRIB11_NV = 0x86D1,
    EVAL_VERTEX_ATTRIB12_NV = 0x86D2,
    EVAL_VERTEX_ATTRIB13_NV = 0x86D3,
    EVAL_VERTEX_ATTRIB14_NV = 0x86D4,
    EVAL_VERTEX_ATTRIB15_NV = 0x86D5,
    MAX_MAP_TESSELLATION_NV = 0x86D6,
    MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7
  };
  typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
  typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
  typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
  typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
  extern VTK_RENDERING_EXPORT PFNGLMAPCONTROLPOINTSNVPROC MapControlPointsNV;
  extern VTK_RENDERING_EXPORT PFNGLMAPPARAMETERIVNVPROC MapParameterivNV;
  extern VTK_RENDERING_EXPORT PFNGLMAPPARAMETERFVNVPROC MapParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETMAPCONTROLPOINTSNVPROC GetMapControlPointsNV;
  extern VTK_RENDERING_EXPORT PFNGLGETMAPPARAMETERIVNVPROC GetMapParameterivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETMAPPARAMETERFVNVPROC GetMapParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETMAPATTRIBPARAMETERIVNVPROC GetMapAttribParameterivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETMAPATTRIBPARAMETERFVNVPROC GetMapAttribParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLEVALMAPSNVPROC EvalMapsNV;
  //Definitions for GL_NV_packed_depth_stencil
  enum GL_NV_packed_depth_stencil_consts {
    DEPTH_STENCIL_NV = 0x84F9,
    UNSIGNED_INT_24_8_NV = 0x84FA
  };
  //Definitions for GL_NV_register_combiners2
  enum GL_NV_register_combiners2_consts {
    PER_STAGE_CONSTANTS_NV = 0x8535
  };
  typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
  typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);
  extern VTK_RENDERING_EXPORT PFNGLCOMBINERSTAGEPARAMETERFVNVPROC CombinerStageParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC GetCombinerStageParameterfvNV;
  //Definitions for GL_NV_texture_compression_vtc
  //Definitions for GL_NV_texture_rectangle
  enum GL_NV_texture_rectangle_consts {
    TEXTURE_RECTANGLE_NV = 0x84F5,
    TEXTURE_BINDING_RECTANGLE_NV = 0x84F6,
    PROXY_TEXTURE_RECTANGLE_NV = 0x84F7,
    MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8
  };
  //Definitions for GL_NV_texture_shader
  enum GL_NV_texture_shader_consts {
    OFFSET_TEXTURE_RECTANGLE_NV = 0x864C,
    OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D,
    DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E,
    RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9,
    UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA,
    UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB,
    DSDT_MAG_INTENSITY_NV = 0x86DC,
    SHADER_CONSISTENT_NV = 0x86DD,
    TEXTURE_SHADER_NV = 0x86DE,
    SHADER_OPERATION_NV = 0x86DF,
    CULL_MODES_NV = 0x86E0,
    OFFSET_TEXTURE_MATRIX_NV = 0x86E1,
    OFFSET_TEXTURE_SCALE_NV = 0x86E2,
    OFFSET_TEXTURE_BIAS_NV = 0x86E3,
    OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1,
    OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2,
    OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3,
    PREVIOUS_TEXTURE_INPUT_NV = 0x86E4,
    CONST_EYE_NV = 0x86E5,
    PASS_THROUGH_NV = 0x86E6,
    CULL_FRAGMENT_NV = 0x86E7,
    OFFSET_TEXTURE_2D_NV = 0x86E8,
    DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9,
    DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA,
    DOT_PRODUCT_NV = 0x86EC,
    DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED,
    DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE,
    DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0,
    DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1,
    DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2,
    DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3,
    HILO_NV = 0x86F4,
    DSDT_NV = 0x86F5,
    DSDT_MAG_NV = 0x86F6,
    DSDT_MAG_VIB_NV = 0x86F7,
    HILO16_NV = 0x86F8,
    SIGNED_HILO_NV = 0x86F9,
    SIGNED_HILO16_NV = 0x86FA,
    SIGNED_RGBA_NV = 0x86FB,
    SIGNED_RGBA8_NV = 0x86FC,
    SIGNED_RGB_NV = 0x86FE,
    SIGNED_RGB8_NV = 0x86FF,
    SIGNED_LUMINANCE_NV = 0x8701,
    SIGNED_LUMINANCE8_NV = 0x8702,
    SIGNED_LUMINANCE_ALPHA_NV = 0x8703,
    SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704,
    SIGNED_ALPHA_NV = 0x8705,
    SIGNED_ALPHA8_NV = 0x8706,
    SIGNED_INTENSITY_NV = 0x8707,
    SIGNED_INTENSITY8_NV = 0x8708,
    DSDT8_NV = 0x8709,
    DSDT8_MAG8_NV = 0x870A,
    DSDT8_MAG8_INTENSITY8_NV = 0x870B,
    SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C,
    SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D,
    HI_SCALE_NV = 0x870E,
    LO_SCALE_NV = 0x870F,
    DS_SCALE_NV = 0x8710,
    DT_SCALE_NV = 0x8711,
    MAGNITUDE_SCALE_NV = 0x8712,
    VIBRANCE_SCALE_NV = 0x8713,
    HI_BIAS_NV = 0x8714,
    LO_BIAS_NV = 0x8715,
    DS_BIAS_NV = 0x8716,
    DT_BIAS_NV = 0x8717,
    MAGNITUDE_BIAS_NV = 0x8718,
    VIBRANCE_BIAS_NV = 0x8719,
    TEXTURE_BORDER_VALUES_NV = 0x871A,
    TEXTURE_HI_SIZE_NV = 0x871B,
    TEXTURE_LO_SIZE_NV = 0x871C,
    TEXTURE_DS_SIZE_NV = 0x871D,
    TEXTURE_DT_SIZE_NV = 0x871E,
    TEXTURE_MAG_SIZE_NV = 0x871F
  };
  //Definitions for GL_NV_texture_shader2
  enum GL_NV_texture_shader2_consts {
    DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF
  };
  //Definitions for GL_NV_vertex_array_range2
  enum GL_NV_vertex_array_range2_consts {
    VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533
  };
  //Definitions for GL_NV_vertex_program
  enum GL_NV_vertex_program_consts {
    VERTEX_PROGRAM_NV = 0x8620,
    VERTEX_STATE_PROGRAM_NV = 0x8621,
    ATTRIB_ARRAY_SIZE_NV = 0x8623,
    ATTRIB_ARRAY_STRIDE_NV = 0x8624,
    ATTRIB_ARRAY_TYPE_NV = 0x8625,
    CURRENT_ATTRIB_NV = 0x8626,
    PROGRAM_LENGTH_NV = 0x8627,
    PROGRAM_STRING_NV = 0x8628,
    MODELVIEW_PROJECTION_NV = 0x8629,
    IDENTITY_NV = 0x862A,
    INVERSE_NV = 0x862B,
    TRANSPOSE_NV = 0x862C,
    INVERSE_TRANSPOSE_NV = 0x862D,
    MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E,
    MAX_TRACK_MATRICES_NV = 0x862F,
    MATRIX0_NV = 0x8630,
    MATRIX1_NV = 0x8631,
    MATRIX2_NV = 0x8632,
    MATRIX3_NV = 0x8633,
    MATRIX4_NV = 0x8634,
    MATRIX5_NV = 0x8635,
    MATRIX6_NV = 0x8636,
    MATRIX7_NV = 0x8637,
    CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640,
    CURRENT_MATRIX_NV = 0x8641,
    VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642,
    VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643,
    PROGRAM_PARAMETER_NV = 0x8644,
    ATTRIB_ARRAY_POINTER_NV = 0x8645,
    PROGRAM_TARGET_NV = 0x8646,
    PROGRAM_RESIDENT_NV = 0x8647,
    TRACK_MATRIX_NV = 0x8648,
    TRACK_MATRIX_TRANSFORM_NV = 0x8649,
    VERTEX_PROGRAM_BINDING_NV = 0x864A,
    PROGRAM_ERROR_POSITION_NV = 0x864B,
    VERTEX_ATTRIB_ARRAY0_NV = 0x8650,
    VERTEX_ATTRIB_ARRAY1_NV = 0x8651,
    VERTEX_ATTRIB_ARRAY2_NV = 0x8652,
    VERTEX_ATTRIB_ARRAY3_NV = 0x8653,
    VERTEX_ATTRIB_ARRAY4_NV = 0x8654,
    VERTEX_ATTRIB_ARRAY5_NV = 0x8655,
    VERTEX_ATTRIB_ARRAY6_NV = 0x8656,
    VERTEX_ATTRIB_ARRAY7_NV = 0x8657,
    VERTEX_ATTRIB_ARRAY8_NV = 0x8658,
    VERTEX_ATTRIB_ARRAY9_NV = 0x8659,
    VERTEX_ATTRIB_ARRAY10_NV = 0x865A,
    VERTEX_ATTRIB_ARRAY11_NV = 0x865B,
    VERTEX_ATTRIB_ARRAY12_NV = 0x865C,
    VERTEX_ATTRIB_ARRAY13_NV = 0x865D,
    VERTEX_ATTRIB_ARRAY14_NV = 0x865E,
    VERTEX_ATTRIB_ARRAY15_NV = 0x865F,
    MAP1_VERTEX_ATTRIB0_4_NV = 0x8660,
    MAP1_VERTEX_ATTRIB1_4_NV = 0x8661,
    MAP1_VERTEX_ATTRIB2_4_NV = 0x8662,
    MAP1_VERTEX_ATTRIB3_4_NV = 0x8663,
    MAP1_VERTEX_ATTRIB4_4_NV = 0x8664,
    MAP1_VERTEX_ATTRIB5_4_NV = 0x8665,
    MAP1_VERTEX_ATTRIB6_4_NV = 0x8666,
    MAP1_VERTEX_ATTRIB7_4_NV = 0x8667,
    MAP1_VERTEX_ATTRIB8_4_NV = 0x8668,
    MAP1_VERTEX_ATTRIB9_4_NV = 0x8669,
    MAP1_VERTEX_ATTRIB10_4_NV = 0x866A,
    MAP1_VERTEX_ATTRIB11_4_NV = 0x866B,
    MAP1_VERTEX_ATTRIB12_4_NV = 0x866C,
    MAP1_VERTEX_ATTRIB13_4_NV = 0x866D,
    MAP1_VERTEX_ATTRIB14_4_NV = 0x866E,
    MAP1_VERTEX_ATTRIB15_4_NV = 0x866F,
    MAP2_VERTEX_ATTRIB0_4_NV = 0x8670,
    MAP2_VERTEX_ATTRIB1_4_NV = 0x8671,
    MAP2_VERTEX_ATTRIB2_4_NV = 0x8672,
    MAP2_VERTEX_ATTRIB3_4_NV = 0x8673,
    MAP2_VERTEX_ATTRIB4_4_NV = 0x8674,
    MAP2_VERTEX_ATTRIB5_4_NV = 0x8675,
    MAP2_VERTEX_ATTRIB6_4_NV = 0x8676,
    MAP2_VERTEX_ATTRIB7_4_NV = 0x8677,
    MAP2_VERTEX_ATTRIB8_4_NV = 0x8678,
    MAP2_VERTEX_ATTRIB9_4_NV = 0x8679,
    MAP2_VERTEX_ATTRIB10_4_NV = 0x867A,
    MAP2_VERTEX_ATTRIB11_4_NV = 0x867B,
    MAP2_VERTEX_ATTRIB12_4_NV = 0x867C,
    MAP2_VERTEX_ATTRIB13_4_NV = 0x867D,
    MAP2_VERTEX_ATTRIB14_4_NV = 0x867E,
    MAP2_VERTEX_ATTRIB15_4_NV = 0x867F
  };
  typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
  typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
  typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
  typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
  typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
  typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
  typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
  typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
  typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint count, const GLdouble *v);
  typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint count, const GLfloat *v);
  typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
  typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);
  extern VTK_RENDERING_EXPORT PFNGLAREPROGRAMSRESIDENTNVPROC AreProgramsResidentNV;
  extern VTK_RENDERING_EXPORT PFNGLBINDPROGRAMNVPROC BindProgramNV;
  extern VTK_RENDERING_EXPORT PFNGLDELETEPROGRAMSNVPROC DeleteProgramsNV;
  extern VTK_RENDERING_EXPORT PFNGLEXECUTEPROGRAMNVPROC ExecuteProgramNV;
  extern VTK_RENDERING_EXPORT PFNGLGENPROGRAMSNVPROC GenProgramsNV;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMPARAMETERDVNVPROC GetProgramParameterdvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMPARAMETERFVNVPROC GetProgramParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMIVNVPROC GetProgramivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMSTRINGNVPROC GetProgramStringNV;
  extern VTK_RENDERING_EXPORT PFNGLGETTRACKMATRIXIVNVPROC GetTrackMatrixivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBDVNVPROC GetVertexAttribdvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBFVNVPROC GetVertexAttribfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBIVNVPROC GetVertexAttribivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBPOINTERVNVPROC GetVertexAttribPointervNV;
  extern VTK_RENDERING_EXPORT PFNGLISPROGRAMNVPROC IsProgramNV;
  extern VTK_RENDERING_EXPORT PFNGLLOADPROGRAMNVPROC LoadProgramNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMPARAMETER4DNVPROC ProgramParameter4dNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMPARAMETER4DVNVPROC ProgramParameter4dvNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMPARAMETER4FNVPROC ProgramParameter4fNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMPARAMETER4FVNVPROC ProgramParameter4fvNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMPARAMETERS4DVNVPROC ProgramParameters4dvNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMPARAMETERS4FVNVPROC ProgramParameters4fvNV;
  extern VTK_RENDERING_EXPORT PFNGLREQUESTRESIDENTPROGRAMSNVPROC RequestResidentProgramsNV;
  extern VTK_RENDERING_EXPORT PFNGLTRACKMATRIXNVPROC TrackMatrixNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBPOINTERNVPROC VertexAttribPointerNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1DNVPROC VertexAttrib1dNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1DVNVPROC VertexAttrib1dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1FNVPROC VertexAttrib1fNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1FVNVPROC VertexAttrib1fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1SNVPROC VertexAttrib1sNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1SVNVPROC VertexAttrib1svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2DNVPROC VertexAttrib2dNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2DVNVPROC VertexAttrib2dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2FNVPROC VertexAttrib2fNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2FVNVPROC VertexAttrib2fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2SNVPROC VertexAttrib2sNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2SVNVPROC VertexAttrib2svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3DNVPROC VertexAttrib3dNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3DVNVPROC VertexAttrib3dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3FNVPROC VertexAttrib3fNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3FVNVPROC VertexAttrib3fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3SNVPROC VertexAttrib3sNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3SVNVPROC VertexAttrib3svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4DNVPROC VertexAttrib4dNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4DVNVPROC VertexAttrib4dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4FNVPROC VertexAttrib4fNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4FVNVPROC VertexAttrib4fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4SNVPROC VertexAttrib4sNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4SVNVPROC VertexAttrib4svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4UBNVPROC VertexAttrib4ubNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4UBVNVPROC VertexAttrib4ubvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS1DVNVPROC VertexAttribs1dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS1FVNVPROC VertexAttribs1fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS1SVNVPROC VertexAttribs1svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS2DVNVPROC VertexAttribs2dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS2FVNVPROC VertexAttribs2fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS2SVNVPROC VertexAttribs2svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS3DVNVPROC VertexAttribs3dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS3FVNVPROC VertexAttribs3fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS3SVNVPROC VertexAttribs3svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS4DVNVPROC VertexAttribs4dvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS4FVNVPROC VertexAttribs4fvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS4SVNVPROC VertexAttribs4svNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS4UBVNVPROC VertexAttribs4ubvNV;
  //Definitions for GL_SGIX_texture_coordinate_clamp
  enum GL_SGIX_texture_coordinate_clamp_consts {
    TEXTURE_MAX_CLAMP_S_SGIX = 0x8369,
    TEXTURE_MAX_CLAMP_T_SGIX = 0x836A,
    TEXTURE_MAX_CLAMP_R_SGIX = 0x836B
  };
  //Definitions for GL_SGIX_scalebias_hint
  enum GL_SGIX_scalebias_hint_consts {
    SCALEBIAS_HINT_SGIX = 0x8322
  };
  //Definitions for GL_OML_interlace
  enum GL_OML_interlace_consts {
    INTERLACE_OML = 0x8980,
    INTERLACE_READ_OML = 0x8981
  };
  //Definitions for GL_OML_subsample
  enum GL_OML_subsample_consts {
    FORMAT_SUBSAMPLE_24_24_OML = 0x8982,
    FORMAT_SUBSAMPLE_244_244_OML = 0x8983
  };
  //Definitions for GL_OML_resample
  enum GL_OML_resample_consts {
    PACK_RESAMPLE_OML = 0x8984,
    UNPACK_RESAMPLE_OML = 0x8985,
    RESAMPLE_REPLICATE_OML = 0x8986,
    RESAMPLE_ZERO_FILL_OML = 0x8987,
    RESAMPLE_AVERAGE_OML = 0x8988,
    RESAMPLE_DECIMATE_OML = 0x8989
  };
  //Definitions for GL_NV_copy_depth_to_color
  enum GL_NV_copy_depth_to_color_consts {
    DEPTH_STENCIL_TO_RGBA_NV = 0x886E,
    DEPTH_STENCIL_TO_BGRA_NV = 0x886F
  };
  //Definitions for GL_ATI_envmap_bumpmap
  enum GL_ATI_envmap_bumpmap_consts {
    BUMP_ROT_MATRIX_ATI = 0x8775,
    BUMP_ROT_MATRIX_SIZE_ATI = 0x8776,
    BUMP_NUM_TEX_UNITS_ATI = 0x8777,
    BUMP_TEX_UNITS_ATI = 0x8778,
    DUDV_ATI = 0x8779,
    DU8DV8_ATI = 0x877A,
    BUMP_ENVMAP_ATI = 0x877B,
    BUMP_TARGET_ATI = 0x877C
  };
  typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
  typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
  typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
  typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
  extern VTK_RENDERING_EXPORT PFNGLTEXBUMPPARAMETERIVATIPROC TexBumpParameterivATI;
  extern VTK_RENDERING_EXPORT PFNGLTEXBUMPPARAMETERFVATIPROC TexBumpParameterfvATI;
  extern VTK_RENDERING_EXPORT PFNGLGETTEXBUMPPARAMETERIVATIPROC GetTexBumpParameterivATI;
  extern VTK_RENDERING_EXPORT PFNGLGETTEXBUMPPARAMETERFVATIPROC GetTexBumpParameterfvATI;
  //Definitions for GL_ATI_fragment_shader
  enum GL_ATI_fragment_shader_consts {
    FRAGMENT_SHADER_ATI = 0x8920,
    REG_0_ATI = 0x8921,
    REG_1_ATI = 0x8922,
    REG_2_ATI = 0x8923,
    REG_3_ATI = 0x8924,
    REG_4_ATI = 0x8925,
    REG_5_ATI = 0x8926,
    REG_6_ATI = 0x8927,
    REG_7_ATI = 0x8928,
    REG_8_ATI = 0x8929,
    REG_9_ATI = 0x892A,
    REG_10_ATI = 0x892B,
    REG_11_ATI = 0x892C,
    REG_12_ATI = 0x892D,
    REG_13_ATI = 0x892E,
    REG_14_ATI = 0x892F,
    REG_15_ATI = 0x8930,
    REG_16_ATI = 0x8931,
    REG_17_ATI = 0x8932,
    REG_18_ATI = 0x8933,
    REG_19_ATI = 0x8934,
    REG_20_ATI = 0x8935,
    REG_21_ATI = 0x8936,
    REG_22_ATI = 0x8937,
    REG_23_ATI = 0x8938,
    REG_24_ATI = 0x8939,
    REG_25_ATI = 0x893A,
    REG_26_ATI = 0x893B,
    REG_27_ATI = 0x893C,
    REG_28_ATI = 0x893D,
    REG_29_ATI = 0x893E,
    REG_30_ATI = 0x893F,
    REG_31_ATI = 0x8940,
    CON_0_ATI = 0x8941,
    CON_1_ATI = 0x8942,
    CON_2_ATI = 0x8943,
    CON_3_ATI = 0x8944,
    CON_4_ATI = 0x8945,
    CON_5_ATI = 0x8946,
    CON_6_ATI = 0x8947,
    CON_7_ATI = 0x8948,
    CON_8_ATI = 0x8949,
    CON_9_ATI = 0x894A,
    CON_10_ATI = 0x894B,
    CON_11_ATI = 0x894C,
    CON_12_ATI = 0x894D,
    CON_13_ATI = 0x894E,
    CON_14_ATI = 0x894F,
    CON_15_ATI = 0x8950,
    CON_16_ATI = 0x8951,
    CON_17_ATI = 0x8952,
    CON_18_ATI = 0x8953,
    CON_19_ATI = 0x8954,
    CON_20_ATI = 0x8955,
    CON_21_ATI = 0x8956,
    CON_22_ATI = 0x8957,
    CON_23_ATI = 0x8958,
    CON_24_ATI = 0x8959,
    CON_25_ATI = 0x895A,
    CON_26_ATI = 0x895B,
    CON_27_ATI = 0x895C,
    CON_28_ATI = 0x895D,
    CON_29_ATI = 0x895E,
    CON_30_ATI = 0x895F,
    CON_31_ATI = 0x8960,
    MOV_ATI = 0x8961,
    ADD_ATI = 0x8963,
    MUL_ATI = 0x8964,
    SUB_ATI = 0x8965,
    DOT3_ATI = 0x8966,
    DOT4_ATI = 0x8967,
    MAD_ATI = 0x8968,
    LERP_ATI = 0x8969,
    CND_ATI = 0x896A,
    CND0_ATI = 0x896B,
    DOT2_ADD_ATI = 0x896C,
    SECONDARY_INTERPOLATOR_ATI = 0x896D,
    NUM_FRAGMENT_REGISTERS_ATI = 0x896E,
    NUM_FRAGMENT_CONSTANTS_ATI = 0x896F,
    NUM_PASSES_ATI = 0x8970,
    NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971,
    NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972,
    NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973,
    NUM_LOOPBACK_COMPONENTS_ATI = 0x8974,
    COLOR_ALPHA_PAIRING_ATI = 0x8975,
    SWIZZLE_STR_ATI = 0x8976,
    SWIZZLE_STQ_ATI = 0x8977,
    SWIZZLE_STR_DR_ATI = 0x8978,
    SWIZZLE_STQ_DQ_ATI = 0x8979,
    SWIZZLE_STRQ_ATI = 0x897A,
    SWIZZLE_STRQ_DQ_ATI = 0x897B,
    RED_BIT_ATI = 0x00000001,
    GREEN_BIT_ATI = 0x00000002,
    BLUE_BIT_ATI = 0x00000004,
    _2X_BIT_ATI = 0x00000001,
    _4X_BIT_ATI = 0x00000002,
    _8X_BIT_ATI = 0x00000004,
    HALF_BIT_ATI = 0x00000008,
    QUARTER_BIT_ATI = 0x00000010,
    EIGHTH_BIT_ATI = 0x00000020,
    SATURATE_BIT_ATI = 0x00000040,
    COMP_BIT_ATI = 0x00000002,
    NEGATE_BIT_ATI = 0x00000004,
    BIAS_BIT_ATI = 0x00000008
  };
  typedef GLuint (APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
  typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
  typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) (void);
  typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
  typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
  typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
  typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
  typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
  typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
  typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
  typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
  typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);
  extern VTK_RENDERING_EXPORT PFNGLGENFRAGMENTSHADERSATIPROC GenFragmentShadersATI;
  extern VTK_RENDERING_EXPORT PFNGLBINDFRAGMENTSHADERATIPROC BindFragmentShaderATI;
  extern VTK_RENDERING_EXPORT PFNGLDELETEFRAGMENTSHADERATIPROC DeleteFragmentShaderATI;
  extern VTK_RENDERING_EXPORT PFNGLBEGINFRAGMENTSHADERATIPROC BeginFragmentShaderATI;
  extern VTK_RENDERING_EXPORT PFNGLENDFRAGMENTSHADERATIPROC EndFragmentShaderATI;
  extern VTK_RENDERING_EXPORT PFNGLPASSTEXCOORDATIPROC PassTexCoordATI;
  extern VTK_RENDERING_EXPORT PFNGLSAMPLEMAPATIPROC SampleMapATI;
  extern VTK_RENDERING_EXPORT PFNGLCOLORFRAGMENTOP1ATIPROC ColorFragmentOp1ATI;
  extern VTK_RENDERING_EXPORT PFNGLCOLORFRAGMENTOP2ATIPROC ColorFragmentOp2ATI;
  extern VTK_RENDERING_EXPORT PFNGLCOLORFRAGMENTOP3ATIPROC ColorFragmentOp3ATI;
  extern VTK_RENDERING_EXPORT PFNGLALPHAFRAGMENTOP1ATIPROC AlphaFragmentOp1ATI;
  extern VTK_RENDERING_EXPORT PFNGLALPHAFRAGMENTOP2ATIPROC AlphaFragmentOp2ATI;
  extern VTK_RENDERING_EXPORT PFNGLALPHAFRAGMENTOP3ATIPROC AlphaFragmentOp3ATI;
  extern VTK_RENDERING_EXPORT PFNGLSETFRAGMENTSHADERCONSTANTATIPROC SetFragmentShaderConstantATI;
  //Definitions for GL_ATI_pn_triangles
  enum GL_ATI_pn_triangles_consts {
    PN_TRIANGLES_ATI = 0x87F0,
    MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1,
    PN_TRIANGLES_POINT_MODE_ATI = 0x87F2,
    PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3,
    PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4,
    PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5,
    PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6,
    PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7,
    PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8
  };
  typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
  extern VTK_RENDERING_EXPORT PFNGLPNTRIANGLESIATIPROC PNTrianglesiATI;
  extern VTK_RENDERING_EXPORT PFNGLPNTRIANGLESFATIPROC PNTrianglesfATI;
  //Definitions for GL_ATI_vertex_array_object
  enum GL_ATI_vertex_array_object_consts {
    STATIC_ATI = 0x8760,
    DYNAMIC_ATI = 0x8761,
    PRESERVE_ATI = 0x8762,
    DISCARD_ATI = 0x8763,
    OBJECT_BUFFER_SIZE_ATI = 0x8764,
    OBJECT_BUFFER_USAGE_ATI = 0x8765,
    ARRAY_OBJECT_BUFFER_ATI = 0x8766,
    ARRAY_OBJECT_OFFSET_ATI = 0x8767
  };
  typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);
  typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
  typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
  typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
  typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
  typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
  typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
  extern VTK_RENDERING_EXPORT PFNGLNEWOBJECTBUFFERATIPROC NewObjectBufferATI;
  extern VTK_RENDERING_EXPORT PFNGLISOBJECTBUFFERATIPROC IsObjectBufferATI;
  extern VTK_RENDERING_EXPORT PFNGLUPDATEOBJECTBUFFERATIPROC UpdateObjectBufferATI;
  extern VTK_RENDERING_EXPORT PFNGLGETOBJECTBUFFERFVATIPROC GetObjectBufferfvATI;
  extern VTK_RENDERING_EXPORT PFNGLGETOBJECTBUFFERIVATIPROC GetObjectBufferivATI;
  extern VTK_RENDERING_EXPORT PFNGLFREEOBJECTBUFFERATIPROC FreeObjectBufferATI;
  extern VTK_RENDERING_EXPORT PFNGLARRAYOBJECTATIPROC ArrayObjectATI;
  extern VTK_RENDERING_EXPORT PFNGLGETARRAYOBJECTFVATIPROC GetArrayObjectfvATI;
  extern VTK_RENDERING_EXPORT PFNGLGETARRAYOBJECTIVATIPROC GetArrayObjectivATI;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTARRAYOBJECTATIPROC VariantArrayObjectATI;
  extern VTK_RENDERING_EXPORT PFNGLGETVARIANTARRAYOBJECTFVATIPROC GetVariantArrayObjectfvATI;
  extern VTK_RENDERING_EXPORT PFNGLGETVARIANTARRAYOBJECTIVATIPROC GetVariantArrayObjectivATI;
  //Definitions for GL_EXT_vertex_shader
  enum GL_EXT_vertex_shader_consts {
    VERTEX_SHADER_EXT = 0x8780,
    VERTEX_SHADER_BINDING_EXT = 0x8781,
    OP_INDEX_EXT = 0x8782,
    OP_NEGATE_EXT = 0x8783,
    OP_DOT3_EXT = 0x8784,
    OP_DOT4_EXT = 0x8785,
    OP_MUL_EXT = 0x8786,
    OP_ADD_EXT = 0x8787,
    OP_MADD_EXT = 0x8788,
    OP_FRAC_EXT = 0x8789,
    OP_MAX_EXT = 0x878A,
    OP_MIN_EXT = 0x878B,
    OP_SET_GE_EXT = 0x878C,
    OP_SET_LT_EXT = 0x878D,
    OP_CLAMP_EXT = 0x878E,
    OP_FLOOR_EXT = 0x878F,
    OP_ROUND_EXT = 0x8790,
    OP_EXP_BASE_2_EXT = 0x8791,
    OP_LOG_BASE_2_EXT = 0x8792,
    OP_POWER_EXT = 0x8793,
    OP_RECIP_EXT = 0x8794,
    OP_RECIP_SQRT_EXT = 0x8795,
    OP_SUB_EXT = 0x8796,
    OP_CROSS_PRODUCT_EXT = 0x8797,
    OP_MULTIPLY_MATRIX_EXT = 0x8798,
    OP_MOV_EXT = 0x8799,
    OUTPUT_VERTEX_EXT = 0x879A,
    OUTPUT_COLOR0_EXT = 0x879B,
    OUTPUT_COLOR1_EXT = 0x879C,
    OUTPUT_TEXTURE_COORD0_EXT = 0x879D,
    OUTPUT_TEXTURE_COORD1_EXT = 0x879E,
    OUTPUT_TEXTURE_COORD2_EXT = 0x879F,
    OUTPUT_TEXTURE_COORD3_EXT = 0x87A0,
    OUTPUT_TEXTURE_COORD4_EXT = 0x87A1,
    OUTPUT_TEXTURE_COORD5_EXT = 0x87A2,
    OUTPUT_TEXTURE_COORD6_EXT = 0x87A3,
    OUTPUT_TEXTURE_COORD7_EXT = 0x87A4,
    OUTPUT_TEXTURE_COORD8_EXT = 0x87A5,
    OUTPUT_TEXTURE_COORD9_EXT = 0x87A6,
    OUTPUT_TEXTURE_COORD10_EXT = 0x87A7,
    OUTPUT_TEXTURE_COORD11_EXT = 0x87A8,
    OUTPUT_TEXTURE_COORD12_EXT = 0x87A9,
    OUTPUT_TEXTURE_COORD13_EXT = 0x87AA,
    OUTPUT_TEXTURE_COORD14_EXT = 0x87AB,
    OUTPUT_TEXTURE_COORD15_EXT = 0x87AC,
    OUTPUT_TEXTURE_COORD16_EXT = 0x87AD,
    OUTPUT_TEXTURE_COORD17_EXT = 0x87AE,
    OUTPUT_TEXTURE_COORD18_EXT = 0x87AF,
    OUTPUT_TEXTURE_COORD19_EXT = 0x87B0,
    OUTPUT_TEXTURE_COORD20_EXT = 0x87B1,
    OUTPUT_TEXTURE_COORD21_EXT = 0x87B2,
    OUTPUT_TEXTURE_COORD22_EXT = 0x87B3,
    OUTPUT_TEXTURE_COORD23_EXT = 0x87B4,
    OUTPUT_TEXTURE_COORD24_EXT = 0x87B5,
    OUTPUT_TEXTURE_COORD25_EXT = 0x87B6,
    OUTPUT_TEXTURE_COORD26_EXT = 0x87B7,
    OUTPUT_TEXTURE_COORD27_EXT = 0x87B8,
    OUTPUT_TEXTURE_COORD28_EXT = 0x87B9,
    OUTPUT_TEXTURE_COORD29_EXT = 0x87BA,
    OUTPUT_TEXTURE_COORD30_EXT = 0x87BB,
    OUTPUT_TEXTURE_COORD31_EXT = 0x87BC,
    OUTPUT_FOG_EXT = 0x87BD,
    SCALAR_EXT = 0x87BE,
    VECTOR_EXT = 0x87BF,
    MATRIX_EXT = 0x87C0,
    VARIANT_EXT = 0x87C1,
    INVARIANT_EXT = 0x87C2,
    LOCAL_CONSTANT_EXT = 0x87C3,
    LOCAL_EXT = 0x87C4,
    MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5,
    MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6,
    MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7,
    MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8,
    MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9,
    MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA,
    MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB,
    MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC,
    MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD,
    MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE,
    VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF,
    VERTEX_SHADER_VARIANTS_EXT = 0x87D0,
    VERTEX_SHADER_INVARIANTS_EXT = 0x87D1,
    VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2,
    VERTEX_SHADER_LOCALS_EXT = 0x87D3,
    VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4,
    X_EXT = 0x87D5,
    Y_EXT = 0x87D6,
    Z_EXT = 0x87D7,
    W_EXT = 0x87D8,
    NEGATIVE_X_EXT = 0x87D9,
    NEGATIVE_Y_EXT = 0x87DA,
    NEGATIVE_Z_EXT = 0x87DB,
    NEGATIVE_W_EXT = 0x87DC,
    ZERO_EXT = 0x87DD,
    ONE_EXT = 0x87DE,
    NEGATIVE_ONE_EXT = 0x87DF,
    NORMALIZED_RANGE_EXT = 0x87E0,
    FULL_RANGE_EXT = 0x87E1,
    CURRENT_VERTEX_EXT = 0x87E2,
    MVP_MATRIX_EXT = 0x87E3,
    VARIANT_VALUE_EXT = 0x87E4,
    VARIANT_DATATYPE_EXT = 0x87E5,
    VARIANT_ARRAY_STRIDE_EXT = 0x87E6,
    VARIANT_ARRAY_TYPE_EXT = 0x87E7,
    VARIANT_ARRAY_EXT = 0x87E8,
    VARIANT_ARRAY_POINTER_EXT = 0x87E9,
    INVARIANT_VALUE_EXT = 0x87EA,
    INVARIANT_DATATYPE_EXT = 0x87EB,
    LOCAL_CONSTANT_VALUE_EXT = 0x87EC,
    LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED
  };
  typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) (void);
  typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC) (void);
  typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
  typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
  typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
  typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
  typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
  typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
  typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
  typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
  typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
  typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
  typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
  typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
  typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
  typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
  typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
  typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
  typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
  typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
  typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
  typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
  typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
  typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
  typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
  typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
  typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
  typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
  typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value);
  typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
  typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
  typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
  typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
  typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid* *data);
  typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
  typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
  typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
  typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
  typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
  typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
  extern VTK_RENDERING_EXPORT PFNGLBEGINVERTEXSHADEREXTPROC BeginVertexShaderEXT;
  extern VTK_RENDERING_EXPORT PFNGLENDVERTEXSHADEREXTPROC EndVertexShaderEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINDVERTEXSHADEREXTPROC BindVertexShaderEXT;
  extern VTK_RENDERING_EXPORT PFNGLGENVERTEXSHADERSEXTPROC GenVertexShadersEXT;
  extern VTK_RENDERING_EXPORT PFNGLDELETEVERTEXSHADEREXTPROC DeleteVertexShaderEXT;
  extern VTK_RENDERING_EXPORT PFNGLSHADEROP1EXTPROC ShaderOp1EXT;
  extern VTK_RENDERING_EXPORT PFNGLSHADEROP2EXTPROC ShaderOp2EXT;
  extern VTK_RENDERING_EXPORT PFNGLSHADEROP3EXTPROC ShaderOp3EXT;
  extern VTK_RENDERING_EXPORT PFNGLSWIZZLEEXTPROC SwizzleEXT;
  extern VTK_RENDERING_EXPORT PFNGLWRITEMASKEXTPROC WriteMaskEXT;
  extern VTK_RENDERING_EXPORT PFNGLINSERTCOMPONENTEXTPROC InsertComponentEXT;
  extern VTK_RENDERING_EXPORT PFNGLEXTRACTCOMPONENTEXTPROC ExtractComponentEXT;
  extern VTK_RENDERING_EXPORT PFNGLGENSYMBOLSEXTPROC GenSymbolsEXT;
  extern VTK_RENDERING_EXPORT PFNGLSETINVARIANTEXTPROC SetInvariantEXT;
  extern VTK_RENDERING_EXPORT PFNGLSETLOCALCONSTANTEXTPROC SetLocalConstantEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTBVEXTPROC VariantbvEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTSVEXTPROC VariantsvEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTIVEXTPROC VariantivEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTFVEXTPROC VariantfvEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTDVEXTPROC VariantdvEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTUBVEXTPROC VariantubvEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTUSVEXTPROC VariantusvEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTUIVEXTPROC VariantuivEXT;
  extern VTK_RENDERING_EXPORT PFNGLVARIANTPOINTEREXTPROC VariantPointerEXT;
  extern VTK_RENDERING_EXPORT PFNGLENABLEVARIANTCLIENTSTATEEXTPROC EnableVariantClientStateEXT;
  extern VTK_RENDERING_EXPORT PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC DisableVariantClientStateEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINDLIGHTPARAMETEREXTPROC BindLightParameterEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINDMATERIALPARAMETEREXTPROC BindMaterialParameterEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINDTEXGENPARAMETEREXTPROC BindTexGenParameterEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINDTEXTUREUNITPARAMETEREXTPROC BindTextureUnitParameterEXT;
  extern VTK_RENDERING_EXPORT PFNGLBINDPARAMETEREXTPROC BindParameterEXT;
  extern VTK_RENDERING_EXPORT PFNGLISVARIANTENABLEDEXTPROC IsVariantEnabledEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETVARIANTBOOLEANVEXTPROC GetVariantBooleanvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETVARIANTINTEGERVEXTPROC GetVariantIntegervEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETVARIANTFLOATVEXTPROC GetVariantFloatvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETVARIANTPOINTERVEXTPROC GetVariantPointervEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETINVARIANTBOOLEANVEXTPROC GetInvariantBooleanvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETINVARIANTINTEGERVEXTPROC GetInvariantIntegervEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETINVARIANTFLOATVEXTPROC GetInvariantFloatvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC GetLocalConstantBooleanvEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETLOCALCONSTANTINTEGERVEXTPROC GetLocalConstantIntegervEXT;
  extern VTK_RENDERING_EXPORT PFNGLGETLOCALCONSTANTFLOATVEXTPROC GetLocalConstantFloatvEXT;
  //Definitions for GL_ATI_vertex_streams
  enum GL_ATI_vertex_streams_consts {
    MAX_VERTEX_STREAMS_ATI = 0x876B,
    VERTEX_STREAM0_ATI = 0x876C,
    VERTEX_STREAM1_ATI = 0x876D,
    VERTEX_STREAM2_ATI = 0x876E,
    VERTEX_STREAM3_ATI = 0x876F,
    VERTEX_STREAM4_ATI = 0x8770,
    VERTEX_STREAM5_ATI = 0x8771,
    VERTEX_STREAM6_ATI = 0x8772,
    VERTEX_STREAM7_ATI = 0x8773,
    VERTEX_SOURCE_ATI = 0x8774
  };
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
  typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
  typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
  typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1SATIPROC VertexStream1sATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1SVATIPROC VertexStream1svATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1IATIPROC VertexStream1iATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1IVATIPROC VertexStream1ivATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1FATIPROC VertexStream1fATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1FVATIPROC VertexStream1fvATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1DATIPROC VertexStream1dATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM1DVATIPROC VertexStream1dvATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2SATIPROC VertexStream2sATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2SVATIPROC VertexStream2svATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2IATIPROC VertexStream2iATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2IVATIPROC VertexStream2ivATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2FATIPROC VertexStream2fATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2FVATIPROC VertexStream2fvATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2DATIPROC VertexStream2dATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM2DVATIPROC VertexStream2dvATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3SATIPROC VertexStream3sATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3SVATIPROC VertexStream3svATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3IATIPROC VertexStream3iATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3IVATIPROC VertexStream3ivATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3FATIPROC VertexStream3fATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3FVATIPROC VertexStream3fvATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3DATIPROC VertexStream3dATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM3DVATIPROC VertexStream3dvATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4SATIPROC VertexStream4sATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4SVATIPROC VertexStream4svATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4IATIPROC VertexStream4iATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4IVATIPROC VertexStream4ivATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4FATIPROC VertexStream4fATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4FVATIPROC VertexStream4fvATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4DATIPROC VertexStream4dATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXSTREAM4DVATIPROC VertexStream4dvATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3BATIPROC NormalStream3bATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3BVATIPROC NormalStream3bvATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3SATIPROC NormalStream3sATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3SVATIPROC NormalStream3svATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3IATIPROC NormalStream3iATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3IVATIPROC NormalStream3ivATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3FATIPROC NormalStream3fATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3FVATIPROC NormalStream3fvATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3DATIPROC NormalStream3dATI;
  extern VTK_RENDERING_EXPORT PFNGLNORMALSTREAM3DVATIPROC NormalStream3dvATI;
  extern VTK_RENDERING_EXPORT PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC ClientActiveVertexStreamATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXBLENDENVIATIPROC VertexBlendEnviATI;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXBLENDENVFATIPROC VertexBlendEnvfATI;
  //Definitions for GL_ATI_element_array
  enum GL_ATI_element_array_consts {
    ELEMENT_ARRAY_ATI = 0x8768,
    ELEMENT_ARRAY_TYPE_ATI = 0x8769,
    ELEMENT_ARRAY_POINTER_ATI = 0x876A
  };
  typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
  typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
  extern VTK_RENDERING_EXPORT PFNGLELEMENTPOINTERATIPROC ElementPointerATI;
  extern VTK_RENDERING_EXPORT PFNGLDRAWELEMENTARRAYATIPROC DrawElementArrayATI;
  extern VTK_RENDERING_EXPORT PFNGLDRAWRANGEELEMENTARRAYATIPROC DrawRangeElementArrayATI;
  //Definitions for GL_SUN_mesh_array
  enum GL_SUN_mesh_array_consts {
    QUAD_MESH_SUN = 0x8614,
    TRIANGLE_MESH_SUN = 0x8615
  };
  typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);
  extern VTK_RENDERING_EXPORT PFNGLDRAWMESHARRAYSSUNPROC DrawMeshArraysSUN;
  //Definitions for GL_SUN_slice_accum
  enum GL_SUN_slice_accum_consts {
    SLICE_ACCUM_SUN = 0x85CC
  };
  //Definitions for GL_NV_multisample_filter_hint
  enum GL_NV_multisample_filter_hint_consts {
    MULTISAMPLE_FILTER_HINT_NV = 0x8534
  };
  //Definitions for GL_NV_depth_clamp
  enum GL_NV_depth_clamp_consts {
    DEPTH_CLAMP_NV = 0x864F
  };
  //Definitions for GL_NV_occlusion_query
  enum GL_NV_occlusion_query_consts {
    PIXEL_COUNTER_BITS_NV = 0x8864,
    CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865,
    PIXEL_COUNT_NV = 0x8866,
    PIXEL_COUNT_AVAILABLE_NV = 0x8867
  };
  typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
  typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
  typedef GLboolean (APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
  typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) (void);
  typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
  typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);
  extern VTK_RENDERING_EXPORT PFNGLGENOCCLUSIONQUERIESNVPROC GenOcclusionQueriesNV;
  extern VTK_RENDERING_EXPORT PFNGLDELETEOCCLUSIONQUERIESNVPROC DeleteOcclusionQueriesNV;
  extern VTK_RENDERING_EXPORT PFNGLISOCCLUSIONQUERYNVPROC IsOcclusionQueryNV;
  extern VTK_RENDERING_EXPORT PFNGLBEGINOCCLUSIONQUERYNVPROC BeginOcclusionQueryNV;
  extern VTK_RENDERING_EXPORT PFNGLENDOCCLUSIONQUERYNVPROC EndOcclusionQueryNV;
  extern VTK_RENDERING_EXPORT PFNGLGETOCCLUSIONQUERYIVNVPROC GetOcclusionQueryivNV;
  extern VTK_RENDERING_EXPORT PFNGLGETOCCLUSIONQUERYUIVNVPROC GetOcclusionQueryuivNV;
  //Definitions for GL_NV_point_sprite
  enum GL_NV_point_sprite_consts {
    POINT_SPRITE_NV = 0x8861,
    COORD_REPLACE_NV = 0x8862,
    POINT_SPRITE_R_MODE_NV = 0x8863
  };
  typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
  typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERINVPROC PointParameteriNV;
  extern VTK_RENDERING_EXPORT PFNGLPOINTPARAMETERIVNVPROC PointParameterivNV;
  //Definitions for GL_NV_texture_shader3
  enum GL_NV_texture_shader3_consts {
    OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850,
    OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851,
    OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852,
    OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853,
    OFFSET_HILO_TEXTURE_2D_NV = 0x8854,
    OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855,
    OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856,
    OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857,
    DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858,
    DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859,
    DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A,
    DOT_PRODUCT_PASS_THROUGH_NV = 0x885B,
    DOT_PRODUCT_TEXTURE_1D_NV = 0x885C,
    DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D,
    HILO8_NV = 0x885E,
    SIGNED_HILO8_NV = 0x885F,
    FORCE_BLUE_TO_ONE_NV = 0x8860
  };
  //Definitions for GL_NV_vertex_program1_1
  //Definitions for GL_EXT_shadow_funcs
  //Definitions for GL_EXT_stencil_two_side
  enum GL_EXT_stencil_two_side_consts {
    STENCIL_TEST_TWO_SIDE_EXT = 0x8910,
    ACTIVE_STENCIL_FACE_EXT = 0x8911
  };
  typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
  extern VTK_RENDERING_EXPORT PFNGLACTIVESTENCILFACEEXTPROC ActiveStencilFaceEXT;
  //Definitions for GL_ATI_text_fragment_shader
  enum GL_ATI_text_fragment_shader_consts {
    TEXT_FRAGMENT_SHADER_ATI = 0x8200
  };
  //Definitions for GL_APPLE_client_storage
  enum GL_APPLE_client_storage_consts {
    UNPACK_CLIENT_STORAGE_APPLE = 0x85B2
  };
  //Definitions for GL_APPLE_element_array
  enum GL_APPLE_element_array_consts {
    ELEMENT_ARRAY_APPLE = 0x8768,
    ELEMENT_ARRAY_TYPE_APPLE = 0x8769,
    ELEMENT_ARRAY_POINTER_APPLE = 0x876A
  };
  typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const GLvoid *pointer);
  typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
  typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
  typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
  typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
  extern VTK_RENDERING_EXPORT PFNGLELEMENTPOINTERAPPLEPROC ElementPointerAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLDRAWELEMENTARRAYAPPLEPROC DrawElementArrayAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC DrawRangeElementArrayAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC MultiDrawElementArrayAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC MultiDrawRangeElementArrayAPPLE;
  //Definitions for GL_APPLE_fence
  enum GL_APPLE_fence_consts {
    DRAW_PIXELS_APPLE = 0x8A0A,
    FENCE_APPLE = 0x8A0B
  };
  typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
  typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
  typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC) (GLuint fence);
  typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence);
  typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
  typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
  typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
  typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
  extern VTK_RENDERING_EXPORT PFNGLGENFENCESAPPLEPROC GenFencesAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLDELETEFENCESAPPLEPROC DeleteFencesAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLSETFENCEAPPLEPROC SetFenceAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLISFENCEAPPLEPROC IsFenceAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLTESTFENCEAPPLEPROC TestFenceAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLFINISHFENCEAPPLEPROC FinishFenceAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLTESTOBJECTAPPLEPROC TestObjectAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLFINISHOBJECTAPPLEPROC FinishObjectAPPLE;
  //Definitions for GL_APPLE_vertex_array_object
  enum GL_APPLE_vertex_array_object_consts {
    VERTEX_ARRAY_BINDING_APPLE = 0x85B5
  };
  typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
  typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
  typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
  typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
  extern VTK_RENDERING_EXPORT PFNGLBINDVERTEXARRAYAPPLEPROC BindVertexArrayAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLDELETEVERTEXARRAYSAPPLEPROC DeleteVertexArraysAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLGENVERTEXARRAYSAPPLEPROC GenVertexArraysAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLISVERTEXARRAYAPPLEPROC IsVertexArrayAPPLE;
  //Definitions for GL_APPLE_vertex_array_range
  enum GL_APPLE_vertex_array_range_consts {
    VERTEX_ARRAY_RANGE_APPLE = 0x851D,
    VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E,
    VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F,
    VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521,
    STORAGE_CACHED_APPLE = 0x85BE,
    STORAGE_SHARED_APPLE = 0x85BF
  };
  typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
  typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
  typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
  extern VTK_RENDERING_EXPORT PFNGLVERTEXARRAYRANGEAPPLEPROC VertexArrayRangeAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC FlushVertexArrayRangeAPPLE;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXARRAYPARAMETERIAPPLEPROC VertexArrayParameteriAPPLE;
  //Definitions for GL_APPLE_ycbcr_422
  enum GL_APPLE_ycbcr_422_consts {
    YCBCR_422_APPLE = 0x85B9,
    UNSIGNED_SHORT_8_8_APPLE = 0x85BA,
    UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB
  };
  //Definitions for GL_S3_s3tc
  enum GL_S3_s3tc_consts {
    RGB_S3TC = 0x83A0,
    RGB4_S3TC = 0x83A1,
    RGBA_S3TC = 0x83A2,
    RGBA4_S3TC = 0x83A3
  };
  //Definitions for GL_ATI_draw_buffers
  enum GL_ATI_draw_buffers_consts {
    MAX_DRAW_BUFFERS_ATI = 0x8824,
    DRAW_BUFFER0_ATI = 0x8825,
    DRAW_BUFFER1_ATI = 0x8826,
    DRAW_BUFFER2_ATI = 0x8827,
    DRAW_BUFFER3_ATI = 0x8828,
    DRAW_BUFFER4_ATI = 0x8829,
    DRAW_BUFFER5_ATI = 0x882A,
    DRAW_BUFFER6_ATI = 0x882B,
    DRAW_BUFFER7_ATI = 0x882C,
    DRAW_BUFFER8_ATI = 0x882D,
    DRAW_BUFFER9_ATI = 0x882E,
    DRAW_BUFFER10_ATI = 0x882F,
    DRAW_BUFFER11_ATI = 0x8830,
    DRAW_BUFFER12_ATI = 0x8831,
    DRAW_BUFFER13_ATI = 0x8832,
    DRAW_BUFFER14_ATI = 0x8833,
    DRAW_BUFFER15_ATI = 0x8834
  };
  typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);
  extern VTK_RENDERING_EXPORT PFNGLDRAWBUFFERSATIPROC DrawBuffersATI;
  //Definitions for GL_ATI_pixel_format_float
  enum GL_ATI_pixel_format_float_consts {
    TYPE_RGBA_FLOAT_ATI = 0x8820,
    COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835
  };
  //Definitions for GL_ATI_texture_env_combine3
  enum GL_ATI_texture_env_combine3_consts {
    MODULATE_ADD_ATI = 0x8744,
    MODULATE_SIGNED_ADD_ATI = 0x8745,
    MODULATE_SUBTRACT_ATI = 0x8746
  };
  //Definitions for GL_ATI_texture_float
  enum GL_ATI_texture_float_consts {
    RGBA_FLOAT32_ATI = 0x8814,
    RGB_FLOAT32_ATI = 0x8815,
    ALPHA_FLOAT32_ATI = 0x8816,
    INTENSITY_FLOAT32_ATI = 0x8817,
    LUMINANCE_FLOAT32_ATI = 0x8818,
    LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819,
    RGBA_FLOAT16_ATI = 0x881A,
    RGB_FLOAT16_ATI = 0x881B,
    ALPHA_FLOAT16_ATI = 0x881C,
    INTENSITY_FLOAT16_ATI = 0x881D,
    LUMINANCE_FLOAT16_ATI = 0x881E,
    LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F
  };
  //Definitions for GL_NV_float_buffer
  enum GL_NV_float_buffer_consts {
    FLOAT_R_NV = 0x8880,
    FLOAT_RG_NV = 0x8881,
    FLOAT_RGB_NV = 0x8882,
    FLOAT_RGBA_NV = 0x8883,
    FLOAT_R16_NV = 0x8884,
    FLOAT_R32_NV = 0x8885,
    FLOAT_RG16_NV = 0x8886,
    FLOAT_RG32_NV = 0x8887,
    FLOAT_RGB16_NV = 0x8888,
    FLOAT_RGB32_NV = 0x8889,
    FLOAT_RGBA16_NV = 0x888A,
    FLOAT_RGBA32_NV = 0x888B,
    TEXTURE_FLOAT_COMPONENTS_NV = 0x888C,
    FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D,
    FLOAT_RGBA_MODE_NV = 0x888E
  };
  //Definitions for GL_NV_fragment_program
  enum GL_NV_fragment_program_consts {
    MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868,
    FRAGMENT_PROGRAM_NV = 0x8870,
    MAX_TEXTURE_COORDS_NV = 0x8871,
    MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872,
    FRAGMENT_PROGRAM_BINDING_NV = 0x8873,
    PROGRAM_ERROR_STRING_NV = 0x8874
  };
  typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
  typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
  typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
  typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
  typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FNVPROC ProgramNamedParameter4fNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DNVPROC ProgramNamedParameter4dNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC ProgramNamedParameter4fvNV;
  extern VTK_RENDERING_EXPORT PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC ProgramNamedParameter4dvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC GetProgramNamedParameterfvNV;
  extern VTK_RENDERING_EXPORT PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC GetProgramNamedParameterdvNV;
  //Definitions for GL_NV_half_float
  enum GL_NV_half_float_consts {
    HALF_FLOAT_NV = 0x140B
  };
  typedef unsigned short GLhalfNV;
  typedef void (APIENTRYP PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
  typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
  typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
  typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
  typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
  typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
  typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
  typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
  typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
  typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
  typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
  typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
  typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
  typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
  typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
  typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
  typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
  extern VTK_RENDERING_EXPORT PFNGLVERTEX2HNVPROC Vertex2hNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEX2HVNVPROC Vertex2hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEX3HNVPROC Vertex3hNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEX3HVNVPROC Vertex3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEX4HNVPROC Vertex4hNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEX4HVNVPROC Vertex4hvNV;
  extern VTK_RENDERING_EXPORT PFNGLNORMAL3HNVPROC Normal3hNV;
  extern VTK_RENDERING_EXPORT PFNGLNORMAL3HVNVPROC Normal3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR3HNVPROC Color3hNV;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR3HVNVPROC Color3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4HNVPROC Color4hNV;
  extern VTK_RENDERING_EXPORT PFNGLCOLOR4HVNVPROC Color4hvNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD1HNVPROC TexCoord1hNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD1HVNVPROC TexCoord1hvNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2HNVPROC TexCoord2hNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD2HVNVPROC TexCoord2hvNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD3HNVPROC TexCoord3hNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD3HVNVPROC TexCoord3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD4HNVPROC TexCoord4hNV;
  extern VTK_RENDERING_EXPORT PFNGLTEXCOORD4HVNVPROC TexCoord4hvNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1HNVPROC MultiTexCoord1hNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD1HVNVPROC MultiTexCoord1hvNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2HNVPROC MultiTexCoord2hNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD2HVNVPROC MultiTexCoord2hvNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3HNVPROC MultiTexCoord3hNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD3HVNVPROC MultiTexCoord3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4HNVPROC MultiTexCoord4hNV;
  extern VTK_RENDERING_EXPORT PFNGLMULTITEXCOORD4HVNVPROC MultiTexCoord4hvNV;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDHNVPROC FogCoordhNV;
  extern VTK_RENDERING_EXPORT PFNGLFOGCOORDHVNVPROC FogCoordhvNV;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3HNVPROC SecondaryColor3hNV;
  extern VTK_RENDERING_EXPORT PFNGLSECONDARYCOLOR3HVNVPROC SecondaryColor3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXWEIGHTHNVPROC VertexWeighthNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXWEIGHTHVNVPROC VertexWeighthvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1HNVPROC VertexAttrib1hNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB1HVNVPROC VertexAttrib1hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2HNVPROC VertexAttrib2hNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB2HVNVPROC VertexAttrib2hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3HNVPROC VertexAttrib3hNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB3HVNVPROC VertexAttrib3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4HNVPROC VertexAttrib4hNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIB4HVNVPROC VertexAttrib4hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS1HVNVPROC VertexAttribs1hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS2HVNVPROC VertexAttribs2hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS3HVNVPROC VertexAttribs3hvNV;
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBS4HVNVPROC VertexAttribs4hvNV;
  //Definitions for GL_NV_pixel_data_range
  enum GL_NV_pixel_data_range_consts {
    WRITE_PIXEL_DATA_RANGE_NV = 0x8878,
    READ_PIXEL_DATA_RANGE_NV = 0x8879,
    WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A,
    READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B,
    WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C,
    READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D
  };
  typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, GLvoid *pointer);
  typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
  extern VTK_RENDERING_EXPORT PFNGLPIXELDATARANGENVPROC PixelDataRangeNV;
  extern VTK_RENDERING_EXPORT PFNGLFLUSHPIXELDATARANGENVPROC FlushPixelDataRangeNV;
  //Definitions for GL_NV_primitive_restart
  enum GL_NV_primitive_restart_consts {
    PRIMITIVE_RESTART_NV = 0x8558,
    PRIMITIVE_RESTART_INDEX_NV = 0x8559
  };
  typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC) (void);
  typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
  extern VTK_RENDERING_EXPORT PFNGLPRIMITIVERESTARTNVPROC PrimitiveRestartNV;
  extern VTK_RENDERING_EXPORT PFNGLPRIMITIVERESTARTINDEXNVPROC PrimitiveRestartIndexNV;
  //Definitions for GL_NV_texture_expand_normal
  enum GL_NV_texture_expand_normal_consts {
    TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F
  };
  //Definitions for GL_NV_vertex_program2
  //Definitions for GL_ATI_map_object_buffer
  typedef GLvoid* (APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
  typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
  extern VTK_RENDERING_EXPORT PFNGLMAPOBJECTBUFFERATIPROC MapObjectBufferATI;
  extern VTK_RENDERING_EXPORT PFNGLUNMAPOBJECTBUFFERATIPROC UnmapObjectBufferATI;
  //Definitions for GL_ATI_separate_stencil
  enum GL_ATI_separate_stencil_consts {
    STENCIL_BACK_FUNC_ATI = 0x8800,
    STENCIL_BACK_FAIL_ATI = 0x8801,
    STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802,
    STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803
  };
  typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
  typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
  extern VTK_RENDERING_EXPORT PFNGLSTENCILOPSEPARATEATIPROC StencilOpSeparateATI;
  extern VTK_RENDERING_EXPORT PFNGLSTENCILFUNCSEPARATEATIPROC StencilFuncSeparateATI;
  //Definitions for GL_ATI_vertex_attrib_array_object
  typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
  typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);
  extern VTK_RENDERING_EXPORT PFNGLVERTEXATTRIBARRAYOBJECTATIPROC VertexAttribArrayObjectATI;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC GetVertexAttribArrayObjectfvATI;
  extern VTK_RENDERING_EXPORT PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC GetVertexAttribArrayObjectivATI;
  //Definitions for GL_OES_read_format
  enum GL_OES_read_format_consts {
    IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A,
    IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B
  };
  //Definitions for GL_EXT_depth_bounds_test
  enum GL_EXT_depth_bounds_test_consts {
    DEPTH_BOUNDS_TEST_EXT = 0x8890,
    DEPTH_BOUNDS_EXT = 0x8891
  };
  typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
  extern VTK_RENDERING_EXPORT PFNGLDEPTHBOUNDSEXTPROC DepthBoundsEXT;
  //Definitions for GL_EXT_texture_mirror_clamp
  enum GL_EXT_texture_mirror_clamp_consts {
    MIRROR_CLAMP_EXT = 0x8742,
    MIRROR_CLAMP_TO_EDGE_EXT = 0x8743,
    MIRROR_CLAMP_TO_BORDER_EXT = 0x8912
  };
  //Definitions for GL_EXT_blend_equation_separate
  enum GL_EXT_blend_equation_separate_consts {
    BLEND_EQUATION_RGB_EXT = 0x8009,
    BLEND_EQUATION_ALPHA_EXT = 0x883D
  };
  typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
  extern VTK_RENDERING_EXPORT PFNGLBLENDEQUATIONSEPARATEEXTPROC BlendEquationSeparateEXT;
  //Definitions for GL_MESA_pack_invert
  enum GL_MESA_pack_invert_consts {
    PACK_INVERT_MESA = 0x8758
  };
  //Definitions for GL_MESA_ycbcr_texture
  enum GL_MESA_ycbcr_texture_consts {
    UNSIGNED_SHORT_8_8_MESA = 0x85BA,
    UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB,
    YCBCR_MESA = 0x8757
  };
  //Definitions for GL_EXT_pixel_buffer_object
  enum GL_EXT_pixel_buffer_object_consts {
    PIXEL_PACK_BUFFER_EXT = 0x88EB,
    PIXEL_UNPACK_BUFFER_EXT = 0x88EC,
    PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED,
    PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF
  };
  //Definitions for GL_NV_fragment_program_option
  //Definitions for GL_NV_fragment_program2
  enum GL_NV_fragment_program2_consts {
    MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4,
    MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5,
    MAX_PROGRAM_IF_DEPTH_NV = 0x88F6,
    MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7,
    MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8
  };
  //Definitions for GL_NV_vertex_program2_option
  //Definitions for GL_NV_vertex_program3
  //Definitions for GL_EXT_color_matrix
  //Definitions for GL_SGIX_texture_select
  //Definitions for GL_INGR_blend_func_separate
  typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
  extern VTK_RENDERING_EXPORT PFNGLBLENDFUNCSEPARATEINGRPROC BlendFuncSeparateINGR;
  //Definitions for GL_SGIX_depth_pass_instrument
  //Definitions for GL_SGIX_igloo_interface
  typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const GLvoid *params);
  extern VTK_RENDERING_EXPORT PFNGLIGLOOINTERFACESGIXPROC IglooInterfaceSGIX;

  // Method to load functions for a particular extension.
  int LoadExtension(const char *name, vtkOpenGLExtensionManager *manager);

  // Strings containing special version extensions.
  const char *GLVersionExtensionsString();

  const char *GLXVersionExtensionsString();
}
#ifdef VTK_USE_X
namespace vtkglX {
  //Miscellaneous definitions.
  typedef XID GLXContextID;
  typedef XID GLXPbuffer;
  typedef XID GLXWindow;
  typedef XID GLXFBConfigID;
  typedef struct __GLXFBConfigRec *GLXFBConfig;
  typedef int int32_t;
  typedef long long int64_t;
  //Definitions for GLX_ARB_get_proc_address
  typedef void (*__GLXextFuncPtr)(void);
  typedef __GLXextFuncPtr ( * PFNGLXGETPROCADDRESSARBPROC) (const GLubyte *procName);
  extern VTK_RENDERING_EXPORT PFNGLXGETPROCADDRESSARBPROC GetProcAddressARB;
  //Definitions for GLX_VERSION_1_3
  enum GLX_VERSION_1_3_consts {
    WINDOW_BIT = 0x00000001,
    PIXMAP_BIT = 0x00000002,
    PBUFFER_BIT = 0x00000004,
    RGBA_BIT = 0x00000001,
    COLOR_INDEX_BIT = 0x00000002,
    PBUFFER_CLOBBER_MASK = 0x08000000,
    FRONT_LEFT_BUFFER_BIT = 0x00000001,
    FRONT_RIGHT_BUFFER_BIT = 0x00000002,
    BACK_LEFT_BUFFER_BIT = 0x00000004,
    BACK_RIGHT_BUFFER_BIT = 0x00000008,
    AUX_BUFFERS_BIT = 0x00000010,
    DEPTH_BUFFER_BIT = 0x00000020,
    STENCIL_BUFFER_BIT = 0x00000040,
    ACCUM_BUFFER_BIT = 0x00000080,
    CONFIG_CAVEAT = 0x20,
    X_VISUAL_TYPE = 0x22,
    TRANSPARENT_TYPE = 0x23,
    TRANSPARENT_INDEX_VALUE = 0x24,
    TRANSPARENT_RED_VALUE = 0x25,
    TRANSPARENT_GREEN_VALUE = 0x26,
    TRANSPARENT_BLUE_VALUE = 0x27,
    TRANSPARENT_ALPHA_VALUE = 0x28,
    DONT_CARE = 0xFFFFFFFF,
    NONE = 0x8000,
    SLOW_CONFIG = 0x8001,
    TRUE_COLOR = 0x8002,
    DIRECT_COLOR = 0x8003,
    PSEUDO_COLOR = 0x8004,
    STATIC_COLOR = 0x8005,
    GRAY_SCALE = 0x8006,
    STATIC_GRAY = 0x8007,
    TRANSPARENT_RGB = 0x8008,
    TRANSPARENT_INDEX = 0x8009,
    VISUAL_ID = 0x800B,
    SCREEN = 0x800C,
    NON_CONFORMANT_CONFIG = 0x800D,
    DRAWABLE_TYPE = 0x8010,
    RENDER_TYPE = 0x8011,
    X_RENDERABLE = 0x8012,
    FBCONFIG_ID = 0x8013,
    RGBA_TYPE = 0x8014,
    COLOR_INDEX_TYPE = 0x8015,
    MAX_PBUFFER_WIDTH = 0x8016,
    MAX_PBUFFER_HEIGHT = 0x8017,
    MAX_PBUFFER_PIXELS = 0x8018,
    PRESERVED_CONTENTS = 0x801B,
    LARGEST_PBUFFER = 0x801C,
    WIDTH = 0x801D,
    HEIGHT = 0x801E,
    EVENT_MASK = 0x801F,
    DAMAGED = 0x8020,
    SAVED = 0x8021,
    WINDOW = 0x8022,
    PBUFFER = 0x8023,
    PBUFFER_HEIGHT = 0x8040,
    PBUFFER_WIDTH = 0x8041
  };
  typedef GLXFBConfig * ( * PFNGLXGETFBCONFIGSPROC) (Display *dpy, int screen, int *nelements);
  typedef GLXFBConfig * ( * PFNGLXCHOOSEFBCONFIGPROC) (Display *dpy, int screen, const int *attrib_list, int *nelements);
  typedef int ( * PFNGLXGETFBCONFIGATTRIBPROC) (Display *dpy, GLXFBConfig config, int attribute, int *value);
  typedef XVisualInfo * ( * PFNGLXGETVISUALFROMFBCONFIGPROC) (Display *dpy, GLXFBConfig config);
  typedef GLXWindow ( * PFNGLXCREATEWINDOWPROC) (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);
  typedef void ( * PFNGLXDESTROYWINDOWPROC) (Display *dpy, GLXWindow win);
  typedef GLXPixmap ( * PFNGLXCREATEPIXMAPPROC) (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);
  typedef void ( * PFNGLXDESTROYPIXMAPPROC) (Display *dpy, GLXPixmap pixmap);
  typedef GLXPbuffer ( * PFNGLXCREATEPBUFFERPROC) (Display *dpy, GLXFBConfig config, const int *attrib_list);
  typedef void ( * PFNGLXDESTROYPBUFFERPROC) (Display *dpy, GLXPbuffer pbuf);
  typedef void ( * PFNGLXQUERYDRAWABLEPROC) (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);
  typedef GLXContext ( * PFNGLXCREATENEWCONTEXTPROC) (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
  typedef Bool ( * PFNGLXMAKECONTEXTCURRENTPROC) (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
  typedef GLXDrawable ( * PFNGLXGETCURRENTREADDRAWABLEPROC) (void);
  typedef Display * ( * PFNGLXGETCURRENTDISPLAYPROC) (void);
  typedef int ( * PFNGLXQUERYCONTEXTPROC) (Display *dpy, GLXContext ctx, int attribute, int *value);
  typedef void ( * PFNGLXSELECTEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long event_mask);
  typedef void ( * PFNGLXGETSELECTEDEVENTPROC) (Display *dpy, GLXDrawable draw, unsigned long *event_mask);
  extern VTK_RENDERING_EXPORT PFNGLXGETFBCONFIGSPROC GetFBConfigs;
  extern VTK_RENDERING_EXPORT PFNGLXCHOOSEFBCONFIGPROC ChooseFBConfig;
  extern VTK_RENDERING_EXPORT PFNGLXGETFBCONFIGATTRIBPROC GetFBConfigAttrib;
  extern VTK_RENDERING_EXPORT PFNGLXGETVISUALFROMFBCONFIGPROC GetVisualFromFBConfig;
  extern VTK_RENDERING_EXPORT PFNGLXCREATEWINDOWPROC CreateWindow;
  extern VTK_RENDERING_EXPORT PFNGLXDESTROYWINDOWPROC DestroyWindow;
  extern VTK_RENDERING_EXPORT PFNGLXCREATEPIXMAPPROC CreatePixmap;
  extern VTK_RENDERING_EXPORT PFNGLXDESTROYPIXMAPPROC DestroyPixmap;
  extern VTK_RENDERING_EXPORT PFNGLXCREATEPBUFFERPROC CreatePbuffer;
  extern VTK_RENDERING_EXPORT PFNGLXDESTROYPBUFFERPROC DestroyPbuffer;
  extern VTK_RENDERING_EXPORT PFNGLXQUERYDRAWABLEPROC QueryDrawable;
  extern VTK_RENDERING_EXPORT PFNGLXCREATENEWCONTEXTPROC CreateNewContext;
  extern VTK_RENDERING_EXPORT PFNGLXMAKECONTEXTCURRENTPROC MakeContextCurrent;
  extern VTK_RENDERING_EXPORT PFNGLXGETCURRENTREADDRAWABLEPROC GetCurrentReadDrawable;
  extern VTK_RENDERING_EXPORT PFNGLXGETCURRENTDISPLAYPROC GetCurrentDisplay;
  extern VTK_RENDERING_EXPORT PFNGLXQUERYCONTEXTPROC QueryContext;
  extern VTK_RENDERING_EXPORT PFNGLXSELECTEVENTPROC SelectEvent;
  extern VTK_RENDERING_EXPORT PFNGLXGETSELECTEDEVENTPROC GetSelectedEvent;
  //Definitions for GLX_VERSION_1_4
  enum GLX_VERSION_1_4_consts {
    SAMPLE_BUFFERS = 100000,
    SAMPLES = 100001
  };
  typedef __GLXextFuncPtr ( * PFNGLXGETPROCADDRESSPROC) (const GLubyte *procName);
  extern VTK_RENDERING_EXPORT PFNGLXGETPROCADDRESSPROC GetProcAddress;
  //Definitions for GLX_ARB_multisample
  enum GLX_ARB_multisample_consts {
    SAMPLE_BUFFERS_ARB = 100000,
    SAMPLES_ARB = 100001
  };
  //Definitions for GLX_ARB_fbconfig_float
  enum GLX_ARB_fbconfig_float_consts {
    RGBA_FLOAT_TYPE_ARB = 0x20B9,
    RGBA_FLOAT_BIT_ARB = 0x00000004
  };
  //Definitions for GLX_SGIS_multisample
  enum GLX_SGIS_multisample_consts {
    SAMPLE_BUFFERS_SGIS = 100000,
    SAMPLES_SGIS = 100001
  };
  //Definitions for GLX_EXT_visual_info
  enum GLX_EXT_visual_info_consts {
    X_VISUAL_TYPE_EXT = 0x22,
    TRANSPARENT_TYPE_EXT = 0x23,
    TRANSPARENT_INDEX_VALUE_EXT = 0x24,
    TRANSPARENT_RED_VALUE_EXT = 0x25,
    TRANSPARENT_GREEN_VALUE_EXT = 0x26,
    TRANSPARENT_BLUE_VALUE_EXT = 0x27,
    TRANSPARENT_ALPHA_VALUE_EXT = 0x28,
    NONE_EXT = 0x8000,
    TRUE_COLOR_EXT = 0x8002,
    DIRECT_COLOR_EXT = 0x8003,
    PSEUDO_COLOR_EXT = 0x8004,
    STATIC_COLOR_EXT = 0x8005,
    GRAY_SCALE_EXT = 0x8006,
    STATIC_GRAY_EXT = 0x8007,
    TRANSPARENT_RGB_EXT = 0x8008,
    TRANSPARENT_INDEX_EXT = 0x8009
  };
  //Definitions for GLX_SGI_swap_control
  typedef int ( * PFNGLXSWAPINTERVALSGIPROC) (int interval);
  extern VTK_RENDERING_EXPORT PFNGLXSWAPINTERVALSGIPROC SwapIntervalSGI;
  //Definitions for GLX_SGI_video_sync
  typedef int ( * PFNGLXGETVIDEOSYNCSGIPROC) (unsigned int *count);
  typedef int ( * PFNGLXWAITVIDEOSYNCSGIPROC) (int divisor, int remainder, unsigned int *count);
  extern VTK_RENDERING_EXPORT PFNGLXGETVIDEOSYNCSGIPROC GetVideoSyncSGI;
  extern VTK_RENDERING_EXPORT PFNGLXWAITVIDEOSYNCSGIPROC WaitVideoSyncSGI;
  //Definitions for GLX_SGI_make_current_read
  typedef Bool ( * PFNGLXMAKECURRENTREADSGIPROC) (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
  typedef GLXDrawable ( * PFNGLXGETCURRENTREADDRAWABLESGIPROC) (void);
  extern VTK_RENDERING_EXPORT PFNGLXMAKECURRENTREADSGIPROC MakeCurrentReadSGI;
  extern VTK_RENDERING_EXPORT PFNGLXGETCURRENTREADDRAWABLESGIPROC GetCurrentReadDrawableSGI;
  //Definitions for GLX_EXT_visual_rating
  enum GLX_EXT_visual_rating_consts {
    VISUAL_CAVEAT_EXT = 0x20,
    SLOW_VISUAL_EXT = 0x8001,
    NON_CONFORMANT_VISUAL_EXT = 0x800D
  };
  //Definitions for GLX_EXT_import_context
  enum GLX_EXT_import_context_consts {
    SHARE_CONTEXT_EXT = 0x800A,
    VISUAL_ID_EXT = 0x800B,
    SCREEN_EXT = 0x800C
  };
  typedef Display * ( * PFNGLXGETCURRENTDISPLAYEXTPROC) (void);
  typedef int ( * PFNGLXQUERYCONTEXTINFOEXTPROC) (Display *dpy, GLXContext context, int attribute, int *value);
  typedef GLXContextID ( * PFNGLXGETCONTEXTIDEXTPROC) (const GLXContext context);
  typedef GLXContext ( * PFNGLXIMPORTCONTEXTEXTPROC) (Display *dpy, GLXContextID contextID);
  typedef void ( * PFNGLXFREECONTEXTEXTPROC) (Display *dpy, GLXContext context);
  extern VTK_RENDERING_EXPORT PFNGLXGETCURRENTDISPLAYEXTPROC GetCurrentDisplayEXT;
  extern VTK_RENDERING_EXPORT PFNGLXQUERYCONTEXTINFOEXTPROC QueryContextInfoEXT;
  extern VTK_RENDERING_EXPORT PFNGLXGETCONTEXTIDEXTPROC GetContextIDEXT;
  extern VTK_RENDERING_EXPORT PFNGLXIMPORTCONTEXTEXTPROC ImportContextEXT;
  extern VTK_RENDERING_EXPORT PFNGLXFREECONTEXTEXTPROC FreeContextEXT;
  //Definitions for GLX_SGIX_fbconfig
  enum GLX_SGIX_fbconfig_consts {
    WINDOW_BIT_SGIX = 0x00000001,
    PIXMAP_BIT_SGIX = 0x00000002,
    RGBA_BIT_SGIX = 0x00000001,
    COLOR_INDEX_BIT_SGIX = 0x00000002,
    DRAWABLE_TYPE_SGIX = 0x8010,
    RENDER_TYPE_SGIX = 0x8011,
    X_RENDERABLE_SGIX = 0x8012,
    FBCONFIG_ID_SGIX = 0x8013,
    RGBA_TYPE_SGIX = 0x8014,
    COLOR_INDEX_TYPE_SGIX = 0x8015
  };
  typedef XID GLXFBConfigIDSGIX;
  typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
  typedef int ( * PFNGLXGETFBCONFIGATTRIBSGIXPROC) (Display *dpy, GLXFBConfigSGIX config, int attribute, int *value);
  typedef GLXFBConfigSGIX * ( * PFNGLXCHOOSEFBCONFIGSGIXPROC) (Display *dpy, int screen, int *attrib_list, int *nelements);
  typedef GLXPixmap ( * PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) (Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap);
  typedef GLXContext ( * PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) (Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
  typedef XVisualInfo * ( * PFNGLXGETVISUALFROMFBCONFIGSGIXPROC) (Display *dpy, GLXFBConfigSGIX config);
  typedef GLXFBConfigSGIX ( * PFNGLXGETFBCONFIGFROMVISUALSGIXPROC) (Display *dpy, XVisualInfo *vis);
  extern VTK_RENDERING_EXPORT PFNGLXGETFBCONFIGATTRIBSGIXPROC GetFBConfigAttribSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXCHOOSEFBCONFIGSGIXPROC ChooseFBConfigSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC CreateGLXPixmapWithConfigSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC CreateContextWithConfigSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXGETVISUALFROMFBCONFIGSGIXPROC GetVisualFromFBConfigSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXGETFBCONFIGFROMVISUALSGIXPROC GetFBConfigFromVisualSGIX;
  //Definitions for GLX_SGIX_pbuffer
  enum GLX_SGIX_pbuffer_consts {
    PBUFFER_BIT_SGIX = 0x00000004,
    BUFFER_CLOBBER_MASK_SGIX = 0x08000000,
    FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001,
    FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002,
    BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004,
    BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008,
    AUX_BUFFERS_BIT_SGIX = 0x00000010,
    DEPTH_BUFFER_BIT_SGIX = 0x00000020,
    STENCIL_BUFFER_BIT_SGIX = 0x00000040,
    ACCUM_BUFFER_BIT_SGIX = 0x00000080,
    SAMPLE_BUFFERS_BIT_SGIX = 0x00000100,
    MAX_PBUFFER_WIDTH_SGIX = 0x8016,
    MAX_PBUFFER_HEIGHT_SGIX = 0x8017,
    MAX_PBUFFER_PIXELS_SGIX = 0x8018,
    OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019,
    OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801A,
    PRESERVED_CONTENTS_SGIX = 0x801B,
    LARGEST_PBUFFER_SGIX = 0x801C,
    WIDTH_SGIX = 0x801D,
    HEIGHT_SGIX = 0x801E,
    EVENT_MASK_SGIX = 0x801F,
    DAMAGED_SGIX = 0x8020,
    SAVED_SGIX = 0x8021,
    WINDOW_SGIX = 0x8022,
    PBUFFER_SGIX = 0x8023
  };
  typedef XID GLXPbufferSGIX;
  typedef GLXPbufferSGIX ( * PFNGLXCREATEGLXPBUFFERSGIXPROC) (Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list);
  typedef void ( * PFNGLXDESTROYGLXPBUFFERSGIXPROC) (Display *dpy, GLXPbufferSGIX pbuf);
  typedef int ( * PFNGLXQUERYGLXPBUFFERSGIXPROC) (Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value);
  typedef void ( * PFNGLXSELECTEVENTSGIXPROC) (Display *dpy, GLXDrawable drawable, unsigned long mask);
  typedef void ( * PFNGLXGETSELECTEDEVENTSGIXPROC) (Display *dpy, GLXDrawable drawable, unsigned long *mask);
  extern VTK_RENDERING_EXPORT PFNGLXCREATEGLXPBUFFERSGIXPROC CreateGLXPbufferSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXDESTROYGLXPBUFFERSGIXPROC DestroyGLXPbufferSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXQUERYGLXPBUFFERSGIXPROC QueryGLXPbufferSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXSELECTEVENTSGIXPROC SelectEventSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXGETSELECTEDEVENTSGIXPROC GetSelectedEventSGIX;
  //Definitions for GLX_SGI_cushion
  typedef void ( * PFNGLXCUSHIONSGIPROC) (Display *dpy, Window window, float cushion);
  extern VTK_RENDERING_EXPORT PFNGLXCUSHIONSGIPROC CushionSGI;
  //Definitions for GLX_SGIX_video_resize
  enum GLX_SGIX_video_resize_consts {
    SYNC_FRAME_SGIX = 0x00000000,
    SYNC_SWAP_SGIX = 0x00000001
  };
  typedef int ( * PFNGLXBINDCHANNELTOWINDOWSGIXPROC) (Display *display, int screen, int channel, Window window);
  typedef int ( * PFNGLXCHANNELRECTSGIXPROC) (Display *display, int screen, int channel, int x, int y, int w, int h);
  typedef int ( * PFNGLXQUERYCHANNELRECTSGIXPROC) (Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh);
  typedef int ( * PFNGLXQUERYCHANNELDELTASSGIXPROC) (Display *display, int screen, int channel, int *x, int *y, int *w, int *h);
  typedef int ( * PFNGLXCHANNELRECTSYNCSGIXPROC) (Display *display, int screen, int channel, GLenum synctype);
  extern VTK_RENDERING_EXPORT PFNGLXBINDCHANNELTOWINDOWSGIXPROC BindChannelToWindowSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXCHANNELRECTSGIXPROC ChannelRectSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXQUERYCHANNELRECTSGIXPROC QueryChannelRectSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXQUERYCHANNELDELTASSGIXPROC QueryChannelDeltasSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXCHANNELRECTSYNCSGIXPROC ChannelRectSyncSGIX;
  //Definitions for GLX_SGIX_swap_group
  typedef void ( * PFNGLXJOINSWAPGROUPSGIXPROC) (Display *dpy, GLXDrawable drawable, GLXDrawable member);
  extern VTK_RENDERING_EXPORT PFNGLXJOINSWAPGROUPSGIXPROC JoinSwapGroupSGIX;
  //Definitions for GLX_SGIX_swap_barrier
  typedef void ( * PFNGLXBINDSWAPBARRIERSGIXPROC) (Display *dpy, GLXDrawable drawable, int barrier);
  typedef Bool ( * PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) (Display *dpy, int screen, int *max);
  extern VTK_RENDERING_EXPORT PFNGLXBINDSWAPBARRIERSGIXPROC BindSwapBarrierSGIX;
  extern VTK_RENDERING_EXPORT PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC QueryMaxSwapBarriersSGIX;
  //Definitions for GLX_SGIS_blended_overlay
  enum GLX_SGIS_blended_overlay_consts {
    BLENDED_RGBA_SGIS = 0x8025
  };
  //Definitions for GLX_SGIS_shared_multisample
  enum GLX_SGIS_shared_multisample_consts {
    MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026,
    MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027
  };
  //Definitions for GLX_SUN_get_transparent_index
  typedef Status ( * PFNGLXGETTRANSPARENTINDEXSUNPROC) (Display *dpy, Window overlay, Window underlay, long *pTransparentIndex);
  extern VTK_RENDERING_EXPORT PFNGLXGETTRANSPARENTINDEXSUNPROC GetTransparentIndexSUN;
  //Definitions for GLX_3DFX_multisample
  enum GLX_3DFX_multisample_consts {
    SAMPLE_BUFFERS_3DFX = 0x8050,
    SAMPLES_3DFX = 0x8051
  };
  //Definitions for GLX_MESA_copy_sub_buffer
  typedef void ( * PFNGLXCOPYSUBBUFFERMESAPROC) (Display *dpy, GLXDrawable drawable, int x, int y, int width, int height);
  extern VTK_RENDERING_EXPORT PFNGLXCOPYSUBBUFFERMESAPROC CopySubBufferMESA;
  //Definitions for GLX_MESA_pixmap_colormap
  typedef GLXPixmap ( * PFNGLXCREATEGLXPIXMAPMESAPROC) (Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap);
  extern VTK_RENDERING_EXPORT PFNGLXCREATEGLXPIXMAPMESAPROC CreateGLXPixmapMESA;
  //Definitions for GLX_MESA_release_buffers
  typedef Bool ( * PFNGLXRELEASEBUFFERSMESAPROC) (Display *dpy, GLXDrawable drawable);
  extern VTK_RENDERING_EXPORT PFNGLXRELEASEBUFFERSMESAPROC ReleaseBuffersMESA;
  //Definitions for GLX_MESA_set_3dfx_mode
  enum GLX_MESA_set_3dfx_mode_consts {
    _3DFX_WINDOW_MODE_MESA = 0x1,
    _3DFX_FULLSCREEN_MODE_MESA = 0x2
  };
  typedef Bool ( * PFNGLXSET3DFXMODEMESAPROC) (int mode);
  extern VTK_RENDERING_EXPORT PFNGLXSET3DFXMODEMESAPROC Set3DfxModeMESA;
  //Definitions for GLX_SGIX_visual_select_group
  enum GLX_SGIX_visual_select_group_consts {
    VISUAL_SELECT_GROUP_SGIX = 0x8028
  };
  //Definitions for GLX_OML_swap_method
  enum GLX_OML_swap_method_consts {
    SWAP_METHOD_OML = 0x8060,
    SWAP_EXCHANGE_OML = 0x8061,
    SWAP_COPY_OML = 0x8062,
    SWAP_UNDEFINED_OML = 0x8063
  };
  //Definitions for GLX_OML_sync_control
  typedef Bool ( * PFNGLXGETSYNCVALUESOMLPROC) (Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc);
  typedef Bool ( * PFNGLXGETMSCRATEOMLPROC) (Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator);
  typedef int64_t ( * PFNGLXSWAPBUFFERSMSCOMLPROC) (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
  typedef Bool ( * PFNGLXWAITFORMSCOMLPROC) (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc);
  typedef Bool ( * PFNGLXWAITFORSBCOMLPROC) (Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);
  extern VTK_RENDERING_EXPORT PFNGLXGETSYNCVALUESOMLPROC GetSyncValuesOML;
  extern VTK_RENDERING_EXPORT PFNGLXGETMSCRATEOMLPROC GetMscRateOML;
  extern VTK_RENDERING_EXPORT PFNGLXSWAPBUFFERSMSCOMLPROC SwapBuffersMscOML;
  extern VTK_RENDERING_EXPORT PFNGLXWAITFORMSCOMLPROC WaitForMscOML;
  extern VTK_RENDERING_EXPORT PFNGLXWAITFORSBCOMLPROC WaitForSbcOML;
  //Definitions for GLX_NV_float_buffer
  enum GLX_NV_float_buffer_consts {
    FLOAT_COMPONENTS_NV = 0x20B0
  };
  //Definitions for GLX_MESA_agp_offset
  typedef unsigned int ( * PFNGLXGETAGPOFFSETMESAPROC) (const void *pointer);
  extern VTK_RENDERING_EXPORT PFNGLXGETAGPOFFSETMESAPROC GetAGPOffsetMESA;
}
#endif
#ifdef WIN32
namespace vtkwgl {
  //Definitions for WGL_ARB_buffer_region
  enum WGL_ARB_buffer_region_consts {
    FRONT_COLOR_BUFFER_BIT_ARB = 0x00000001,
    BACK_COLOR_BUFFER_BIT_ARB = 0x00000002,
    DEPTH_BUFFER_BIT_ARB = 0x00000004,
    STENCIL_BUFFER_BIT_ARB = 0x00000008
  };
  typedef HANDLE (WINAPI * PFNWGLCREATEBUFFERREGIONARBPROC) (HDC hDC, int iLayerPlane, UINT uType);
  typedef VOID (WINAPI * PFNWGLDELETEBUFFERREGIONARBPROC) (HANDLE hRegion);
  typedef BOOL (WINAPI * PFNWGLSAVEBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height);
  typedef BOOL (WINAPI * PFNWGLRESTOREBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);
  extern VTK_RENDERING_EXPORT PFNWGLCREATEBUFFERREGIONARBPROC CreateBufferRegionARB;
  extern VTK_RENDERING_EXPORT PFNWGLDELETEBUFFERREGIONARBPROC DeleteBufferRegionARB;
  extern VTK_RENDERING_EXPORT PFNWGLSAVEBUFFERREGIONARBPROC SaveBufferRegionARB;
  extern VTK_RENDERING_EXPORT PFNWGLRESTOREBUFFERREGIONARBPROC RestoreBufferRegionARB;
  //Definitions for WGL_ARB_multisample
  enum WGL_ARB_multisample_consts {
    SAMPLE_BUFFERS_ARB = 0x2041,
    SAMPLES_ARB = 0x2042
  };
  //Definitions for WGL_ARB_extensions_string
  typedef const char * (WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC hdc);
  extern VTK_RENDERING_EXPORT PFNWGLGETEXTENSIONSSTRINGARBPROC GetExtensionsStringARB;
  //Definitions for WGL_ARB_pixel_format
  enum WGL_ARB_pixel_format_consts {
    NUMBER_PIXEL_FORMATS_ARB = 0x2000,
    DRAW_TO_WINDOW_ARB = 0x2001,
    DRAW_TO_BITMAP_ARB = 0x2002,
    ACCELERATION_ARB = 0x2003,
    NEED_PALETTE_ARB = 0x2004,
    NEED_SYSTEM_PALETTE_ARB = 0x2005,
    SWAP_LAYER_BUFFERS_ARB = 0x2006,
    SWAP_METHOD_ARB = 0x2007,
    NUMBER_OVERLAYS_ARB = 0x2008,
    NUMBER_UNDERLAYS_ARB = 0x2009,
    TRANSPARENT_ARB = 0x200A,
    TRANSPARENT_RED_VALUE_ARB = 0x2037,
    TRANSPARENT_GREEN_VALUE_ARB = 0x2038,
    TRANSPARENT_BLUE_VALUE_ARB = 0x2039,
    TRANSPARENT_ALPHA_VALUE_ARB = 0x203A,
    TRANSPARENT_INDEX_VALUE_ARB = 0x203B,
    SHARE_DEPTH_ARB = 0x200C,
    SHARE_STENCIL_ARB = 0x200D,
    SHARE_ACCUM_ARB = 0x200E,
    SUPPORT_GDI_ARB = 0x200F,
    SUPPORT_OPENGL_ARB = 0x2010,
    DOUBLE_BUFFER_ARB = 0x2011,
    STEREO_ARB = 0x2012,
    PIXEL_TYPE_ARB = 0x2013,
    COLOR_BITS_ARB = 0x2014,
    RED_BITS_ARB = 0x2015,
    RED_SHIFT_ARB = 0x2016,
    GREEN_BITS_ARB = 0x2017,
    GREEN_SHIFT_ARB = 0x2018,
    BLUE_BITS_ARB = 0x2019,
    BLUE_SHIFT_ARB = 0x201A,
    ALPHA_BITS_ARB = 0x201B,
    ALPHA_SHIFT_ARB = 0x201C,
    ACCUM_BITS_ARB = 0x201D,
    ACCUM_RED_BITS_ARB = 0x201E,
    ACCUM_GREEN_BITS_ARB = 0x201F,
    ACCUM_BLUE_BITS_ARB = 0x2020,
    ACCUM_ALPHA_BITS_ARB = 0x2021,
    DEPTH_BITS_ARB = 0x2022,
    STENCIL_BITS_ARB = 0x2023,
    AUX_BUFFERS_ARB = 0x2024,
    NO_ACCELERATION_ARB = 0x2025,
    GENERIC_ACCELERATION_ARB = 0x2026,
    FULL_ACCELERATION_ARB = 0x2027,
    SWAP_EXCHANGE_ARB = 0x2028,
    SWAP_COPY_ARB = 0x2029,
    SWAP_UNDEFINED_ARB = 0x202A,
    TYPE_RGBA_ARB = 0x202B,
    TYPE_COLORINDEX_ARB = 0x202C
  };
  typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);
  typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);
  typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
  extern VTK_RENDERING_EXPORT PFNWGLGETPIXELFORMATATTRIBIVARBPROC GetPixelFormatAttribivARB;
  extern VTK_RENDERING_EXPORT PFNWGLGETPIXELFORMATATTRIBFVARBPROC GetPixelFormatAttribfvARB;
  extern VTK_RENDERING_EXPORT PFNWGLCHOOSEPIXELFORMATARBPROC ChoosePixelFormatARB;
  //Definitions for WGL_ARB_make_current_read
  typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTARBPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
  typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCARBPROC) (void);
  extern VTK_RENDERING_EXPORT PFNWGLMAKECONTEXTCURRENTARBPROC MakeContextCurrentARB;
  extern VTK_RENDERING_EXPORT PFNWGLGETCURRENTREADDCARBPROC GetCurrentReadDCARB;
  //Definitions for WGL_ARB_pbuffer
  enum WGL_ARB_pbuffer_consts {
    DRAW_TO_PBUFFER_ARB = 0x202D,
    MAX_PBUFFER_PIXELS_ARB = 0x202E,
    MAX_PBUFFER_WIDTH_ARB = 0x202F,
    MAX_PBUFFER_HEIGHT_ARB = 0x2030,
    PBUFFER_LARGEST_ARB = 0x2033,
    PBUFFER_WIDTH_ARB = 0x2034,
    PBUFFER_HEIGHT_ARB = 0x2035,
    PBUFFER_LOST_ARB = 0x2036
  };
  DECLARE_HANDLE(HPBUFFERARB);
  typedef HPBUFFERARB (WINAPI * PFNWGLCREATEPBUFFERARBPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
  typedef HDC (WINAPI * PFNWGLGETPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer);
  typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer, HDC hDC);
  typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFERARBPROC) (HPBUFFERARB hPbuffer);
  typedef BOOL (WINAPI * PFNWGLQUERYPBUFFERARBPROC) (HPBUFFERARB hPbuffer, int iAttribute, int *piValue);
  extern VTK_RENDERING_EXPORT PFNWGLCREATEPBUFFERARBPROC CreatePbufferARB;
  extern VTK_RENDERING_EXPORT PFNWGLGETPBUFFERDCARBPROC GetPbufferDCARB;
  extern VTK_RENDERING_EXPORT PFNWGLRELEASEPBUFFERDCARBPROC ReleasePbufferDCARB;
  extern VTK_RENDERING_EXPORT PFNWGLDESTROYPBUFFERARBPROC DestroyPbufferARB;
  extern VTK_RENDERING_EXPORT PFNWGLQUERYPBUFFERARBPROC QueryPbufferARB;
  //Definitions for WGL_ARB_render_texture
  enum WGL_ARB_render_texture_consts {
    BIND_TO_TEXTURE_RGB_ARB = 0x2070,
    BIND_TO_TEXTURE_RGBA_ARB = 0x2071,
    TEXTURE_FORMAT_ARB = 0x2072,
    TEXTURE_TARGET_ARB = 0x2073,
    MIPMAP_TEXTURE_ARB = 0x2074,
    TEXTURE_RGB_ARB = 0x2075,
    TEXTURE_RGBA_ARB = 0x2076,
    NO_TEXTURE_ARB = 0x2077,
    TEXTURE_CUBE_MAP_ARB = 0x2078,
    TEXTURE_1D_ARB = 0x2079,
    TEXTURE_2D_ARB = 0x207A,
    MIPMAP_LEVEL_ARB = 0x207B,
    CUBE_MAP_FACE_ARB = 0x207C,
    TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x207D,
    TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x207E,
    TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x207F,
    TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x2080,
    TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x2081,
    TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x2082,
    FRONT_LEFT_ARB = 0x2083,
    FRONT_RIGHT_ARB = 0x2084,
    BACK_LEFT_ARB = 0x2085,
    BACK_RIGHT_ARB = 0x2086,
    AUX0_ARB = 0x2087,
    AUX1_ARB = 0x2088,
    AUX2_ARB = 0x2089,
    AUX3_ARB = 0x208A,
    AUX4_ARB = 0x208B,
    AUX5_ARB = 0x208C,
    AUX6_ARB = 0x208D,
    AUX7_ARB = 0x208E,
    AUX8_ARB = 0x208F,
    AUX9_ARB = 0x2090
  };
  typedef BOOL (WINAPI * PFNWGLBINDTEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
  typedef BOOL (WINAPI * PFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);
  typedef BOOL (WINAPI * PFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB hPbuffer, const int *piAttribList);
  extern VTK_RENDERING_EXPORT PFNWGLBINDTEXIMAGEARBPROC BindTexImageARB;
  extern VTK_RENDERING_EXPORT PFNWGLRELEASETEXIMAGEARBPROC ReleaseTexImageARB;
  extern VTK_RENDERING_EXPORT PFNWGLSETPBUFFERATTRIBARBPROC SetPbufferAttribARB;
  //Definitions for WGL_ARB_pixel_format_float
  enum WGL_ARB_pixel_format_float_consts {
    TYPE_RGBA_FLOAT_ARB = 0x21A0
  };
  //Definitions for WGL_EXT_make_current_read
  typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTEXTPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
  typedef HDC (WINAPI * PFNWGLGETCURRENTREADDCEXTPROC) (void);
  extern VTK_RENDERING_EXPORT PFNWGLMAKECONTEXTCURRENTEXTPROC MakeContextCurrentEXT;
  extern VTK_RENDERING_EXPORT PFNWGLGETCURRENTREADDCEXTPROC GetCurrentReadDCEXT;
  //Definitions for WGL_EXT_pixel_format
  enum WGL_EXT_pixel_format_consts {
    NUMBER_PIXEL_FORMATS_EXT = 0x2000,
    DRAW_TO_WINDOW_EXT = 0x2001,
    DRAW_TO_BITMAP_EXT = 0x2002,
    ACCELERATION_EXT = 0x2003,
    NEED_PALETTE_EXT = 0x2004,
    NEED_SYSTEM_PALETTE_EXT = 0x2005,
    SWAP_LAYER_BUFFERS_EXT = 0x2006,
    SWAP_METHOD_EXT = 0x2007,
    NUMBER_OVERLAYS_EXT = 0x2008,
    NUMBER_UNDERLAYS_EXT = 0x2009,
    TRANSPARENT_EXT = 0x200A,
    TRANSPARENT_VALUE_EXT = 0x200B,
    SHARE_DEPTH_EXT = 0x200C,
    SHARE_STENCIL_EXT = 0x200D,
    SHARE_ACCUM_EXT = 0x200E,
    SUPPORT_GDI_EXT = 0x200F,
    SUPPORT_OPENGL_EXT = 0x2010,
    DOUBLE_BUFFER_EXT = 0x2011,
    STEREO_EXT = 0x2012,
    PIXEL_TYPE_EXT = 0x2013,
    COLOR_BITS_EXT = 0x2014,
    RED_BITS_EXT = 0x2015,
    RED_SHIFT_EXT = 0x2016,
    GREEN_BITS_EXT = 0x2017,
    GREEN_SHIFT_EXT = 0x2018,
    BLUE_BITS_EXT = 0x2019,
    BLUE_SHIFT_EXT = 0x201A,
    ALPHA_BITS_EXT = 0x201B,
    ALPHA_SHIFT_EXT = 0x201C,
    ACCUM_BITS_EXT = 0x201D,
    ACCUM_RED_BITS_EXT = 0x201E,
    ACCUM_GREEN_BITS_EXT = 0x201F,
    ACCUM_BLUE_BITS_EXT = 0x2020,
    ACCUM_ALPHA_BITS_EXT = 0x2021,
    DEPTH_BITS_EXT = 0x2022,
    STENCIL_BITS_EXT = 0x2023,
    AUX_BUFFERS_EXT = 0x2024,
    NO_ACCELERATION_EXT = 0x2025,
    GENERIC_ACCELERATION_EXT = 0x2026,
    FULL_ACCELERATION_EXT = 0x2027,
    SWAP_EXCHANGE_EXT = 0x2028,
    SWAP_COPY_EXT = 0x2029,
    SWAP_UNDEFINED_EXT = 0x202A,
    TYPE_RGBA_EXT = 0x202B,
    TYPE_COLORINDEX_EXT = 0x202C
  };
  typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues);
  typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVEXTPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues);
  typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATEXTPROC) (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);
  extern VTK_RENDERING_EXPORT PFNWGLGETPIXELFORMATATTRIBIVEXTPROC GetPixelFormatAttribivEXT;
  extern VTK_RENDERING_EXPORT PFNWGLGETPIXELFORMATATTRIBFVEXTPROC GetPixelFormatAttribfvEXT;
  extern VTK_RENDERING_EXPORT PFNWGLCHOOSEPIXELFORMATEXTPROC ChoosePixelFormatEXT;
  //Definitions for WGL_EXT_pbuffer
  enum WGL_EXT_pbuffer_consts {
    DRAW_TO_PBUFFER_EXT = 0x202D,
    MAX_PBUFFER_PIXELS_EXT = 0x202E,
    MAX_PBUFFER_WIDTH_EXT = 0x202F,
    MAX_PBUFFER_HEIGHT_EXT = 0x2030,
    OPTIMAL_PBUFFER_WIDTH_EXT = 0x2031,
    OPTIMAL_PBUFFER_HEIGHT_EXT = 0x2032,
    PBUFFER_LARGEST_EXT = 0x2033,
    PBUFFER_WIDTH_EXT = 0x2034,
    PBUFFER_HEIGHT_EXT = 0x2035
  };
  DECLARE_HANDLE(HPBUFFEREXT);
  typedef HPBUFFEREXT (WINAPI * PFNWGLCREATEPBUFFEREXTPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);
  typedef HDC (WINAPI * PFNWGLGETPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer);
  typedef int (WINAPI * PFNWGLRELEASEPBUFFERDCEXTPROC) (HPBUFFEREXT hPbuffer, HDC hDC);
  typedef BOOL (WINAPI * PFNWGLDESTROYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer);
  typedef BOOL (WINAPI * PFNWGLQUERYPBUFFEREXTPROC) (HPBUFFEREXT hPbuffer, int iAttribute, int *piValue);
  extern VTK_RENDERING_EXPORT PFNWGLCREATEPBUFFEREXTPROC CreatePbufferEXT;
  extern VTK_RENDERING_EXPORT PFNWGLGETPBUFFERDCEXTPROC GetPbufferDCEXT;
  extern VTK_RENDERING_EXPORT PFNWGLRELEASEPBUFFERDCEXTPROC ReleasePbufferDCEXT;
  extern VTK_RENDERING_EXPORT PFNWGLDESTROYPBUFFEREXTPROC DestroyPbufferEXT;
  extern VTK_RENDERING_EXPORT PFNWGLQUERYPBUFFEREXTPROC QueryPbufferEXT;
  //Definitions for WGL_EXT_depth_float
  enum WGL_EXT_depth_float_consts {
    DEPTH_FLOAT_EXT = 0x2040
  };
  //Definitions for WGL_3DFX_multisample
  enum WGL_3DFX_multisample_consts {
    SAMPLE_BUFFERS_3DFX = 0x2060,
    SAMPLES_3DFX = 0x2061
  };
  //Definitions for WGL_EXT_multisample
  enum WGL_EXT_multisample_consts {
    SAMPLE_BUFFERS_EXT = 0x2041,
    SAMPLES_EXT = 0x2042
  };
  //Definitions for WGL_I3D_digital_video_control
  enum WGL_I3D_digital_video_control_consts {
    DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D = 0x2050,
    DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D = 0x2051,
    DIGITAL_VIDEO_CURSOR_INCLUDED_I3D = 0x2052,
    DIGITAL_VIDEO_GAMMA_CORRECTED_I3D = 0x2053
  };
  typedef BOOL (WINAPI * PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int *piValue);
  typedef BOOL (WINAPI * PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int *piValue);
  extern VTK_RENDERING_EXPORT PFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC GetDigitalVideoParametersI3D;
  extern VTK_RENDERING_EXPORT PFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC SetDigitalVideoParametersI3D;
  //Definitions for WGL_I3D_gamma
  enum WGL_I3D_gamma_consts {
    GAMMA_TABLE_SIZE_I3D = 0x204E,
    GAMMA_EXCLUDE_DESKTOP_I3D = 0x204F
  };
  typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, int *piValue);
  typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEPARAMETERSI3DPROC) (HDC hDC, int iAttribute, const int *piValue);
  typedef BOOL (WINAPI * PFNWGLGETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue);
  typedef BOOL (WINAPI * PFNWGLSETGAMMATABLEI3DPROC) (HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue);
  extern VTK_RENDERING_EXPORT PFNWGLGETGAMMATABLEPARAMETERSI3DPROC GetGammaTableParametersI3D;
  extern VTK_RENDERING_EXPORT PFNWGLSETGAMMATABLEPARAMETERSI3DPROC SetGammaTableParametersI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGETGAMMATABLEI3DPROC GetGammaTableI3D;
  extern VTK_RENDERING_EXPORT PFNWGLSETGAMMATABLEI3DPROC SetGammaTableI3D;
  //Definitions for WGL_I3D_genlock
  enum WGL_I3D_genlock_consts {
    GENLOCK_SOURCE_MULTIVIEW_I3D = 0x2044,
    GENLOCK_SOURCE_EXTENAL_SYNC_I3D = 0x2045,
    GENLOCK_SOURCE_EXTENAL_FIELD_I3D = 0x2046,
    GENLOCK_SOURCE_EXTENAL_TTL_I3D = 0x2047,
    GENLOCK_SOURCE_DIGITAL_SYNC_I3D = 0x2048,
    GENLOCK_SOURCE_DIGITAL_FIELD_I3D = 0x2049,
    GENLOCK_SOURCE_EDGE_FALLING_I3D = 0x204A,
    GENLOCK_SOURCE_EDGE_RISING_I3D = 0x204B,
    GENLOCK_SOURCE_EDGE_BOTH_I3D = 0x204C
  };
  typedef BOOL (WINAPI * PFNWGLENABLEGENLOCKI3DPROC) (HDC hDC);
  typedef BOOL (WINAPI * PFNWGLDISABLEGENLOCKI3DPROC) (HDC hDC);
  typedef BOOL (WINAPI * PFNWGLISENABLEDGENLOCKI3DPROC) (HDC hDC, BOOL *pFlag);
  typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEI3DPROC) (HDC hDC, UINT uSource);
  typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEI3DPROC) (HDC hDC, UINT *uSource);
  typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT uEdge);
  typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEEDGEI3DPROC) (HDC hDC, UINT *uEdge);
  typedef BOOL (WINAPI * PFNWGLGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT uRate);
  typedef BOOL (WINAPI * PFNWGLGETGENLOCKSAMPLERATEI3DPROC) (HDC hDC, UINT *uRate);
  typedef BOOL (WINAPI * PFNWGLGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT uDelay);
  typedef BOOL (WINAPI * PFNWGLGETGENLOCKSOURCEDELAYI3DPROC) (HDC hDC, UINT *uDelay);
  typedef BOOL (WINAPI * PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC) (HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay);
  extern VTK_RENDERING_EXPORT PFNWGLENABLEGENLOCKI3DPROC EnableGenlockI3D;
  extern VTK_RENDERING_EXPORT PFNWGLDISABLEGENLOCKI3DPROC DisableGenlockI3D;
  extern VTK_RENDERING_EXPORT PFNWGLISENABLEDGENLOCKI3DPROC IsEnabledGenlockI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGENLOCKSOURCEI3DPROC GenlockSourceI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGETGENLOCKSOURCEI3DPROC GetGenlockSourceI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGENLOCKSOURCEEDGEI3DPROC GenlockSourceEdgeI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGETGENLOCKSOURCEEDGEI3DPROC GetGenlockSourceEdgeI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGENLOCKSAMPLERATEI3DPROC GenlockSampleRateI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGETGENLOCKSAMPLERATEI3DPROC GetGenlockSampleRateI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGENLOCKSOURCEDELAYI3DPROC GenlockSourceDelayI3D;
  extern VTK_RENDERING_EXPORT PFNWGLGETGENLOCKSOURCEDELAYI3DPROC GetGenlockSourceDelayI3D;
  extern VTK_RENDERING_EXPORT PFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC QueryGenlockMaxSourceDelayI3D;
  //Definitions for WGL_I3D_image_buffer
  enum WGL_I3D_image_buffer_consts {
    IMAGE_BUFFER_MIN_ACCESS_I3D = 0x00000001,
    IMAGE_BUFFER_LOCK_I3D = 0x00000002
  };
  typedef LPVOID (WINAPI * PFNWGLCREATEIMAGEBUFFERI3DPROC) (HDC hDC, DWORD dwSize, UINT uFlags);
  typedef BOOL (WINAPI * PFNWGLDESTROYIMAGEBUFFERI3DPROC) (HDC hDC, LPVOID pAddress);
  typedef BOOL (WINAPI * PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC) (HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count);
  typedef BOOL (WINAPI * PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC) (HDC hDC, const LPVOID *pAddress, UINT count);
  extern VTK_RENDERING_EXPORT PFNWGLCREATEIMAGEBUFFERI3DPROC CreateImageBufferI3D;
  extern VTK_RENDERING_EXPORT PFNWGLDESTROYIMAGEBUFFERI3DPROC DestroyImageBufferI3D;
  extern VTK_RENDERING_EXPORT PFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC AssociateImageBufferEventsI3D;
  extern VTK_RENDERING_EXPORT PFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC ReleaseImageBufferEventsI3D;
  //Definitions for WGL_I3D_swap_frame_lock
  typedef BOOL (WINAPI * PFNWGLENABLEFRAMELOCKI3DPROC) (void);
  typedef BOOL (WINAPI * PFNWGLDISABLEFRAMELOCKI3DPROC) (void);
  typedef BOOL (WINAPI * PFNWGLISENABLEDFRAMELOCKI3DPROC) (BOOL *pFlag);
  typedef BOOL (WINAPI * PFNWGLQUERYFRAMELOCKMASTERI3DPROC) (BOOL *pFlag);
  extern VTK_RENDERING_EXPORT PFNWGLENABLEFRAMELOCKI3DPROC EnableFrameLockI3D;
  extern VTK_RENDERING_EXPORT PFNWGLDISABLEFRAMELOCKI3DPROC DisableFrameLockI3D;
  extern VTK_RENDERING_EXPORT PFNWGLISENABLEDFRAMELOCKI3DPROC IsEnabledFrameLockI3D;
  extern VTK_RENDERING_EXPORT PFNWGLQUERYFRAMELOCKMASTERI3DPROC QueryFrameLockMasterI3D;
  //Definitions for WGL_NV_render_depth_texture
  enum WGL_NV_render_depth_texture_consts {
    BIND_TO_TEXTURE_DEPTH_NV = 0x20A3,
    BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV = 0x20A4,
    DEPTH_TEXTURE_FORMAT_NV = 0x20A5,
    TEXTURE_DEPTH_COMPONENT_NV = 0x20A6,
    DEPTH_COMPONENT_NV = 0x20A7
  };
  //Definitions for WGL_NV_render_texture_rectangle
  enum WGL_NV_render_texture_rectangle_consts {
    BIND_TO_TEXTURE_RECTANGLE_RGB_NV = 0x20A0,
    BIND_TO_TEXTURE_RECTANGLE_RGBA_NV = 0x20A1,
    TEXTURE_RECTANGLE_NV = 0x20A2
  };
  //Definitions for WGL_ATI_pixel_format_float
  enum WGL_ATI_pixel_format_float_consts {
    TYPE_RGBA_FLOAT_ATI = 0x21A0
  };
  //Definitions for WGL_NV_float_buffer
  enum WGL_NV_float_buffer_consts {
    FLOAT_COMPONENTS_NV = 0x20B0,
    BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV = 0x20B1,
    BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV = 0x20B2,
    BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV = 0x20B3,
    BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV = 0x20B4,
    TEXTURE_FLOAT_R_NV = 0x20B5,
    TEXTURE_FLOAT_RG_NV = 0x20B6,
    TEXTURE_FLOAT_RGB_NV = 0x20B7,
    TEXTURE_FLOAT_RGBA_NV = 0x20B8
  };
  //Definitions for WGL_EXT_display_color_table
  typedef GLboolean (WINAPI * PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC) (GLushort id);
  typedef GLboolean (WINAPI * PFNWGLLOADDISPLAYCOLORTABLEEXTPROC) (const GLushort *table, GLuint length);
  typedef GLboolean (WINAPI * PFNWGLBINDDISPLAYCOLORTABLEEXTPROC) (GLushort id);
  typedef VOID (WINAPI * PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC) (GLushort id);
  extern VTK_RENDERING_EXPORT PFNWGLCREATEDISPLAYCOLORTABLEEXTPROC CreateDisplayColorTableEXT;
  extern VTK_RENDERING_EXPORT PFNWGLLOADDISPLAYCOLORTABLEEXTPROC LoadDisplayColorTableEXT;
  extern VTK_RENDERING_EXPORT PFNWGLBINDDISPLAYCOLORTABLEEXTPROC BindDisplayColorTableEXT;
  extern VTK_RENDERING_EXPORT PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC DestroyDisplayColorTableEXT;
  //Definitions for WGL_EXT_extensions_string
  typedef const char * (WINAPI * PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);
  extern VTK_RENDERING_EXPORT PFNWGLGETEXTENSIONSSTRINGEXTPROC GetExtensionsStringEXT;
  //Definitions for WGL_EXT_swap_control
  typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC) (int interval);
  typedef int (WINAPI * PFNWGLGETSWAPINTERVALEXTPROC) (void);
  extern VTK_RENDERING_EXPORT PFNWGLSWAPINTERVALEXTPROC SwapIntervalEXT;
  extern VTK_RENDERING_EXPORT PFNWGLGETSWAPINTERVALEXTPROC GetSwapIntervalEXT;
  //Definitions for WGL_NV_vertex_array_range
  typedef void* (WINAPI * PFNWGLALLOCATEMEMORYNVPROC) (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority);
  typedef void (WINAPI * PFNWGLFREEMEMORYNVPROC) (void *pointer);
  extern VTK_RENDERING_EXPORT PFNWGLALLOCATEMEMORYNVPROC AllocateMemoryNV;
  extern VTK_RENDERING_EXPORT PFNWGLFREEMEMORYNVPROC FreeMemoryNV;
  //Definitions for WGL_OML_sync_control
  typedef BOOL (WINAPI * PFNWGLGETSYNCVALUESOMLPROC) (HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc);
  typedef BOOL (WINAPI * PFNWGLGETMSCRATEOMLPROC) (HDC hdc, INT32 *numerator, INT32 *denominator);
  typedef INT64 (WINAPI * PFNWGLSWAPBUFFERSMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);
  typedef INT64 (WINAPI * PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) (HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);
  typedef BOOL (WINAPI * PFNWGLWAITFORMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);
  typedef BOOL (WINAPI * PFNWGLWAITFORSBCOMLPROC) (HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);
  extern VTK_RENDERING_EXPORT PFNWGLGETSYNCVALUESOMLPROC GetSyncValuesOML;
  extern VTK_RENDERING_EXPORT PFNWGLGETMSCRATEOMLPROC GetMscRateOML;
  extern VTK_RENDERING_EXPORT PFNWGLSWAPBUFFERSMSCOMLPROC SwapBuffersMscOML;
  extern VTK_RENDERING_EXPORT PFNWGLSWAPLAYERBUFFERSMSCOMLPROC SwapLayerBuffersMscOML;
  extern VTK_RENDERING_EXPORT PFNWGLWAITFORMSCOMLPROC WaitForMscOML;
  extern VTK_RENDERING_EXPORT PFNWGLWAITFORSBCOMLPROC WaitForSbcOML;
  //Definitions for WGL_I3D_swap_frame_usage
  typedef BOOL (WINAPI * PFNWGLGETFRAMEUSAGEI3DPROC) (float *pUsage);
  typedef BOOL (WINAPI * PFNWGLBEGINFRAMETRACKINGI3DPROC) (void);
  typedef BOOL (WINAPI * PFNWGLENDFRAMETRACKINGI3DPROC) (void);
  typedef BOOL (WINAPI * PFNWGLQUERYFRAMETRACKINGI3DPROC) (DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
  extern VTK_RENDERING_EXPORT PFNWGLGETFRAMEUSAGEI3DPROC GetFrameUsageI3D;
  extern VTK_RENDERING_EXPORT PFNWGLBEGINFRAMETRACKINGI3DPROC BeginFrameTrackingI3D;
  extern VTK_RENDERING_EXPORT PFNWGLENDFRAMETRACKINGI3DPROC EndFrameTrackingI3D;
  extern VTK_RENDERING_EXPORT PFNWGLQUERYFRAMETRACKINGI3DPROC QueryFrameTrackingI3D;
}
#endif

#ifdef VTKGL_APIENTRY_DEFINED
#undef APIENTRY
#endif

#ifdef VTKGL_APIENTRYP_DEFINED
#undef APIENTRYP
#endif

#endif //_vtkgl_h
